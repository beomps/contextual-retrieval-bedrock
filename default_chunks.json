[
  {
    "doc_id": "doc_1_1",
    "original_uuid": "4647bdd2-ee5a-4f0c-b8e9-bcd8f84e0ac4",
    "content": "User Guide Amazon Bedrock Studio Copyright © 2024 Amazon Web Services, Inc. and/or its affiliates. All rights reserved.",
    "chunks": [
      {
        "chunk_id": "doc_1_1_chunk_0",
        "original_index": 0,
        "content": "User Guide Amazon Bedrock Studio Copyright © 2024 Amazon Web Services, Inc. and/or its affiliates. All rights reserved."
      }
    ]
  },
  {
    "doc_id": "doc_2_1",
    "original_uuid": "33333364-5bb1-41bc-b943-543f16365a45",
    "content": "Amazon Bedrock Studio User Guide Amazon Bedrock Studio: User Guide Copyright © 2024 Amazon Web Services, Inc. and/or its affiliates. All rights reserved. Amazon's trademarks and trade dress may not be used in connection with any product or service that is not Amazon's, in any manner that is likely to cause confusion among customers, or in any manner that disparages or discredits Amazon. All other trademarks not owned by Amazon are the property of their respective owners, who may or may not be affiliated with, connected to, or sponsored by Amazon.",
    "chunks": [
      {
        "chunk_id": "doc_2_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide Amazon Bedrock Studio: User Guide Copyright © 2024 Amazon Web Services, Inc. and/or its affiliates. All rights reserved. Amazon's trademarks and trade dress may not be used in connection with any product or service that is not Amazon's, in any manner that is likely to cause confusion among customers, or in any manner that disparages or discredits Amazon. All other trademarks not owned by Amazon are the property of their respective owners, who may or may not be affiliated"
      },
      {
        "chunk_id": "doc_2_1_chunk_1",
        "original_index": 1,
        "content": "spective owners, who may or may not be affiliated with, connected to, or sponsored by Amazon."
      }
    ]
  },
  {
    "doc_id": "doc_3_1",
    "original_uuid": "815e25c1-2cfc-4cd2-82a2-82dd587427c0",
    "content": "Amazon Bedrock Studio User Guide Table of Contents What is Amazon Bedrock Studio? .................................................................................................. 1 Workspaces.................................................................................................................................................... 1 Explore mode ........................................................................................................................................... 1 Build mode ............................................................................................................................................... 2 Are you a first-time Amazon Bedrock Studio user? .............................................................................. 4 Explore Amazon Bedrock Studio .................................................................................................... 5 What is a prompt? ........................................................................................................................................ 5 Use Explore mode to chat with a model ................................................................................................ 6 Build a chat app ............................................................................................................................ 10 Create an initial chat app ......................................................................................................................... 11 Add a guardrail ........................................................................................................................................... 16 Add a guardrail ...................................................................................................................................... 16 Add a document data source .................................................................................................................. 18 Add a function call .................................................................................................................................... 20 Export a chat app .......................................................................................................................... 24 Export your Amazon Bedrock Studio chat app .................................................................................... 24 Deploy an Amazon Bedrock Studio chat app ...................................................................................... 26 Prerequisites for deploying a chat app............................................................................................ 27 Deploy the chat app ............................................................................................................................ 28 Run a deployed chat app ........................................................................................................................ 29 Prerequisites for running a chat app ................................................................................................ 30 Run the chat app .................................................................................................................................. 30 Build a Prompt Flows app ............................................................................................................ 31 Build a prompt flow .................................................................................................................................. 33 Create an initial Prompt Flow app .................................................................................................... 33 Add a Knowledge Base ........................................................................................................................ 35 Add a prompt ........................................................................................................................................ 37 Add a condition ..................................................................................................................................... 39 Prompt Flow nodes ................................................................................................................................... 41 Flow input.............................................................................................................................................. 42 Flow output ............................................................................................................................................ 42 Condition................................................................................................................................................ 43 Prompt node .......................................................................................................................................... 44 Knowledge Base node ......................................................................................................................... 45 iii",
    "chunks": [
      {
        "chunk_id": "doc_3_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide Table of Contents What is Amazon Bedrock Studio? .................................................................................................. 1 Workspaces.................................................................................................................................................... 1 Explore mode ........................................................................................................................................... 1 Build"
      },
      {
        "chunk_id": "doc_3_1_chunk_1",
        "original_index": 1,
        "content": "......................................... 1 Build mode ............................................................................................................................................... 2 Are you a first-time Amazon Bedrock Studio user? .............................................................................. 4 Explore Amazon Bedrock Studio .................................................................................................... 5 What is a prompt? ........................................................................................................................................"
      },
      {
        "chunk_id": "doc_3_1_chunk_2",
        "original_index": 2,
        "content": "................................................. 5 Use Explore mode to chat with a model ................................................................................................ 6 Build a chat app ............................................................................................................................ 10 Create an initial chat app ......................................................................................................................... 11 Add a guardrail"
      },
      {
        "chunk_id": "doc_3_1_chunk_3",
        "original_index": 3,
        "content": ".............................. 11 Add a guardrail ........................................................................................................................................... 16 Add a guardrail ...................................................................................................................................... 16 Add a document data source .................................................................................................................. 18 Add a function"
      },
      {
        "chunk_id": "doc_3_1_chunk_4",
        "original_index": 4,
        "content": "............................... 18 Add a function call .................................................................................................................................... 20 Export a chat app .......................................................................................................................... 24 Export your Amazon Bedrock Studio chat app .................................................................................... 24 Deploy an Amazon Bedrock Studio chat"
      },
      {
        "chunk_id": "doc_3_1_chunk_5",
        "original_index": 5,
        "content": "......... 24 Deploy an Amazon Bedrock Studio chat app ...................................................................................... 26 Prerequisites for deploying a chat app............................................................................................ 27 Deploy the chat app ............................................................................................................................ 28 Run a deployed chat app ........................................................................................................................"
      },
      {
        "chunk_id": "doc_3_1_chunk_6",
        "original_index": 6,
        "content": "................................................. 29 Prerequisites for running a chat app ................................................................................................ 30 Run the chat app .................................................................................................................................. 30 Build a Prompt Flows app ............................................................................................................ 31 Build a prompt flow .................................................................................................................................."
      },
      {
        "chunk_id": "doc_3_1_chunk_7",
        "original_index": 7,
        "content": "................................................. 33 Create an initial Prompt Flow app .................................................................................................... 33 Add a Knowledge Base ........................................................................................................................ 35 Add a prompt ........................................................................................................................................ 37 Add a condition"
      },
      {
        "chunk_id": "doc_3_1_chunk_8",
        "original_index": 8,
        "content": ".............................. 37 Add a condition ..................................................................................................................................... 39 Prompt Flow nodes ................................................................................................................................... 41 Flow input.............................................................................................................................................. 42 Flow"
      },
      {
        "chunk_id": "doc_3_1_chunk_9",
        "original_index": 9,
        "content": "......................................... 42 Flow output ............................................................................................................................................ 42 Condition................................................................................................................................................ 43 Prompt node .........................................................................................................................................."
      },
      {
        "chunk_id": "doc_3_1_chunk_10",
        "original_index": 10,
        "content": "................................................. 44 Knowledge Base node ......................................................................................................................... 45 iii"
      }
    ]
  },
  {
    "doc_id": "doc_4_1",
    "original_uuid": "d1658c36-b1b5-43c4-ba44-7b744660a506",
    "content": "Amazon Bedrock Studio User Guide Define inputs with expressions ............................................................................................................... 45 Use prompts with your app .......................................................................................................... 51 Prompt engineering guides ...................................................................................................................... 52 Inference parameters ................................................................................................................................. 52 Randomness and diversity .................................................................................................................. 52 Create a prompt ......................................................................................................................................... 54 Add a prompt to a Prompt Flows app .................................................................................................. 56 Modify a prompt ........................................................................................................................................ 57 Delete a prompt ......................................................................................................................................... 59 Add a data source to your app ..................................................................................................... 60 Document data source .............................................................................................................................. 60 Knowledge Base data source ................................................................................................................... 60 Create a Knowledge Base component ................................................................................................... 61 Add a Knowledge Base component to a chat app .............................................................................. 62 Add a Knowledge Base component to a Prompt Flow app ............................................................... 62 Safeguard your app with a guardrail ........................................................................................... 64 Guardrail policies ........................................................................................................................................ 64 Content filters ........................................................................................................................................ 64 Denied topics......................................................................................................................................... 66 Create a guardrail component ................................................................................................................ 67 Add a guardrail component to a chat app ........................................................................................... 68 Call functions from your app ....................................................................................................... 69 Function schema........................................................................................................................................ 69 Valid components for globally-scoped security requirements .................................................... 70 Authentication methods ........................................................................................................................... 73 Create a function component ................................................................................................................. 74 Add a function component to a chat app ............................................................................................ 75 Organize your work with projects ................................................................................................ 76 Create a project .......................................................................................................................................... 76 Share a project ........................................................................................................................................... 78 Stop sharing a project .............................................................................................................................. 79 Delete project resources ........................................................................................................................... 79 Delete a project .......................................................................................................................................... 80 Document history.......................................................................................................................... 82 iv",
    "chunks": [
      {
        "chunk_id": "doc_4_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide Define inputs with expressions ............................................................................................................... 45 Use prompts with your app .......................................................................................................... 51 Prompt engineering guides ...................................................................................................................... 52 Inference parameters ................................................................................................................................."
      },
      {
        "chunk_id": "doc_4_1_chunk_1",
        "original_index": 1,
        "content": "................................................. 52 Randomness and diversity .................................................................................................................. 52 Create a prompt ......................................................................................................................................... 54 Add a prompt to a Prompt Flows app .................................................................................................. 56 Modify a prompt"
      },
      {
        "chunk_id": "doc_4_1_chunk_2",
        "original_index": 2,
        "content": ".............................. 56 Modify a prompt ........................................................................................................................................ 57 Delete a prompt ......................................................................................................................................... 59 Add a data source to your app ..................................................................................................... 60 Document data source"
      },
      {
        "chunk_id": "doc_4_1_chunk_3",
        "original_index": 3,
        "content": "......................... 60 Document data source .............................................................................................................................. 60 Knowledge Base data source ................................................................................................................... 60 Create a Knowledge Base component ................................................................................................... 61 Add a Knowledge Base component to a chat"
      },
      {
        "chunk_id": "doc_4_1_chunk_4",
        "original_index": 4,
        "content": "..... 61 Add a Knowledge Base component to a chat app .............................................................................. 62 Add a Knowledge Base component to a Prompt Flow app ............................................................... 62 Safeguard your app with a guardrail ........................................................................................... 64 Guardrail policies ........................................................................................................................................"
      },
      {
        "chunk_id": "doc_4_1_chunk_5",
        "original_index": 5,
        "content": "................................................. 64 Content filters ........................................................................................................................................ 64 Denied topics......................................................................................................................................... 66 Create a guardrail component ................................................................................................................"
      },
      {
        "chunk_id": "doc_4_1_chunk_6",
        "original_index": 6,
        "content": "................................................. 67 Add a guardrail component to a chat app ........................................................................................... 68 Call functions from your app ....................................................................................................... 69 Function schema........................................................................................................................................ 69 Valid components for globally-scoped"
      },
      {
        "chunk_id": "doc_4_1_chunk_7",
        "original_index": 7,
        "content": "......... 69 Valid components for globally-scoped security requirements .................................................... 70 Authentication methods ........................................................................................................................... 73 Create a function component ................................................................................................................. 74 Add a function component to a chat app ............................................................................................"
      },
      {
        "chunk_id": "doc_4_1_chunk_8",
        "original_index": 8,
        "content": "................................................. 75 Organize your work with projects ................................................................................................ 76 Create a project .......................................................................................................................................... 76 Share a project ..........................................................................................................................................."
      },
      {
        "chunk_id": "doc_4_1_chunk_9",
        "original_index": 9,
        "content": "................................................. 78 Stop sharing a project .............................................................................................................................. 79 Delete project resources ........................................................................................................................... 79 Delete a project .........................................................................................................................................."
      },
      {
        "chunk_id": "doc_4_1_chunk_10",
        "original_index": 10,
        "content": "................................................. 80 Document history.......................................................................................................................... 82 iv"
      }
    ]
  },
  {
    "doc_id": "doc_5_1",
    "original_uuid": "4d1ecd66-f3cc-4c40-9900-74af46fa9b81",
    "content": "Amazon Bedrock Studio User Guide What is Amazon Bedrock Studio? Amazon Bedrock Studio is a web app that lets you easily protoype apps that use Amazon Bedrock models and features, without having to set up and use a developer environment. For example, you can use Amazon Bedrock to try a prompt with an Anthropic Claude model without having to write any code. Later, you can use Bedrock Studio to create a prototype app that uses an Amazon Bedrock model and features, such as a Knowledge Base or a Guardrail, again without having to write any code. To use Amazon Bedrock Studio, you must be a member of a workspace. Your organization will provide you with login details. If you don't have login details, contact your administrator. Note If you are administrator and need information about managing an Amazon Bedrock Studio workspace, see Manage Amazon Bedrock Studio in the Amazon Bedrock user guide. Workspaces A workspace in Amazon Bedrock Studio is where you experiment with Amazon Bedrock models and where you can build Amazon Bedrock enabled apps. As an Amazon Bedrock Studio user, you can use a workspace in two types of user mode, Explore or Build. Explore mode Explore mode provides a playground that lets you easily try a model by sending prompts to the model and viewing the responses. For more information, see Explore Amazon Bedrock Studio. Workspaces 1",
    "chunks": [
      {
        "chunk_id": "doc_5_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide What is Amazon Bedrock Studio? Amazon Bedrock Studio is a web app that lets you easily protoype apps that use Amazon Bedrock models and features, without having to set up and use a developer environment. For example, you can use Amazon Bedrock to try a prompt with an Anthropic Claude model without having to write any code. Later, you can use Bedrock Studio to create a prototype app that uses an Amazon Bedrock model and features, such as a Knowledge Base or a Guardrail,"
      },
      {
        "chunk_id": "doc_5_1_chunk_1",
        "original_index": 1,
        "content": "eatures, such as a Knowledge Base or a Guardrail, again without having to write any code. To use Amazon Bedrock Studio, you must be a member of a workspace. Your organization will provide you with login details. If you don't have login details, contact your administrator. Note If you are administrator and need information about managing an Amazon Bedrock Studio workspace, see Manage Amazon Bedrock Studio in the Amazon Bedrock user guide. Workspaces A workspace in Amazon Bedrock Studio is where you"
      },
      {
        "chunk_id": "doc_5_1_chunk_2",
        "original_index": 2,
        "content": "A workspace in Amazon Bedrock Studio is where you experiment with Amazon Bedrock models and where you can build Amazon Bedrock enabled apps. As an Amazon Bedrock Studio user, you can use a workspace in two types of user mode, Explore or Build. Explore mode Explore mode provides a playground that lets you easily try a model by sending prompts to the model and viewing the responses. For more information, see Explore Amazon Bedrock Studio. Workspaces 1"
      }
    ]
  },
  {
    "doc_id": "doc_6_1",
    "original_uuid": "999433a6-7fa1-406e-b1b2-883c9a4f0de7",
    "content": "Amazon Bedrock Studio User Guide Build mode Build mode is where you can create apps that use Amazon Bedrock models. You can create two types of apps, a chat app and a Prompt Flows app. A chat app allows users to communicate with an Amazon Bedrock model through a conversational interface, typically by sending text messages and receiving responses. A Prompt Flows app allows you to link prompts, supported foundational models (FMS), and other units of work, such as a Knowledge Base, together and create generative AI workflows for end-to-end solutions. Build mode 2",
    "chunks": [
      {
        "chunk_id": "doc_6_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide Build mode Build mode is where you can create apps that use Amazon Bedrock models. You can create two types of apps, a chat app and a Prompt Flows app. A chat app allows users to communicate with an Amazon Bedrock model through a conversational interface, typically by sending text messages and receiving responses. A Prompt Flows app allows you to link prompts, supported foundational models (FMS), and other units of work, such as a Knowledge Base, together and create"
      },
      {
        "chunk_id": "doc_6_1_chunk_1",
        "original_index": 1,
        "content": "rk, such as a Knowledge Base, together and create generative AI workflows for end-to-end solutions. Build mode 2"
      }
    ]
  },
  {
    "doc_id": "doc_7_1",
    "original_uuid": "eb4b4768-ba85-411e-8fa0-110ac265fdc2",
    "content": "Amazon Bedrock Studio User Guide Apps that you create with Bedrock Studio can integrate the following Amazon Bedrock features. • Data sources — Enrich apps by including context that is received from querying a Knowledge Base or a document. • Guardrails — Lets you implement safeguards for your Bedrock Studio app based on your use cases and responsible AI policies. • Functions — Lets a model call a function to access a specific capability when handling a prompt. • Prompt Management — Reusable prompts that you can use in a Prompt Flows app. Within Build mode, you use a project to organize the apps, prompts, and components that you use for a solution. A component is an Amazon Bedrock Knowledge Base, Guardrail, or Function. When you open a project, you can access the App builder and Project details by opening the side navigation menu. Build mode 3",
    "chunks": [
      {
        "chunk_id": "doc_7_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide Apps that you create with Bedrock Studio can integrate the following Amazon Bedrock features. • Data sources — Enrich apps by including context that is received from querying a Knowledge Base or a document. • Guardrails — Lets you implement safeguards for your Bedrock Studio app based on your use cases and responsible AI policies. • Functions — Lets a model call a function to access a specific capability when handling a prompt. • Prompt Management — Reusable prompts"
      },
      {
        "chunk_id": "doc_7_1_chunk_1",
        "original_index": 1,
        "content": "a prompt. • Prompt Management — Reusable prompts that you can use in a Prompt Flows app. Within Build mode, you use a project to organize the apps, prompts, and components that you use for a solution. A component is an Amazon Bedrock Knowledge Base, Guardrail, or Function. When you open a project, you can access the App builder and Project details by opening the side navigation menu. Build mode 3"
      }
    ]
  },
  {
    "doc_id": "doc_8_1",
    "original_uuid": "147b1e4f-c790-440e-9df7-2f47f7ac619b",
    "content": "Amazon Bedrock Studio User Guide The App builder is one way you can access the chat app or Prompt Flows app that you are currently working on. Project details is where you create and manage the apps, components, and prompts that the apps in your project use. For more information, see Organize your work with projects in Amazon Bedrock Studio. If you work on a team, you can collaborate by sharing a project with other team members. For more information, see Share an Amazon Bedrock Studio project. Are you a first-time Amazon Bedrock Studio user? If you're a first-time user of Bedrock Studio, we recommend that you read the following sections in order: 1. Explore Amazon Bedrock Studio – In this section, you access your Amazon Bedrock Studio workspace for the first time and use Explore mode to experiment with an Amazon Bedrock model. 2. Build a chat app with Amazon Bedrock Studio – In this section, you use Build mode to create a project in your workspace and create a simple Amazon Bedrock Studio app. 3. Build a Prompt Flows app with Amazon Bedrock Studio – In this section, you learn how to create a Prompt Flows app. Are you a first-time Amazon Bedrock Studio user? 4",
    "chunks": [
      {
        "chunk_id": "doc_8_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide The App builder is one way you can access the chat app or Prompt Flows app that you are currently working on. Project details is where you create and manage the apps, components, and prompts that the apps in your project use. For more information, see Organize your work with projects in Amazon Bedrock Studio. If you work on a team, you can collaborate by sharing a project with other team members. For more information, see Share an Amazon Bedrock Studio project. Are"
      },
      {
        "chunk_id": "doc_8_1_chunk_1",
        "original_index": 1,
        "content": ", see Share an Amazon Bedrock Studio project. Are you a first-time Amazon Bedrock Studio user? If you're a first-time user of Bedrock Studio, we recommend that you read the following sections in order: 1. Explore Amazon Bedrock Studio – In this section, you access your Amazon Bedrock Studio workspace for the first time and use Explore mode to experiment with an Amazon Bedrock model. 2. Build a chat app with Amazon Bedrock Studio – In this section, you use Build mode to create a project in your workspace"
      },
      {
        "chunk_id": "doc_8_1_chunk_2",
        "original_index": 2,
        "content": "Build mode to create a project in your workspace and create a simple Amazon Bedrock Studio app. 3. Build a Prompt Flows app with Amazon Bedrock Studio – In this section, you learn how to create a Prompt Flows app. Are you a first-time Amazon Bedrock Studio user? 4"
      }
    ]
  },
  {
    "doc_id": "doc_9_1",
    "original_uuid": "29413c49-8f19-4af4-ab41-8b41141a1316",
    "content": "Amazon Bedrock Studio User Guide Explore Amazon Bedrock Studio Amazon Bedrock Studio is a web app that lets you easily protoype apps that use Amazon Bedrock models and features. Amazon Bedrock Studio provides an Explore mode that lets you use a playground to easily experiment with a model. In the playground you can chat with a model by sending prompts to the model and viewing the responses. After experimenting with the playground, you can then use build mode to create a chat app or a Prompt Flows app. At any time, you can send us feedback about your experience with Amazon Bedrock by choosing the feedback button at the top of the page. To get started with Amazon Bedrock Studio, you need an email invitation to an Amazon Bedrock Studio workspace. If you haven't received the invitation email from your organization, contact your organization's adminstrator. Your organization's administrator determines the Amazon Bedrock Studio features that you have access to. If you need access to a model or feature that you don't currently have access to, contact your organization's adminstrator. Topics • What is a prompt? • Use Explore mode to chat with a model What is a prompt? A prompt is input you send to a model in order for it to generate a response, in a process known as inference. For example, you could send the following prompt to a model. What is Avebury stone circle? When you run the prompt in the playground, the playground shows a response from the model that is similar to the following. Avebury stone circle is a Neolithic monument located in Wiltshire, England. It consists of a massive circular bank and ditch, with a large outer circle of standing stones What is a prompt? 5",
    "chunks": [
      {
        "chunk_id": "doc_9_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide Explore Amazon Bedrock Studio Amazon Bedrock Studio is a web app that lets you easily protoype apps that use Amazon Bedrock models and features. Amazon Bedrock Studio provides an Explore mode that lets you use a playground to easily experiment with a model. In the playground you can chat with a model by sending prompts to the model and viewing the responses. After experimenting with the playground, you can then use build mode to create a chat app or a Prompt Flows"
      },
      {
        "chunk_id": "doc_9_1_chunk_1",
        "original_index": 1,
        "content": "build mode to create a chat app or a Prompt Flows app. At any time, you can send us feedback about your experience with Amazon Bedrock by choosing the feedback button at the top of the page. To get started with Amazon Bedrock Studio, you need an email invitation to an Amazon Bedrock Studio workspace. If you haven't received the invitation email from your organization, contact your organization's adminstrator. Your organization's administrator determines the Amazon Bedrock Studio features that you"
      },
      {
        "chunk_id": "doc_9_1_chunk_2",
        "original_index": 2,
        "content": "mines the Amazon Bedrock Studio features that you have access to. If you need access to a model or feature that you don't currently have access to, contact your organization's adminstrator. Topics • What is a prompt? • Use Explore mode to chat with a model What is a prompt? A prompt is input you send to a model in order for it to generate a response, in a process known as inference. For example, you could send the following prompt to a model. What is Avebury stone circle? When you run the prompt"
      },
      {
        "chunk_id": "doc_9_1_chunk_3",
        "original_index": 3,
        "content": "is Avebury stone circle? When you run the prompt in the playground, the playground shows a response from the model that is similar to the following. Avebury stone circle is a Neolithic monument located in Wiltshire, England. It consists of a massive circular bank and ditch, with a large outer circle of standing stones What is a prompt? 5"
      }
    ]
  },
  {
    "doc_id": "doc_10_1",
    "original_uuid": "c87fb309-d7df-49c7-a504-8955c1530980",
    "content": "Amazon Bedrock Studio User Guide that originally numbered around 100. The Explore mode playground provides quick start prompts that illustrate the kinds of prompt that you can send to a model. The Explore playground also lets you try multimodal prompts, which are prompts that include images and text. This allows you to pass an image to a model and ask questions such as What's in this image?. Not all models support multimodal prompts. The actual response that you get for a prompt depends on the model you use. With Amazon Bedrock models you can use inference parameters to influence the response from a model. For example, you can use the temperature inference parameter to filter out lower probability responses. To experiment with inference parameters, or use an Amazon Bedrock component, such as a guardrail, you need to create a Bedrock Studio app. You can create a chat app or a Prompt Flows app. If you create a Prompt Flows app, you can also create prompts that you can customize for different use cases. For more information, see Use prompts with your app. Use Explore mode to chat with a model These instructions show you how to use the playground in Explore mode to chat with a model. You chat with a model by sending a prompt to the model and by receiving the response that the model generates. You continue the chat by sending further prompts. To chat with a model 1. Open the invitation email sent to you by your organization. 2. In the email, choose the link to the workspace that you are invited to. 3. Choose Sign in with SSO to open your Amazon Bedrock Studio workspace. Use Explore mode to chat with a model 6",
    "chunks": [
      {
        "chunk_id": "doc_10_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide that originally numbered around 100. The Explore mode playground provides quick start prompts that illustrate the kinds of prompt that you can send to a model. The Explore playground also lets you try multimodal prompts, which are prompts that include images and text. This allows you to pass an image to a model and ask questions such as What's in this image?. Not all models support multimodal prompts. The actual response that you get for a prompt depends on the model"
      },
      {
        "chunk_id": "doc_10_1_chunk_1",
        "original_index": 1,
        "content": "se that you get for a prompt depends on the model you use. With Amazon Bedrock models you can use inference parameters to influence the response from a model. For example, you can use the temperature inference parameter to filter out lower probability responses. To experiment with inference parameters, or use an Amazon Bedrock component, such as a guardrail, you need to create a Bedrock Studio app. You can create a chat app or a Prompt Flows app. If you create a Prompt Flows app, you can also create"
      },
      {
        "chunk_id": "doc_10_1_chunk_2",
        "original_index": 2,
        "content": "ou create a Prompt Flows app, you can also create prompts that you can customize for different use cases. For more information, see Use prompts with your app. Use Explore mode to chat with a model These instructions show you how to use the playground in Explore mode to chat with a model. You chat with a model by sending a prompt to the model and by receiving the response that the model generates. You continue the chat by sending further prompts. To chat with a model 1. Open the invitation email sent"
      },
      {
        "chunk_id": "doc_10_1_chunk_3",
        "original_index": 3,
        "content": "at with a model 1. Open the invitation email sent to you by your organization. 2. In the email, choose the link to the workspace that you are invited to. 3. Choose Sign in with SSO to open your Amazon Bedrock Studio workspace. Use Explore mode to chat with a model 6"
      }
    ]
  },
  {
    "doc_id": "doc_11_1",
    "original_uuid": "229bde60-e709-420a-8748-18839cd9faf9",
    "content": "Amazon Bedrock Studio User Guide 4. Enter your the user name that you use to access your organization's resources and choose Next. 5. Enter your password and choose Sign in. 6. In the welcome to Amazon Bedrock Studio dialog box, choose Start exploring to start using the playground. The dialog box isn't shown if you have previously used the workspace. 7. Make sure that you are in the Explore mode, by choosing Explore at the top right of the page. Use Explore mode to chat with a model 7",
    "chunks": [
      {
        "chunk_id": "doc_11_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide 4. Enter your the user name that you use to access your organization's resources and choose Next. 5. Enter your password and choose Sign in. 6. In the welcome to Amazon Bedrock Studio dialog box, choose Start exploring to start using the playground. The dialog box isn't shown if you have previously used the workspace. 7. Make sure that you are in the Explore mode, by choosing Explore at the top right of the page. Use Explore mode to chat with a model 7"
      }
    ]
  },
  {
    "doc_id": "doc_12_1",
    "original_uuid": "27c6f13f-f5a1-445e-a335-d21cb13fbdc4",
    "content": "Amazon Bedrock Studio User Guide 8. For Model select a model to use, or use the default model. 9. In the Quick start prompts section at the bottom of the page, choose one of prompts. The playground sends the prompt to the model and shows the text that the model generated in response. Continue the chat until you are ready for the next step. 10. Choose Reset to clear the playground. 11. In the Enter prompt text box, enter What is Avebury stone circle?. 12. Press Ctrl + Enter on your keyboard to send the prompt to the model. Amazon Bedrock Studio shows the response from the model in the playground. 13. Continue the chat by entering the prompt Is there a museum there? and pressing Ctrl + Enter. The response shows how the model uses the previous prompt as context for generating its next response. 14. Some models are multimodal in that that they can process text and images. To try analyzing an image, do the following. a. In Model choose Anthropic Claude 3 Sonnet. b. Choose the image button at the left of the Enter prompt text box. c. In the open file dialog box, choose an image from your local computer. d. In the text box, next to the image that you uploaded, enter What's in this image? Use Explore mode to chat with a model 8",
    "chunks": [
      {
        "chunk_id": "doc_12_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide 8. For Model select a model to use, or use the default model. 9. In the Quick start prompts section at the bottom of the page, choose one of prompts. The playground sends the prompt to the model and shows the text that the model generated in response. Continue the chat until you are ready for the next step. 10. Choose Reset to clear the playground. 11. In the Enter prompt text box, enter What is Avebury stone circle?. 12. Press Ctrl + Enter on your keyboard to send"
      },
      {
        "chunk_id": "doc_12_1_chunk_1",
        "original_index": 1,
        "content": ". 12. Press Ctrl + Enter on your keyboard to send the prompt to the model. Amazon Bedrock Studio shows the response from the model in the playground. 13. Continue the chat by entering the prompt Is there a museum there? and pressing Ctrl + Enter. The response shows how the model uses the previous prompt as context for generating its next response. 14. Some models are multimodal in that that they can process text and images. To try analyzing an image, do the following. a. In Model choose Anthropic"
      },
      {
        "chunk_id": "doc_12_1_chunk_2",
        "original_index": 2,
        "content": "e, do the following. a. In Model choose Anthropic Claude 3 Sonnet. b. Choose the image button at the left of the Enter prompt text box. c. In the open file dialog box, choose an image from your local computer. d. In the text box, next to the image that you uploaded, enter What's in this image? Use Explore mode to chat with a model 8"
      }
    ]
  },
  {
    "doc_id": "doc_13_1",
    "original_uuid": "779e42b9-6401-4127-a478-69df626038f4",
    "content": "Amazon Bedrock Studio User Guide e. Press Ctrl + Enter on your keyboard enter to send the prompt to the mode. The playground will show the image and underneath the image show a description of the image. 15. (Optional) Try using another model and different prompts. Different models have different recommendations for creating, or engineering, prompts. For more information, see Prompt engineering guides. Now that you are familiar with the explorer playground, try creating a Bedrock Studio app next. For more information, see Build a chat app with Amazon Bedrock Studio. Use Explore mode to chat with a model 9",
    "chunks": [
      {
        "chunk_id": "doc_13_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide e. Press Ctrl + Enter on your keyboard enter to send the prompt to the mode. The playground will show the image and underneath the image show a description of the image. 15. (Optional) Try using another model and different prompts. Different models have different recommendations for creating, or engineering, prompts. For more information, see Prompt engineering guides. Now that you are familiar with the explorer playground, try creating a Bedrock Studio app next."
      },
      {
        "chunk_id": "doc_13_1_chunk_1",
        "original_index": 1,
        "content": "ayground, try creating a Bedrock Studio app next. For more information, see Build a chat app with Amazon Bedrock Studio. Use Explore mode to chat with a model 9"
      }
    ]
  },
  {
    "doc_id": "doc_14_1",
    "original_uuid": "6de62bbd-2e76-4b05-bd0b-9b283551073b",
    "content": "Amazon Bedrock Studio User Guide Build a chat app with Amazon Bedrock Studio In Amazon Bedrock Studio you use Build mode to create prototype apps that uses Amazon Bedrock models and features. You can also use the Build mode to try experiments not supported in the Explore mode playground, such as setting inference parmeters. In this section, you learn how create a simple Amazon Bedrock Studio chat app in Build mode that creates playlists for a radio station. You can also create a Prompt Flows app. An Amazon Bedrock Studio chat app allows users to communicate with an Amazon Bedrock model through a conversational interface, typically by sending text messages and receiving responses. The model analyzes the user's input, formulate an appropriate response, and carries on a dialogue with the user. You can use a chat apps for various purposes, such as providing customer service, answering questions, offering recommendations, or engaging in open-ended conversations on a wide range of topics. Later, you add the following features. • A guardrail to prevent songs with inappropriate song titles. • A data source that lets the app create playlists using your unique song information. • A function that gets today's top 10 songs. If you want to quickly experiment with sending prompts to a model, consider user the Explore view. For more information, see Explore Amazon Bedrock Studio. For more information about managing your projects and apps, see Organize your work with projects in Amazon Bedrock Studio. Topics • Create an initial chat app • Add a guardrail to your chat app • Add a document data source to your chat app • Add a function call to your chat app 10",
    "chunks": [
      {
        "chunk_id": "doc_14_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide Build a chat app with Amazon Bedrock Studio In Amazon Bedrock Studio you use Build mode to create prototype apps that uses Amazon Bedrock models and features. You can also use the Build mode to try experiments not supported in the Explore mode playground, such as setting inference parmeters. In this section, you learn how create a simple Amazon Bedrock Studio chat app in Build mode that creates playlists for a radio station. You can also create a Prompt Flows app."
      },
      {
        "chunk_id": "doc_14_1_chunk_1",
        "original_index": 1,
        "content": "station. You can also create a Prompt Flows app. An Amazon Bedrock Studio chat app allows users to communicate with an Amazon Bedrock model through a conversational interface, typically by sending text messages and receiving responses. The model analyzes the user's input, formulate an appropriate response, and carries on a dialogue with the user. You can use a chat apps for various purposes, such as providing customer service, answering questions, offering recommendations, or engaging in open-ended"
      },
      {
        "chunk_id": "doc_14_1_chunk_2",
        "original_index": 2,
        "content": "fering recommendations, or engaging in open-ended conversations on a wide range of topics. Later, you add the following features. • A guardrail to prevent songs with inappropriate song titles. • A data source that lets the app create playlists using your unique song information. • A function that gets today's top 10 songs. If you want to quickly experiment with sending prompts to a model, consider user the Explore view. For more information, see Explore Amazon Bedrock Studio. For more information"
      },
      {
        "chunk_id": "doc_14_1_chunk_3",
        "original_index": 3,
        "content": "plore Amazon Bedrock Studio. For more information about managing your projects and apps, see Organize your work with projects in Amazon Bedrock Studio. Topics • Create an initial chat app • Add a guardrail to your chat app • Add a document data source to your chat app • Add a function call to your chat app 10"
      }
    ]
  },
  {
    "doc_id": "doc_15_1",
    "original_uuid": "eb391662-9959-4a91-901f-3374e5fc7730",
    "content": "Amazon Bedrock Studio User Guide Create an initial chat app In this step you create a chat app that generates playlists for a radio station. In the app, you use a system prompt to specify that the model should behave as an app that creates playlists for a radio station that plays rock and pop music. A system prompt is a type of prompt that provides instructions or context to the model about the task it should perform, or the persona it should adopt during the conversation. The user can then use the app to create playlists based on different themes, such as songs that are related by shared artists. The instructions show how you can change the genre of music that the app creates playlists for by changing the system prompt. In the app, you can experiment with the randomness and diversity of the response that the model returns by changing the inference parameters. To create the app, you first need to create a project. A project can contain multiple apps and is also where you can add the Amazon Bedrock components that you want your apps to use. Later you will add guardail, data source, and function calling components to your app. You can share a project with other users and groups of users. For more information, see Share an Amazon Bedrock Studio project. To create a chat app Bedrock Studio app 1. Open your Amazon Bedrock Studio workspace. 2. Make sure that you are in Build mode, by choosing Build at the top right of the page. 3. If this is the first time that you've opened the workspace, Amazon Bedrock Studio does the following: 1. Creates a default project. 2. Creates an empty chat app within the default project. 3. Creates an empty Prompt Flows app within the default project. Create an initial chat app 11",
    "chunks": [
      {
        "chunk_id": "doc_15_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide Create an initial chat app In this step you create a chat app that generates playlists for a radio station. In the app, you use a system prompt to specify that the model should behave as an app that creates playlists for a radio station that plays rock and pop music. A system prompt is a type of prompt that provides instructions or context to the model about the task it should perform, or the persona it should adopt during the conversation. The user can then use the"
      },
      {
        "chunk_id": "doc_15_1_chunk_1",
        "original_index": 1,
        "content": "uring the conversation. The user can then use the app to create playlists based on different themes, such as songs that are related by shared artists. The instructions show how you can change the genre of music that the app creates playlists for by changing the system prompt. In the app, you can experiment with the randomness and diversity of the response that the model returns by changing the inference parameters. To create the app, you first need to create a project. A project can contain multiple"
      },
      {
        "chunk_id": "doc_15_1_chunk_2",
        "original_index": 2,
        "content": "create a project. A project can contain multiple apps and is also where you can add the Amazon Bedrock components that you want your apps to use. Later you will add guardail, data source, and function calling components to your app. You can share a project with other users and groups of users. For more information, see Share an Amazon Bedrock Studio project. To create a chat app Bedrock Studio app 1. Open your Amazon Bedrock Studio workspace. 2. Make sure that you are in Build mode, by choosing"
      },
      {
        "chunk_id": "doc_15_1_chunk_3",
        "original_index": 3,
        "content": "Make sure that you are in Build mode, by choosing Build at the top right of the page. 3. If this is the first time that you've opened the workspace, Amazon Bedrock Studio does the following: 1. Creates a default project. 2. Creates an empty chat app within the default project. 3. Creates an empty Prompt Flows app within the default project. Create an initial chat app 11"
      }
    ]
  },
  {
    "doc_id": "doc_16_1",
    "original_uuid": "58ca0115-2afd-4435-a780-7ceca7bf11c5",
    "content": "Amazon Bedrock Studio User Guide 4. Displays a Welcome to the build mode dialog box with the following choices. • Take a quick tour – Gives you a quick overview of building apps with build mode. • Explore app types – Explore the different types of apps that you can create with Amazon Bedrock Studio. • Build chat app – create your first chat app. For this procedure, choose Build chat app. 4. If you have previously open the workspace, do the following: a. Create a new project by doing the following: i. If you are not on the All projects page, choose View all projects in the Projects dropdown list that is at the top of the page. ii. On the All projects page, choose Create new project. iii. In the Create new project section, enter Radio station project as the name for your project in Project name. iv. For Project description, enter a description for your project. v. Choose Create. It might take a few minutes to create the project. vi. In the card for your project, choose Go to project to open your project. b. Open the navigation pane by choosing the menu ( ) at the top left of the page. c. In App builder choose Chat to open the chat app that Bedrock Studio previously created for you. Create an initial chat app 12",
    "chunks": [
      {
        "chunk_id": "doc_16_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide 4. Displays a Welcome to the build mode dialog box with the following choices. • Take a quick tour – Gives you a quick overview of building apps with build mode. • Explore app types – Explore the different types of apps that you can create with Amazon Bedrock Studio. • Build chat app – create your first chat app. For this procedure, choose Build chat app. 4. If you have previously open the workspace, do the following: a. Create a new project by doing the following:"
      },
      {
        "chunk_id": "doc_16_1_chunk_1",
        "original_index": 1,
        "content": ": a. Create a new project by doing the following: i. If you are not on the All projects page, choose View all projects in the Projects dropdown list that is at the top of the page. ii. On the All projects page, choose Create new project. iii. In the Create new project section, enter Radio station project as the name for your project in Project name. iv. For Project description, enter a description for your project. v. Choose Create. It might take a few minutes to create the project. vi. In the card"
      },
      {
        "chunk_id": "doc_16_1_chunk_2",
        "original_index": 2,
        "content": "ew minutes to create the project. vi. In the card for your project, choose Go to project to open your project. b. Open the navigation pane by choosing the menu ( ) at the top left of the page. c. In App builder choose Chat to open the chat app that Bedrock Studio previously created for you. Create an initial chat app 12"
      }
    ]
  },
  {
    "doc_id": "doc_17_1",
    "original_uuid": "d387ff19-da41-47a6-a568-59c799629775",
    "content": "Amazon Bedrock Studio User Guide If you have previously used a different app, that app is shown. If you don't want to use that app, create a new app — On the project page, in the Apps section, choose Create app and then Chat app. d. If the Welcome to build model dialog is shown, choose Build chat app. 5. In the Configs pane, choose the model that you want your app to use in Model. 6. In App name, enter Radio show as the name for your app. 7. For System prompt & examples, enter You are an app that creates 2 hour long playlists for a radio station that plays rock and pop music. Create an initial chat app 13",
    "chunks": [
      {
        "chunk_id": "doc_17_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide If you have previously used a different app, that app is shown. If you don't want to use that app, create a new app — On the project page, in the Apps section, choose Create app and then Chat app. d. If the Welcome to build model dialog is shown, choose Build chat app. 5. In the Configs pane, choose the model that you want your app to use in Model. 6. In App name, enter Radio show as the name for your app. 7. For System prompt & examples, enter You are an app that"
      },
      {
        "chunk_id": "doc_17_1_chunk_1",
        "original_index": 1,
        "content": "stem prompt & examples, enter You are an app that creates 2 hour long playlists for a radio station that plays rock and pop music. Create an initial chat app 13"
      }
    ]
  },
  {
    "doc_id": "doc_18_1",
    "original_uuid": "0e638211-7978-4830-a01b-d9eb7c6a8a53",
    "content": "Amazon Bedrock Studio User Guide 8. In the UI section, update the user interface for the app by doing the following: a. In Hint text for empty chat enter Hi! I'm your radio show playlist creator. b. In Hint text for user input enter Enter a prompt that describes the playlist that you want. Create an initial chat app 14",
    "chunks": [
      {
        "chunk_id": "doc_18_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide 8. In the UI section, update the user interface for the app by doing the following: a. In Hint text for empty chat enter Hi! I'm your radio show playlist creator. b. In Hint text for user input enter Enter a prompt that describes the playlist that you want. Create an initial chat app 14"
      }
    ]
  },
  {
    "doc_id": "doc_19_1",
    "original_uuid": "50881ccd-8ebd-4903-aa0b-150670bc169a",
    "content": "Amazon Bedrock Studio User Guide c. In Quick start prompts choose Edit. d. Choose Reset to clear the list of quick start prompts e. For Quick-start prompt 1, enter Create a playlist of 10 songs.. f. (Optional). Enter quick start prompts of your choice in the remaining quick start prompt text boxes. 9. Choose Save to save your app. 10. In the Quick start prompts section of the Preview pane, run the quick start prompt that you just created by choosing the prompt. The app shows the prompt and the response from the model in the Preview pane. 11. In the prompt text box (the text should read Enter a prompt that describes the playlist that you want), enter Create a list of 10 songs where each song on the list is related to the next song, by musician, bands, or other connections. Be sure to explain the connection from one song to the next. Don’t repeat any artists.. 12. Choose the run button (or press Ctrl + Enter on your keyboard) to send the prompt to the model. 13. Experiment with influencing the model response by changing the inference parameters in the Parameters section. For example, increase the randomness of the songs in the playlist by increasing the Temperature inference parameter. The inference parameters you can change are Temperature, Top P, and Top K. Not all models support each of these inference parameters. For more information, see Inference parameters. 14. Choose Reset to clear the conversation. 15. For System prompt & examples, enter You are an app that creates 3 hour long playlists for a radio station that plays ambient music.. Doing this changes the system prompt to create a playlist of songs for a different genre of music and show length. Create an initial chat app 15",
    "chunks": [
      {
        "chunk_id": "doc_19_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide c. In Quick start prompts choose Edit. d. Choose Reset to clear the list of quick start prompts e. For Quick-start prompt 1, enter Create a playlist of 10 songs.. f. (Optional). Enter quick start prompts of your choice in the remaining quick start prompt text boxes. 9. Choose Save to save your app. 10. In the Quick start prompts section of the Preview pane, run the quick start prompt that you just created by choosing the prompt. The app shows the prompt and the response"
      },
      {
        "chunk_id": "doc_19_1_chunk_1",
        "original_index": 1,
        "content": "prompt. The app shows the prompt and the response from the model in the Preview pane. 11. In the prompt text box (the text should read Enter a prompt that describes the playlist that you want), enter Create a list of 10 songs where each song on the list is related to the next song, by musician, bands, or other connections. Be sure to explain the connection from one song to the next. Don’t repeat any artists.. 12. Choose the run button (or press Ctrl + Enter on your keyboard) to send the prompt to"
      },
      {
        "chunk_id": "doc_19_1_chunk_2",
        "original_index": 2,
        "content": "l + Enter on your keyboard) to send the prompt to the model. 13. Experiment with influencing the model response by changing the inference parameters in the Parameters section. For example, increase the randomness of the songs in the playlist by increasing the Temperature inference parameter. The inference parameters you can change are Temperature, Top P, and Top K. Not all models support each of these inference parameters. For more information, see Inference parameters. 14. Choose Reset to clear"
      },
      {
        "chunk_id": "doc_19_1_chunk_3",
        "original_index": 3,
        "content": "e Inference parameters. 14. Choose Reset to clear the conversation. 15. For System prompt & examples, enter You are an app that creates 3 hour long playlists for a radio station that plays ambient music.. Doing this changes the system prompt to create a playlist of songs for a different genre of music and show length. Create an initial chat app 15"
      }
    ]
  },
  {
    "doc_id": "doc_20_1",
    "original_uuid": "7a429655-9910-4fb9-9291-758d8ebf4fdf",
    "content": "Amazon Bedrock Studio User Guide 16. In the prompt text box, enter Create a list of 10 songs where each song on the list is related to the next song, by musician, bands, or other connections. Be sure to explain the connection from one song to the next. Don’t repeat any artists.. 17. Choose the run button to send the prompt to the model. Note the response from the model now includes songs from the ambient genre of music. 18. Choose Save to save your app. 19. (Optional) Share your project with other by following the instructions at Share an Amazon Bedrock Studio project. 20. Next step: Add a guardrail to your app by following the instructions at Add a guardrail to your chat app. Add a guardrail to your chat app Guardrails for Amazon Bedrock lets you implement safeguards for your Amazon Bedrock Studio app based on your use cases and responsible AI policies. You can create multiple guardrails tailored to different use cases and apply them across multiple foundation models, providing a consistent user experience and standardizing safety controls across generative AI apps. You can configure denied topics to disallow undesirable topics and content filters to block harmful content in the prompts you send to a model and to the responses you get from a model. You can use guardrails with text-only foundation models. For more information, see Safeguard your app with a guardrail. Add a guardrail This procedure shows you how to use a guardrail to safeguard the app you created in Create an initial chat app. The guardrail prevents inappropriate language in song titles and filters out unwanted music genres. If you just completed Create an initial chat app, Bedrock Studio should be open on the app page and you don't need to do steps 1-3. To add a guardrail to an Amazon Bedrock Studio app 1. Open your Amazon Bedrock Studio workspace. 2. Make sure that you are in Build mode, by choosing Build at the top right of the page. Add a guardrail 16",
    "chunks": [
      {
        "chunk_id": "doc_20_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide 16. In the prompt text box, enter Create a list of 10 songs where each song on the list is related to the next song, by musician, bands, or other connections. Be sure to explain the connection from one song to the next. Don’t repeat any artists.. 17. Choose the run button to send the prompt to the model. Note the response from the model now includes songs from the ambient genre of music. 18. Choose Save to save your app. 19. (Optional) Share your project with other"
      },
      {
        "chunk_id": "doc_20_1_chunk_1",
        "original_index": 1,
        "content": "app. 19. (Optional) Share your project with other by following the instructions at Share an Amazon Bedrock Studio project. 20. Next step: Add a guardrail to your app by following the instructions at Add a guardrail to your chat app. Add a guardrail to your chat app Guardrails for Amazon Bedrock lets you implement safeguards for your Amazon Bedrock Studio app based on your use cases and responsible AI policies. You can create multiple guardrails tailored to different use cases and apply them across"
      },
      {
        "chunk_id": "doc_20_1_chunk_2",
        "original_index": 2,
        "content": "ored to different use cases and apply them across multiple foundation models, providing a consistent user experience and standardizing safety controls across generative AI apps. You can configure denied topics to disallow undesirable topics and content filters to block harmful content in the prompts you send to a model and to the responses you get from a model. You can use guardrails with text-only foundation models. For more information, see Safeguard your app with a guardrail. Add a guardrail This"
      },
      {
        "chunk_id": "doc_20_1_chunk_3",
        "original_index": 3,
        "content": "d your app with a guardrail. Add a guardrail This procedure shows you how to use a guardrail to safeguard the app you created in Create an initial chat app. The guardrail prevents inappropriate language in song titles and filters out unwanted music genres. If you just completed Create an initial chat app, Bedrock Studio should be open on the app page and you don't need to do steps 1-3. To add a guardrail to an Amazon Bedrock Studio app 1. Open your Amazon Bedrock Studio workspace. 2. Make sure that"
      },
      {
        "chunk_id": "doc_20_1_chunk_4",
        "original_index": 4,
        "content": "mazon Bedrock Studio workspace. 2. Make sure that you are in Build mode, by choosing Build at the top right of the page. Add a guardrail 16"
      }
    ]
  },
  {
    "doc_id": "doc_21_1",
    "original_uuid": "fb95dbef-21b8-4bab-aa2e-7a37bd771b88",
    "content": "Amazon Bedrock Studio User Guide 3. Open the app that you created in Create an initial chat app. 4. In the Configs pane, choose Guardrails and then Create new guardrail. 5. For Guardrail name, enter prevent_unwanted_songs. 6. For Guardrail description, enter Prevents inappropriate songs.. 7. In Content filters make sure Enable content filters is selected. For more information, see Content filters. 8. In Filter for prompts make sure the filter for each category is set to High. 9. Make sure Apply the same filters for responses is selected. 10. In Blocked messsaging do the following. a. For Blocked messaging for prompts, enter Sorry, your prompt contained inappropriate text.. b. Clear Apply the same message for blocked responses. c. For Blocked messaging for responses, enter Sorry, but I can't respond with information that contains inappropriate text.. 11. Choose Create to create the guardrail. 12. In the Configs pane, make sure that the selected guardail in Guardrails is the guardrail you just created. 13. Test the guardrail by entering Create a list of 10 songs where each song has a swear word in the title. In the prompt edit box. 14. Choose the run button to send the prompt to the model. The model should respond with the message Sorry, but I can't respond with information that contains inappropriate text. 15. Use a denied topic filter to prevent requests for music from a specific music genere. For information about denied topics, see Denied topics. To add the filter, do the following. a. In the Guardrails section of the Configs pane, select the guardrail and choose Preview. b. Choose Edit to edit the guardrail. c. In Denied topics, choose Add topic. Add a guardrail 17",
    "chunks": [
      {
        "chunk_id": "doc_21_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide 3. Open the app that you created in Create an initial chat app. 4. In the Configs pane, choose Guardrails and then Create new guardrail. 5. For Guardrail name, enter prevent_unwanted_songs. 6. For Guardrail description, enter Prevents inappropriate songs.. 7. In Content filters make sure Enable content filters is selected. For more information, see Content filters. 8. In Filter for prompts make sure the filter for each category is set to High. 9. Make sure Apply the"
      },
      {
        "chunk_id": "doc_21_1_chunk_1",
        "original_index": 1,
        "content": "h category is set to High. 9. Make sure Apply the same filters for responses is selected. 10. In Blocked messsaging do the following. a. For Blocked messaging for prompts, enter Sorry, your prompt contained inappropriate text.. b. Clear Apply the same message for blocked responses. c. For Blocked messaging for responses, enter Sorry, but I can't respond with information that contains inappropriate text.. 11. Choose Create to create the guardrail. 12. In the Configs pane, make sure that the selected"
      },
      {
        "chunk_id": "doc_21_1_chunk_2",
        "original_index": 2,
        "content": "In the Configs pane, make sure that the selected guardail in Guardrails is the guardrail you just created. 13. Test the guardrail by entering Create a list of 10 songs where each song has a swear word in the title. In the prompt edit box. 14. Choose the run button to send the prompt to the model. The model should respond with the message Sorry, but I can't respond with information that contains inappropriate text. 15. Use a denied topic filter to prevent requests for music from a specific music"
      },
      {
        "chunk_id": "doc_21_1_chunk_3",
        "original_index": 3,
        "content": "prevent requests for music from a specific music genere. For information about denied topics, see Denied topics. To add the filter, do the following. a. In the Guardrails section of the Configs pane, select the guardrail and choose Preview. b. Choose Edit to edit the guardrail. c. In Denied topics, choose Add topic. Add a guardrail 17"
      }
    ]
  },
  {
    "doc_id": "doc_22_1",
    "original_uuid": "4d6ab8c5-b6f5-4a47-8104-71ae1952b9c6",
    "content": "Amazon Bedrock Studio User Guide d. For Name, enter heavy metal. e. For Definition for topic, enter Avoid mentioning songs that are from the heavy metal genre of music.. f. For in Sample phrases - optional, enter Create a playlist of heavy metal songs. g. Choose Add phrase. h. Choose Save. i. Om the Edit guardrail page, choose Update to update the guardrail. j. Test the guardrail by entering Create a list of heavy metal songs. in the prompt edit box. k. Choose the run button to send the prompt to the model. The model should respond with the message Sorry, but I can't respond with information that contains inappropriate text. 16. Next step: Add a data source to your app by following the instructions at Add a document data source to your chat app. Add a document data source to your chat app You can use your own data into your application by adding a data source to your app. Doing this allows your app to access to information that is only available to you. When your app passes a query to a data source, Amazon Bedrock Studio generates a response that include the query results from the data source. A data source can be a document or an Amazon Bedrock Knowledge Base. For more information, see Add a data source to your app. In this topic, you update the app you created in Create an initial chat app to use a CSV file as a document data source. The CSV file includes information about bands that don't have public meta data such song length, or music genre. The user can use the app to create a playlist for a radio show based on criteria such as song length or music genre. To add your own data to an Amazon Bedrock Studio app 1. Create a CSV file name songs.csv and fill with the following ficticious CSV data. song,artist,genre,length-seconds \"Celestial Odyssey\",\"Starry Renegades\",\"Cosmic Rock\",240 \"Neon Rapture\",\"Synthwave Siren\",\"Synthwave Pop\",300 Add a document data source 18",
    "chunks": [
      {
        "chunk_id": "doc_22_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide d. For Name, enter heavy metal. e. For Definition for topic, enter Avoid mentioning songs that are from the heavy metal genre of music.. f. For in Sample phrases - optional, enter Create a playlist of heavy metal songs. g. Choose Add phrase. h. Choose Save. i. Om the Edit guardrail page, choose Update to update the guardrail. j. Test the guardrail by entering Create a list of heavy metal songs. in the prompt edit box. k. Choose the run button to send the prompt to"
      },
      {
        "chunk_id": "doc_22_1_chunk_1",
        "original_index": 1,
        "content": "x. k. Choose the run button to send the prompt to the model. The model should respond with the message Sorry, but I can't respond with information that contains inappropriate text. 16. Next step: Add a data source to your app by following the instructions at Add a document data source to your chat app. Add a document data source to your chat app You can use your own data into your application by adding a data source to your app. Doing this allows your app to access to information that is only available"
      },
      {
        "chunk_id": "doc_22_1_chunk_2",
        "original_index": 2,
        "content": "p to access to information that is only available to you. When your app passes a query to a data source, Amazon Bedrock Studio generates a response that include the query results from the data source. A data source can be a document or an Amazon Bedrock Knowledge Base. For more information, see Add a data source to your app. In this topic, you update the app you created in Create an initial chat app to use a CSV file as a document data source. The CSV file includes information about bands that don't"
      },
      {
        "chunk_id": "doc_22_1_chunk_3",
        "original_index": 3,
        "content": "file includes information about bands that don't have public meta data such song length, or music genre. The user can use the app to create a playlist for a radio show based on criteria such as song length or music genre. To add your own data to an Amazon Bedrock Studio app 1. Create a CSV file name songs.csv and fill with the following ficticious CSV data. song,artist,genre,length-seconds \"Celestial Odyssey\",\"Starry Renegades\",\"Cosmic Rock\",240 \"Neon Rapture\",\"Synthwave Siren\",\"Synthwave Pop\",300"
      },
      {
        "chunk_id": "doc_22_1_chunk_4",
        "original_index": 4,
        "content": "on Rapture\",\"Synthwave Siren\",\"Synthwave Pop\",300 Add a document data source 18"
      }
    ]
  },
  {
    "doc_id": "doc_23_1",
    "original_uuid": "6737f2b5-26f3-42bb-baae-fc39a46339bb",
    "content": "Amazon Bedrock Studio User Guide \"Wordsmith Warriors\",\"Lyrical Legions\",\"Lyrical Flow\",180 \"Nebula Shredders\",\"Galactic Axemen\",\"Cosmic Rock\",270 \"Electro Euphoria\",\"Neon Nomads\",\"Synthwave Pop\",210 \"Rhythm Renegades\",\"Percussive Pioneers\",\"Lyrical Flow\",240 \"Stardust Rift\",\"Cosmic Crusaders\",\"Cosmic Rock\",180 \"Synthwave Serenade\",\"Electro Enchanters\",\"Synthwave Pop\",300 \"Lyrical Legends\",\"Rhyme Royale\",\"Lyrical Flow\",240 \"Supernova Shredders\",\"Amplified Ascension\",\"Cosmic Rock\",300 \"Celestial Chords\",\"Ethereal Echoes\",\"Cosmic Rock\",240 \"Neon Nirvana\",\"Synthwave Sirens\",\"Synthwave Pop\",270 \"Verbal Virtuoso\",\"Lyrical Maestros\",\"Lyrical Flow\",210 \"Cosmic Collision\",\"Stellar Insurgents\",\"Cosmic Rock\",180 \"Pop Paradox\",\"Melodic Mavericks\",\"Synthwave Pop\",240 \"Flow Fusion\",\"Verbal Virtuosos\",\"Lyrical Flow\",300 \"Shredding Shadows\",\"Crimson Crusaders\",\"Cosmic Rock\",270 \"Synth Serenade\",\"Electro Enchanters\",\"Synthwave Pop\",180 \"Wordsmith Warlords\",\"Lyrical Legionnaires\",\"Lyrical Flow\",240 \"Sonic Supernova\",\"Amplified Ascension\",\"Cosmic Rock\",210 \"Celestial Symphony\",\"Ethereal Ensemble\",\"Cosmic Rock\",300 \"Electro Euphoria\",\"Neon Nomads\",\"Synthwave Pop\",180 \"Lyrical Legends\",\"Rhyme Royale\",\"Lyrical Flow\",270 \"Crimson Crescendo\",\"Scarlet Serenaders\",\"Cosmic Rock\",240 \"Euphoric Tides\",\"Melodic Mystics\",\"Synthwave Pop\",210 \"Rhythm Renegades\",\"Percussive Pioneers\",\"Lyrical Flow\",180 \"Cosmic Collision\",\"Stellar Insurgents\",\"Cosmic Rock\",300 \"Stardust Serenade\",\"Celestial Crooners\",\"Synthwave Pop\",240 \"Wordsmith Warriors\",\"Lyrical Legions\",\"Lyrical Flow\",270 \"Sonic Supernova III\",\"Amplified Ascension\",\"Cosmic Rock\",180 2. Open your Amazon Bedrock Studio workspace. 3. Make sure that you are in Build mode, by choosing Build at the top right of the page. 4. Open the app that you created in Create an initial chat app. 5. Disable any guardrails that you have enabled by choosing None selected in Guardrails. 6. For Data, choose Use single file only. 7. For Add data sources, choose Click to upload and upload the CSV file you created in step 1. Alternatively, add your source documents by dragging and dropping the CSV from your computer. Add a document data source 19",
    "chunks": [
      {
        "chunk_id": "doc_23_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide \"Wordsmith Warriors\",\"Lyrical Legions\",\"Lyrical Flow\",180 \"Nebula Shredders\",\"Galactic Axemen\",\"Cosmic Rock\",270 \"Electro Euphoria\",\"Neon Nomads\",\"Synthwave Pop\",210 \"Rhythm Renegades\",\"Percussive Pioneers\",\"Lyrical Flow\",240 \"Stardust Rift\",\"Cosmic Crusaders\",\"Cosmic Rock\",180 \"Synthwave Serenade\",\"Electro Enchanters\",\"Synthwave Pop\",300 \"Lyrical Legends\",\"Rhyme Royale\",\"Lyrical Flow\",240 \"Supernova Shredders\",\"Amplified Ascension\",\"Cosmic Rock\",300 \"Celestial Chords\",\"Ethereal"
      },
      {
        "chunk_id": "doc_23_1_chunk_1",
        "original_index": 1,
        "content": "n\",\"Cosmic Rock\",300 \"Celestial Chords\",\"Ethereal Echoes\",\"Cosmic Rock\",240 \"Neon Nirvana\",\"Synthwave Sirens\",\"Synthwave Pop\",270 \"Verbal Virtuoso\",\"Lyrical Maestros\",\"Lyrical Flow\",210 \"Cosmic Collision\",\"Stellar Insurgents\",\"Cosmic Rock\",180 \"Pop Paradox\",\"Melodic Mavericks\",\"Synthwave Pop\",240 \"Flow Fusion\",\"Verbal Virtuosos\",\"Lyrical Flow\",300 \"Shredding Shadows\",\"Crimson Crusaders\",\"Cosmic Rock\",270 \"Synth Serenade\",\"Electro Enchanters\",\"Synthwave Pop\",180 \"Wordsmith Warlords\",\"Lyrical Legionnaires\",\"Lyrical"
      },
      {
        "chunk_id": "doc_23_1_chunk_2",
        "original_index": 2,
        "content": "rdsmith Warlords\",\"Lyrical Legionnaires\",\"Lyrical Flow\",240 \"Sonic Supernova\",\"Amplified Ascension\",\"Cosmic Rock\",210 \"Celestial Symphony\",\"Ethereal Ensemble\",\"Cosmic Rock\",300 \"Electro Euphoria\",\"Neon Nomads\",\"Synthwave Pop\",180 \"Lyrical Legends\",\"Rhyme Royale\",\"Lyrical Flow\",270 \"Crimson Crescendo\",\"Scarlet Serenaders\",\"Cosmic Rock\",240 \"Euphoric Tides\",\"Melodic Mystics\",\"Synthwave Pop\",210 \"Rhythm Renegades\",\"Percussive Pioneers\",\"Lyrical Flow\",180 \"Cosmic Collision\",\"Stellar Insurgents\",\"Cosmic"
      },
      {
        "chunk_id": "doc_23_1_chunk_3",
        "original_index": 3,
        "content": "0 \"Cosmic Collision\",\"Stellar Insurgents\",\"Cosmic Rock\",300 \"Stardust Serenade\",\"Celestial Crooners\",\"Synthwave Pop\",240 \"Wordsmith Warriors\",\"Lyrical Legions\",\"Lyrical Flow\",270 \"Sonic Supernova III\",\"Amplified Ascension\",\"Cosmic Rock\",180 2. Open your Amazon Bedrock Studio workspace. 3. Make sure that you are in Build mode, by choosing Build at the top right of the page. 4. Open the app that you created in Create an initial chat app. 5. Disable any guardrails that you have enabled by choosing None"
      },
      {
        "chunk_id": "doc_23_1_chunk_4",
        "original_index": 4,
        "content": "guardrails that you have enabled by choosing None selected in Guardrails. 6. For Data, choose Use single file only. 7. For Add data sources, choose Click to upload and upload the CSV file you created in step 1. Alternatively, add your source documents by dragging and dropping the CSV from your computer. Add a document data source 19"
      }
    ]
  },
  {
    "doc_id": "doc_24_1",
    "original_uuid": "3e694e71-2027-41b4-911b-554a9a787747",
    "content": "Amazon Bedrock Studio User Guide 8. Test the data source by entering Create a playlist of songs in the Lyrical Flow genre in the prompt text box. 9. Choose the run button to send the prompt to the model. The model should respond with a playlist of songs from the Lyrical Flow genre that the CSV file contains. Add a function call to your chat app Amazon Bedrock Studio functions let a model include information that it has no previous knowledge of in its response. For example, you can use a function to include dynamic information in a model's response such as a weather forecast, sports results, or traffic conditions.To use a function in Amazon Bedrock Studio you add a function component to your app. For more information, see Call functions from your app. In Amazon Bedrock Studio, a function calls an API hosted outside of Amazon Bedrock Studio. You either create the API yourself, or use an existing API. To create an API, you can use Amazon API Gateway. Add a function call 20",
    "chunks": [
      {
        "chunk_id": "doc_24_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide 8. Test the data source by entering Create a playlist of songs in the Lyrical Flow genre in the prompt text box. 9. Choose the run button to send the prompt to the model. The model should respond with a playlist of songs from the Lyrical Flow genre that the CSV file contains. Add a function call to your chat app Amazon Bedrock Studio functions let a model include information that it has no previous knowledge of in its response. For example, you can use a function"
      },
      {
        "chunk_id": "doc_24_1_chunk_1",
        "original_index": 1,
        "content": "its response. For example, you can use a function to include dynamic information in a model's response such as a weather forecast, sports results, or traffic conditions.To use a function in Amazon Bedrock Studio you add a function component to your app. For more information, see Call functions from your app. In Amazon Bedrock Studio, a function calls an API hosted outside of Amazon Bedrock Studio. You either create the API yourself, or use an existing API. To create an API, you can use Amazon API"
      },
      {
        "chunk_id": "doc_24_1_chunk_2",
        "original_index": 2,
        "content": "ing API. To create an API, you can use Amazon API Gateway. Add a function call 20"
      }
    ]
  },
  {
    "doc_id": "doc_25_1",
    "original_uuid": "cce93c02-e9c2-49e6-9fc7-cd51cc2ae8c5",
    "content": "Amazon Bedrock Studio User Guide In this procedure, you add a function to the app that you created in Create an initial chat app. so that users can get a list of the top 10 songs played on the radio station that day. To add a function to an Amazon Bedrock Studio app 1. Create a HTTPS server that implements a TopSongs function. Make sure the function adheres to the following schema. openapi: 3.0.0 info: title: Top Songs API description: API to retrieve the top 10 songs played today version: 1.0.0 paths: /top-songs: get: summary: Get the top 10 songs played today description: > This endpoint returns an array of the top 10 songs played today, ordered by popularity. The first element in the array (index 0) represents the most popular song, and the last element (index 9) represents the 10th most popular song. responses: '200': description: Successful response content: application/json: schema: $ref: '#/components/schemas/TopSongs' components: schemas: TopSongs: type: array items: $ref: '#/components/schemas/Song' description: > An array containing the top 10 songs played today. The first element (index 0) is the most popular song, and the last element (index 9) is the 10th most popular song. example: - title: 'Song Title 1' Add a function call 21",
    "chunks": [
      {
        "chunk_id": "doc_25_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide In this procedure, you add a function to the app that you created in Create an initial chat app. so that users can get a list of the top 10 songs played on the radio station that day. To add a function to an Amazon Bedrock Studio app 1. Create a HTTPS server that implements a TopSongs function. Make sure the function adheres to the following schema. openapi: 3.0.0 info: title: Top Songs API description: API to retrieve the top 10 songs played today version: 1.0.0"
      },
      {
        "chunk_id": "doc_25_1_chunk_1",
        "original_index": 1,
        "content": "ieve the top 10 songs played today version: 1.0.0 paths: /top-songs: get: summary: Get the top 10 songs played today description: > This endpoint returns an array of the top 10 songs played today, ordered by popularity. The first element in the array (index 0) represents the most popular song, and the last element (index 9) represents the 10th most popular song. responses: '200': description: Successful response content: application/json: schema: $ref: '#/components/schemas/TopSongs' components:"
      },
      {
        "chunk_id": "doc_25_1_chunk_2",
        "original_index": 2,
        "content": "$ref: '#/components/schemas/TopSongs' components: schemas: TopSongs: type: array items: $ref: '#/components/schemas/Song' description: > An array containing the top 10 songs played today. The first element (index 0) is the most popular song, and the last element (index 9) is the 10th most popular song. example: - title: 'Song Title 1' Add a function call 21"
      }
    ]
  },
  {
    "doc_id": "doc_26_1",
    "original_uuid": "97589dd6-932e-4587-98d8-3daf0c1976fa",
    "content": "Amazon Bedrock Studio User Guide artist: 'Artist Name 1' album: 'Album Name 1' - title: 'Song Title 2' artist: 'Artist Name 2' album: 'Album Name 2' # ... up to 10 songs Song: type: object properties: title: type: string description: The title of the song artist: type: string description: The name of the artist or band album: type: string description: The name of the album the song is from required: - title - artist - album 2. Open your Amazon Bedrock Studio workspace. 3. Make sure that you are in Build mode, by choosing Build at the top right of the page. 4. Open the app that you created in Create an initial chat app. 5. In Models, choose a model that supports functions, such as Anthropic Claude 2.1. 6. In Functions, choose Create new function. Alternatively, if you want to use a function that you have previously created, choose the function in the Functions dropdown list. You don't need to do the next step. 7. In the Create function pane, do the following. a. For in Function name, enter Top_ten_songs_today. b. For Function description (optional), enter Today's top 10 songs.. Add a function call 22",
    "chunks": [
      {
        "chunk_id": "doc_26_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide artist: 'Artist Name 1' album: 'Album Name 1' - title: 'Song Title 2' artist: 'Artist Name 2' album: 'Album Name 2' # ... up to 10 songs Song: type: object properties: title: type: string description: The title of the song artist: type: string description: The name of the artist or band album: type: string description: The name of the album the song is from required: - title - artist - album 2. Open your Amazon Bedrock Studio workspace. 3. Make sure that you are in"
      },
      {
        "chunk_id": "doc_26_1_chunk_1",
        "original_index": 1,
        "content": "ck Studio workspace. 3. Make sure that you are in Build mode, by choosing Build at the top right of the page. 4. Open the app that you created in Create an initial chat app. 5. In Models, choose a model that supports functions, such as Anthropic Claude 2.1. 6. In Functions, choose Create new function. Alternatively, if you want to use a function that you have previously created, choose the function in the Functions dropdown list. You don't need to do the next step. 7. In the Create function pane,"
      },
      {
        "chunk_id": "doc_26_1_chunk_2",
        "original_index": 2,
        "content": "do the next step. 7. In the Create function pane, do the following. a. For in Function name, enter Top_ten_songs_today. b. For Function description (optional), enter Today's top 10 songs.. Add a function call 22"
      }
    ]
  },
  {
    "doc_id": "doc_27_1",
    "original_uuid": "cf761e51-510d-4e01-ab33-88b14f4f1ecf",
    "content": "Amazon Bedrock Studio User Guide c. For Function schema, enter the OpenAPI schema from step one. d. Choose Validate schema to validate the schema. e. In Authentication method choose the authentication method for your HTTP server. For more information, see the section called “Authentication methods”. f. In API servers, enter the URL for your server in Server URL. This value is autopopulated if the server URL is in the schema. g. Choose Create to create your function. 8. For System prompt and examples, update the system prompt so that it describes the function. Use the following text: You are an app that creates 2 hour long playlists for a radio station that plays rock and pop music. The function Top_ten_songs_today gets the most popular song played on the radio station.. 9. Test the function by doing the following. a. Enter What are today's top 10 songs? in the prompt edit box. b. Choose the run button to send the prompt to the model. The model should respond with the list of today's top 10 songs. Add a function call 23",
    "chunks": [
      {
        "chunk_id": "doc_27_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide c. For Function schema, enter the OpenAPI schema from step one. d. Choose Validate schema to validate the schema. e. In Authentication method choose the authentication method for your HTTP server. For more information, see the section called “Authentication methods”. f. In API servers, enter the URL for your server in Server URL. This value is autopopulated if the server URL is in the schema. g. Choose Create to create your function. 8. For System prompt and examples,"
      },
      {
        "chunk_id": "doc_27_1_chunk_1",
        "original_index": 1,
        "content": "your function. 8. For System prompt and examples, update the system prompt so that it describes the function. Use the following text: You are an app that creates 2 hour long playlists for a radio station that plays rock and pop music. The function Top_ten_songs_today gets the most popular song played on the radio station.. 9. Test the function by doing the following. a. Enter What are today's top 10 songs? in the prompt edit box. b. Choose the run button to send the prompt to the model. The model"
      },
      {
        "chunk_id": "doc_27_1_chunk_2",
        "original_index": 2,
        "content": "button to send the prompt to the model. The model should respond with the list of today's top 10 songs. Add a function call 23"
      }
    ]
  },
  {
    "doc_id": "doc_28_1",
    "original_uuid": "0be1d0bb-2433-4c66-8c48-7c73595a0f21",
    "content": "Amazon Bedrock Studio User Guide Export an Amazon Bedrock Studio chat app With Amazon Bedrock Studio, you can export the files for a chat app so that you can use the app outside of the Bedrock Studio web app. When you export a chat app, Amazon Bedrock Studio exports a zip file with the AWS CloudFormation templates and other files required by your app. To use your app, you need to deploy the AWS CloudFormation templates to an AWS account. The actual contents of the zip file vary on the Amazon Bedrock Studio components that your chat app uses. After uncompressing the zip file, you deploy the contents of the zip file into your AWS account (or another AWS account, if you prefer). A chat app can include one or more different types of Amazon Bedrock Studio components, such as a Guardrail or a Knowledge Base. When you deploy your app's components, Amazon Bedrock Studio only deploys the AWS infrastructure files. The data source files for a Knowledge Base and the secrets for a function aren't exported, and you have to configure them during the deployment. After deploying the app to an AWS account, you can run the app as a Node.js app. Topics • Export your Amazon Bedrock Studio chat app • Deploy an Amazon Bedrock Studio chat app • Run a deployed chat app Export your Amazon Bedrock Studio chat app Use the following procedure to export a chat app to a zip file. You can then use the chat app outside of the Amazon Bedrock Studio web app. Depending on the composition of your app, the zip package contains some or all of the following files: • README.md — Instructions for deploying and running your app. • function-stack-*.json — AWS CloudFormation template that creates your function component, if any. This includes: • An AWS Lambda function for calling the API defined in your OpenAPI schema. Export your Amazon Bedrock Studio chat app 24",
    "chunks": [
      {
        "chunk_id": "doc_28_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide Export an Amazon Bedrock Studio chat app With Amazon Bedrock Studio, you can export the files for a chat app so that you can use the app outside of the Bedrock Studio web app. When you export a chat app, Amazon Bedrock Studio exports a zip file with the AWS CloudFormation templates and other files required by your app. To use your app, you need to deploy the AWS CloudFormation templates to an AWS account. The actual contents of the zip file vary on the Amazon Bedrock"
      },
      {
        "chunk_id": "doc_28_1_chunk_1",
        "original_index": 1,
        "content": "ntents of the zip file vary on the Amazon Bedrock Studio components that your chat app uses. After uncompressing the zip file, you deploy the contents of the zip file into your AWS account (or another AWS account, if you prefer). A chat app can include one or more different types of Amazon Bedrock Studio components, such as a Guardrail or a Knowledge Base. When you deploy your app's components, Amazon Bedrock Studio only deploys the AWS infrastructure files. The data source files for a Knowledge"
      },
      {
        "chunk_id": "doc_28_1_chunk_2",
        "original_index": 2,
        "content": "ture files. The data source files for a Knowledge Base and the secrets for a function aren't exported, and you have to configure them during the deployment. After deploying the app to an AWS account, you can run the app as a Node.js app. Topics • Export your Amazon Bedrock Studio chat app • Deploy an Amazon Bedrock Studio chat app • Run a deployed chat app Export your Amazon Bedrock Studio chat app Use the following procedure to export a chat app to a zip file. You can then use the chat app outside"
      },
      {
        "chunk_id": "doc_28_1_chunk_3",
        "original_index": 3,
        "content": "a zip file. You can then use the chat app outside of the Amazon Bedrock Studio web app. Depending on the composition of your app, the zip package contains some or all of the following files: • README.md — Instructions for deploying and running your app. • function-stack-*.json — AWS CloudFormation template that creates your function component, if any. This includes: • An AWS Lambda function for calling the API defined in your OpenAPI schema. Export your Amazon Bedrock Studio chat app 24"
      }
    ]
  },
  {
    "doc_id": "doc_29_1",
    "original_uuid": "318396ef-9f86-4d07-a187-aa0f5587fb1d",
    "content": "Amazon Bedrock Studio User Guide • An AWS Secret Manager secret for storing credentials to use when calling your API. This secret contains an empty value, and you are expected to update this secret manually. • knowledge-base-stack-*.json — AWS CloudFormation template that creates your Knowledge Base data source, if any. This includes an Knowledge Base for Amazon Bedrock configured with your selected data store and vector store. This knowledge base will not have the data you have uploaded in to Bedrock Studio, and you are expected to provide data files manually. • guardrails-stack-*.json — AWS CloudFormation template that creates a guardrail for Amazon Bedrock, if any. • agent-stack.json — AWS CloudFormation template that creates an Amazon Bedrock Agent, if any. • invocation-policy-*.json — AWS CloudFormation template that creates an IAM policy with the runtime permissions that you need to talk to your deployed chat app. • br-studio-app-stack-*.json — Parent stack that orchestrates the deployment of all AWS CloudFormation stacks included in the zip package. • deploy-app.sh — Helper script that you use to deploy your app infrastructure into your AWS account. • code-snippet.mjs — Example code snippet that you embed in your code to invoke the app. • br-studio-app.mjs — Standalone Node.js module to quickly test your deployed app. • aoss-encryption-policy-*.json — AOSS encryption policy necessary to use a Knowledge Base. This encryption policy is automatically created when your chat app contains an Amazon Bedrock Studio Knowledge Base. • provisioning-inline-policy.json — An example of an AWS IAM policy that contains the permissions required to provision the chat app resources. The permissions declared in this policy file are needed when deploying the AWS CloudFormation stacks. You can modify this policy to better suit your needs. You may create a new IAM principal with these policies, or attach these policies to an existing IAM principal in your AWS account. • kms-key-policy.json — An example of an AWS KMS key policy that contains required permissions for encrypting your chat app resources. You can modify this key policy to better suit your needs. You may create a new KMS key with this policy, or attach this policy to an existing KMS key in your AWS account. • api-schema*.json — OpenAPI schema files associated with your function components, if any. Export your Amazon Bedrock Studio chat app 25",
    "chunks": [
      {
        "chunk_id": "doc_29_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide • An AWS Secret Manager secret for storing credentials to use when calling your API. This secret contains an empty value, and you are expected to update this secret manually. • knowledge-base-stack-*.json — AWS CloudFormation template that creates your Knowledge Base data source, if any. This includes an Knowledge Base for Amazon Bedrock configured with your selected data store and vector store. This knowledge base will not have the data you have uploaded in to Bedrock"
      },
      {
        "chunk_id": "doc_29_1_chunk_1",
        "original_index": 1,
        "content": "not have the data you have uploaded in to Bedrock Studio, and you are expected to provide data files manually. • guardrails-stack-*.json — AWS CloudFormation template that creates a guardrail for Amazon Bedrock, if any. • agent-stack.json — AWS CloudFormation template that creates an Amazon Bedrock Agent, if any. • invocation-policy-*.json — AWS CloudFormation template that creates an IAM policy with the runtime permissions that you need to talk to your deployed chat app. • br-studio-app-stack-*.json"
      },
      {
        "chunk_id": "doc_29_1_chunk_2",
        "original_index": 2,
        "content": "r deployed chat app. • br-studio-app-stack-*.json — Parent stack that orchestrates the deployment of all AWS CloudFormation stacks included in the zip package. • deploy-app.sh — Helper script that you use to deploy your app infrastructure into your AWS account. • code-snippet.mjs — Example code snippet that you embed in your code to invoke the app. • br-studio-app.mjs — Standalone Node.js module to quickly test your deployed app. • aoss-encryption-policy-*.json — AOSS encryption policy necessary"
      },
      {
        "chunk_id": "doc_29_1_chunk_3",
        "original_index": 3,
        "content": "-policy-*.json — AOSS encryption policy necessary to use a Knowledge Base. This encryption policy is automatically created when your chat app contains an Amazon Bedrock Studio Knowledge Base. • provisioning-inline-policy.json — An example of an AWS IAM policy that contains the permissions required to provision the chat app resources. The permissions declared in this policy file are needed when deploying the AWS CloudFormation stacks. You can modify this policy to better suit your needs. You may create"
      },
      {
        "chunk_id": "doc_29_1_chunk_4",
        "original_index": 4,
        "content": "policy to better suit your needs. You may create a new IAM principal with these policies, or attach these policies to an existing IAM principal in your AWS account. • kms-key-policy.json — An example of an AWS KMS key policy that contains required permissions for encrypting your chat app resources. You can modify this key policy to better suit your needs. You may create a new KMS key with this policy, or attach this policy to an existing KMS key in your AWS account. • api-schema*.json — OpenAPI"
      },
      {
        "chunk_id": "doc_29_1_chunk_5",
        "original_index": 5,
        "content": "in your AWS account. • api-schema*.json — OpenAPI schema files associated with your function components, if any. Export your Amazon Bedrock Studio chat app 25"
      }
    ]
  },
  {
    "doc_id": "doc_30_1",
    "original_uuid": "9099e7d2-0c1b-4d50-8794-fb48862f96e5",
    "content": "Amazon Bedrock Studio User Guide Important • If you encounter access errors when exporting your chat app, contact your administrator. Workspaces created before the release of the Amazon Bedrock Studio app export feature may be using an outdated permission boundary. • Amazon Bedrock Studio needs to update permissions for projects that you created before the release of the app export feature. Amazon Bedrock Studio updates a project when you first try to export an app from the project. The update takes a couple of minutes. After the update completes, you can then export the app. • Currently, you can't export apps that you created before June 15th, 2024. Support is coming soon. To export a chat app 1. Make sure that you are in Build mode, by choosing Build at the top right of the page. 2. In the Project dropdown list, choose the project that contains the app that you want to export. 3. In the Recent apps section, choose the See all apps hyperlink. 4. On the apps pane, select the name of the chat app that you want to export. 5. If you haven't already, choose Save to save the app. You can't export an app unless you first save or test the app. 6. On the app page, choose Export to export the app. Amazon Bedrock Studio will create and download a zip file with the name br-studio-app-export-*.zip. 7. Next step: Deploy the chat app. Deploy an Amazon Bedrock Studio chat app The following instructions show you the steps you take to deploy a chat app that you export from Amazon Bedrock Studio. Topics • Prerequisites for deploying a chat app • Deploy the chat app Deploy an Amazon Bedrock Studio chat app 26",
    "chunks": [
      {
        "chunk_id": "doc_30_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide Important • If you encounter access errors when exporting your chat app, contact your administrator. Workspaces created before the release of the Amazon Bedrock Studio app export feature may be using an outdated permission boundary. • Amazon Bedrock Studio needs to update permissions for projects that you created before the release of the app export feature. Amazon Bedrock Studio updates a project when you first try to export an app from the project. The update takes"
      },
      {
        "chunk_id": "doc_30_1_chunk_1",
        "original_index": 1,
        "content": "export an app from the project. The update takes a couple of minutes. After the update completes, you can then export the app. • Currently, you can't export apps that you created before June 15th, 2024. Support is coming soon. To export a chat app 1. Make sure that you are in Build mode, by choosing Build at the top right of the page. 2. In the Project dropdown list, choose the project that contains the app that you want to export. 3. In the Recent apps section, choose the See all apps hyperlink."
      },
      {
        "chunk_id": "doc_30_1_chunk_2",
        "original_index": 2,
        "content": "apps section, choose the See all apps hyperlink. 4. On the apps pane, select the name of the chat app that you want to export. 5. If you haven't already, choose Save to save the app. You can't export an app unless you first save or test the app. 6. On the app page, choose Export to export the app. Amazon Bedrock Studio will create and download a zip file with the name br-studio-app-export-*.zip. 7. Next step: Deploy the chat app. Deploy an Amazon Bedrock Studio chat app The following instructions"
      },
      {
        "chunk_id": "doc_30_1_chunk_3",
        "original_index": 3,
        "content": "edrock Studio chat app The following instructions show you the steps you take to deploy a chat app that you export from Amazon Bedrock Studio. Topics • Prerequisites for deploying a chat app • Deploy the chat app Deploy an Amazon Bedrock Studio chat app 26"
      }
    ]
  },
  {
    "doc_id": "doc_31_1",
    "original_uuid": "39d21044-ecb3-41af-966f-d9d0476dc32f",
    "content": "Amazon Bedrock Studio User Guide Prerequisites for deploying a chat app Before you can deploy a chat app that you have exported, you must first do the following: To prepare for app deployment 1. Install the latest version of the AWS CLI on your local machine by following the instructions at Install or update to the latest version of the AWS CLI. 2. Set up AWS credentials for the AWS CLI on your local machine by following the instructions at Configure the AWS CLI. The credentials that the deployment script uses will follow the order of precedence. 3. Create an IAM role that includes the policies from provisioning-inline-policy.json. For information about creating a role, see IAM role creation. 4. (Optional) Using the AWS account that you set up in step 2, create an AWS KMS key for app export by following the instructions at Creating keys. The key must be tagged with key EnableBedrock and a value of true. The key must also have a key policy that allows it to be used for encryption of your chat app resources. You may use the suggested policy declared in the kms-key-policy.json file of your zip package. 5. Create an Amazon S3 bucket to hold the app files that you export by following the instructions at Creating a bucket. 6. If your app includes a Knowledge Base, copy the data source file to a folder named data/ in the Amazon S3 bucket that you created in step 5. If your app uses a document as a datasource, you supply a list of datasource files to the deployment script. For more information, see Deploy the chat app. 7. If your app calls a function that requires authorization keys, provision the keys in AWS Secrets Manager by running the following command: aws secretsmanager update-secret \\ --secret-id br-studio/function-name-export-environment-id \\ --secret-string 'secret-value' Replace the following values: • function-name — to the unique name of your function call component. • export-environment-id — to the unique id of your function call component. • secret-value — to the intended value to be used for authentication: Prerequisites for deploying a chat app 27",
    "chunks": [
      {
        "chunk_id": "doc_31_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide Prerequisites for deploying a chat app Before you can deploy a chat app that you have exported, you must first do the following: To prepare for app deployment 1. Install the latest version of the AWS CLI on your local machine by following the instructions at Install or update to the latest version of the AWS CLI. 2. Set up AWS credentials for the AWS CLI on your local machine by following the instructions at Configure the AWS CLI. The credentials that the deployment"
      },
      {
        "chunk_id": "doc_31_1_chunk_1",
        "original_index": 1,
        "content": "the AWS CLI. The credentials that the deployment script uses will follow the order of precedence. 3. Create an IAM role that includes the policies from provisioning-inline-policy.json. For information about creating a role, see IAM role creation. 4. (Optional) Using the AWS account that you set up in step 2, create an AWS KMS key for app export by following the instructions at Creating keys. The key must be tagged with key EnableBedrock and a value of true. The key must also have a key policy that"
      },
      {
        "chunk_id": "doc_31_1_chunk_2",
        "original_index": 2,
        "content": "of true. The key must also have a key policy that allows it to be used for encryption of your chat app resources. You may use the suggested policy declared in the kms-key-policy.json file of your zip package. 5. Create an Amazon S3 bucket to hold the app files that you export by following the instructions at Creating a bucket. 6. If your app includes a Knowledge Base, copy the data source file to a folder named data/ in the Amazon S3 bucket that you created in step 5. If your app uses a document"
      },
      {
        "chunk_id": "doc_31_1_chunk_3",
        "original_index": 3,
        "content": "ou created in step 5. If your app uses a document as a datasource, you supply a list of datasource files to the deployment script. For more information, see Deploy the chat app. 7. If your app calls a function that requires authorization keys, provision the keys in AWS Secrets Manager by running the following command: aws secretsmanager update-secret \\ --secret-id br-studio/function-name-export-environment-id \\ --secret-string 'secret-value' Replace the following values: • function-name — to the"
      },
      {
        "chunk_id": "doc_31_1_chunk_4",
        "original_index": 4,
        "content": "ce the following values: • function-name — to the unique name of your function call component. • export-environment-id — to the unique id of your function call component. • secret-value — to the intended value to be used for authentication: Prerequisites for deploying a chat app 27"
      }
    ]
  },
  {
    "doc_id": "doc_32_1",
    "original_uuid": "e6d0f6d2-ad85-42aa-a628-5b312a86eac6",
    "content": "Amazon Bedrock Studio User Guide If the function requires API Keys, the syntax of secret-value should be: {\"key- name-1\":\"key-value-1\",\"key-name-2\":\"key-value-2\"} If the function requires Basic authentication, the syntax of secret-value should be: {\"___AuthType___\":\"BASIC\", \"username\":\"username-value\", \"password\":\"password-value\"} If the function requires Bearer token authentication, the syntax of secret-value should be: {\"___AuthType___\":\"BEARER\", \"tokenValue\":\"token-value\"} 8. Next step: Deploy the chat app. Deploy the chat app Before deploying your chat app, be sure to do the prerequisite steps. Deploying a chat app deploys the AWS infrastructure files that you need to run the app in AWS. To deploy a chat app 1. At the command prompt, do the following: a. Navigate to the zip file that you exported from Amazon Bedrock Studio. b. Assume the role of the AWS that you created in step 3 of Prerequisites for deploying a chat app. c. Run the following command: ./deployApp.sh \\ [--awsRegion=value] \\ [--s3BucketName=value] \\ [--assetsS3Path=value] \\ [--kmsKeyArn=value] \\ [--dataFiles=value] Replace the following values: • awsRegion — with the AWS Region that you want to deploy the app to. Amazon Bedrock must be available in the Region you use. For more information, see Supported AWS Regions. Deploy the chat app 28",
    "chunks": [
      {
        "chunk_id": "doc_32_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide If the function requires API Keys, the syntax of secret-value should be: {\"key- name-1\":\"key-value-1\",\"key-name-2\":\"key-value-2\"} If the function requires Basic authentication, the syntax of secret-value should be: {\"___AuthType___\":\"BASIC\", \"username\":\"username-value\", \"password\":\"password-value\"} If the function requires Bearer token authentication, the syntax of secret-value should be: {\"___AuthType___\":\"BEARER\", \"tokenValue\":\"token-value\"} 8. Next step: Deploy"
      },
      {
        "chunk_id": "doc_32_1_chunk_1",
        "original_index": 1,
        "content": "\"tokenValue\":\"token-value\"} 8. Next step: Deploy the chat app. Deploy the chat app Before deploying your chat app, be sure to do the prerequisite steps. Deploying a chat app deploys the AWS infrastructure files that you need to run the app in AWS. To deploy a chat app 1. At the command prompt, do the following: a. Navigate to the zip file that you exported from Amazon Bedrock Studio. b. Assume the role of the AWS that you created in step 3 of Prerequisites for deploying a chat app. c. Run the following"
      },
      {
        "chunk_id": "doc_32_1_chunk_2",
        "original_index": 2,
        "content": "es for deploying a chat app. c. Run the following command: ./deployApp.sh \\ [--awsRegion=value] \\ [--s3BucketName=value] \\ [--assetsS3Path=value] \\ [--kmsKeyArn=value] \\ [--dataFiles=value] Replace the following values: • awsRegion — with the AWS Region that you want to deploy the app to. Amazon Bedrock must be available in the Region you use. For more information, see Supported AWS Regions. Deploy the chat app 28"
      }
    ]
  },
  {
    "doc_id": "doc_33_1",
    "original_uuid": "0c6c96da-a0d6-4d60-a85d-8f581aa87ceb",
    "content": "Amazon Bedrock Studio User Guide • s3BucketName — With the Amazon S3 bucket that you created in step 5 of Prerequisites for deploying a chat app. The deployment store the CFN templates and application data files in this bucket. • assetsS3Path — (Optional) With the path in s3BucketName that you want deployment to store application files to. • kmsKeyArn — (Optional) with the ARN of the KMS Key that you created in step 3 of Prerequisites for deploying a chat app. • dataFiles — With a comma-separated list of data source file paths. Required for apps that use a document data source. For example, if you have a chat app with a single document as a data source, and you want to deploy the app with encryption, you can use the following command. sudo sh ./deployApp.sh \\ --awsRegion=us-east-1 \\ --s3BucketName=my-s3-bucket-name-for-exported-chat-apps \\ --assetsS3Path=my-prod-folder/my-chat-app \\ --kmsKeyArn=arn:aws:kms:us- east-1:111122223333:key/11111111-2222-3333-4444-555555555555 \\ --dataFiles=my-data-source.pdf 2. (Optional) Monitor the deployment in the AWS CloudFormation console. 3. Note the output from the script. You need it to run the chat app. It should be similar to: node brStudioApp.mjs --question=\"Tell me about my documents\". 4. Next step: Run a deployed chat app. Run a deployed chat app The following instructions show you the steps you take to run a deployed Amazon Bedrock Studio chat app. Topics • Prerequisites for running a chat app • Run the chat app Run a deployed chat app 29",
    "chunks": [
      {
        "chunk_id": "doc_33_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide • s3BucketName — With the Amazon S3 bucket that you created in step 5 of Prerequisites for deploying a chat app. The deployment store the CFN templates and application data files in this bucket. • assetsS3Path — (Optional) With the path in s3BucketName that you want deployment to store application files to. • kmsKeyArn — (Optional) with the ARN of the KMS Key that you created in step 3 of Prerequisites for deploying a chat app. • dataFiles — With a comma-separated"
      },
      {
        "chunk_id": "doc_33_1_chunk_1",
        "original_index": 1,
        "content": "a chat app. • dataFiles — With a comma-separated list of data source file paths. Required for apps that use a document data source. For example, if you have a chat app with a single document as a data source, and you want to deploy the app with encryption, you can use the following command. sudo sh ./deployApp.sh \\ --awsRegion=us-east-1 \\ --s3BucketName=my-s3-bucket-name-for-exported-chat-apps \\ --assetsS3Path=my-prod-folder/my-chat-app \\ --kmsKeyArn=arn:aws:kms:us- east-1:111122223333:key/11111111-2222-3333-4444-555555555555"
      },
      {
        "chunk_id": "doc_33_1_chunk_2",
        "original_index": 2,
        "content": "22223333:key/11111111-2222-3333-4444-555555555555 \\ --dataFiles=my-data-source.pdf 2. (Optional) Monitor the deployment in the AWS CloudFormation console. 3. Note the output from the script. You need it to run the chat app. It should be similar to: node brStudioApp.mjs --question=\"Tell me about my documents\". 4. Next step: Run a deployed chat app. Run a deployed chat app The following instructions show you the steps you take to run a deployed Amazon Bedrock Studio chat app. Topics • Prerequisites"
      },
      {
        "chunk_id": "doc_33_1_chunk_3",
        "original_index": 3,
        "content": "n Bedrock Studio chat app. Topics • Prerequisites for running a chat app • Run the chat app Run a deployed chat app 29"
      }
    ]
  },
  {
    "doc_id": "doc_34_1",
    "original_uuid": "856e18b5-5427-4221-8033-f06feacde06a",
    "content": "Amazon Bedrock Studio User Guide Prerequisites for running a chat app Before you can run a chat app that you have exported, you must first do the following: To prepare for running a chat app 1. Download and install Node.js. For more information, see Download Node.js. 2. At the command prompt, install third-party Node.js libraries by running the following commands: npm install minimist npm install aws-sdk npm install @aws-sdk/credential-providers npm install @aws-sdk/client-bedrock-agent-runtime npm install @aws-sdk/client-bedrock-runtime 3. Create or update an IAM role in which you want to run the app. For the policy, use the policy created by deploy-app.sh when you exported the app. The policy name is BRStudioExportedAppInvocationRolePolicy-exportProjectId. The policy is declared in invocation-policy-*.json. For more information, see Creating roles. Run the chat app To run your chat app, you need an IAM role with with permissions to invoke Amazon Bedrock resources. When you deploy the app, the AWS CloudFormation stack deployed through deploy- app.sh script provisions a suitable policy in your AWS account (declared in invocation-policy- *.json). To run the chat app 1. Switch to the IAM role that you created in step 3 of Prerequisites for running a chat app. 2. Run the app by entering the command you noted in step 3 of Deploy the chat app. Prerequisites for running a chat app 30",
    "chunks": [
      {
        "chunk_id": "doc_34_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide Prerequisites for running a chat app Before you can run a chat app that you have exported, you must first do the following: To prepare for running a chat app 1. Download and install Node.js. For more information, see Download Node.js. 2. At the command prompt, install third-party Node.js libraries by running the following commands: npm install minimist npm install aws-sdk npm install @aws-sdk/credential-providers npm install @aws-sdk/client-bedrock-agent-runtime npm"
      },
      {
        "chunk_id": "doc_34_1_chunk_1",
        "original_index": 1,
        "content": "install @aws-sdk/client-bedrock-agent-runtime npm install @aws-sdk/client-bedrock-runtime 3. Create or update an IAM role in which you want to run the app. For the policy, use the policy created by deploy-app.sh when you exported the app. The policy name is BRStudioExportedAppInvocationRolePolicy-exportProjectId. The policy is declared in invocation-policy-*.json. For more information, see Creating roles. Run the chat app To run your chat app, you need an IAM role with with permissions to invoke"
      },
      {
        "chunk_id": "doc_34_1_chunk_2",
        "original_index": 2,
        "content": "need an IAM role with with permissions to invoke Amazon Bedrock resources. When you deploy the app, the AWS CloudFormation stack deployed through deploy- app.sh script provisions a suitable policy in your AWS account (declared in invocation-policy- *.json). To run the chat app 1. Switch to the IAM role that you created in step 3 of Prerequisites for running a chat app. 2. Run the app by entering the command you noted in step 3 of Deploy the chat app. Prerequisites for running a chat app 30"
      }
    ]
  },
  {
    "doc_id": "doc_35_1",
    "original_uuid": "ce439b01-7bed-43f0-a71d-de8cfe8700bb",
    "content": "Amazon Bedrock Studio User Guide Build a Prompt Flows app with Amazon Bedrock Studio A Prompt Flows app let you link prompts, supported foundational models (FMS), and other units of work, such as a Knowledge Base, together and create generative AI workflows for end-to-end solutions. For example, you could create Prompt Flows apps to do the following. • Create and send an email invite – Create a flow connecting a prompt node, knowledge base node, and function node. Provide the following prompt to generate an email body: Send invite to John Smith’s extended team for in-person documentation read for an hour at 2PM EST next Tuesday.. After processing the prompt, the flow queries a knowledge base to look up the email addresses of John Smith's extended team, and then sends the input to a function to send the invite to all the team members in the list. • Troubleshoot using the error message and the ID of the resource that is causing the error – The flow looks up the possible causes of the error from a documentation knowledge base, pulls system logs and other relevant information about the resource, and updates the faulty configurations and values for the resource. Important If your workspace was created before Amazon Bedrock Studio added support for Prompt Flows apps, you won't be able to create a Prompt Flows app until your administrator updates your workspace. Ask your administrator to follow the instructions at Update a workspace for Prompt management and Prompt flows. In this section you create a Prompt Flows app that generates a playlist of music from a Knowledge Base of songs by fictional local bands. To create a Prompt Flows app, you use the flow builder which is a tool in Amazon Bedrock Studio to build and edit prompt flow apps through a visual interface. You use the visual interface to drag and drop nodes onto the interface and configure inputs and outputs for these nodes to define your prompt flow. 31",
    "chunks": [
      {
        "chunk_id": "doc_35_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide Build a Prompt Flows app with Amazon Bedrock Studio A Prompt Flows app let you link prompts, supported foundational models (FMS), and other units of work, such as a Knowledge Base, together and create generative AI workflows for end-to-end solutions. For example, you could create Prompt Flows apps to do the following. • Create and send an email invite – Create a flow connecting a prompt node, knowledge base node, and function node. Provide the following prompt to"
      },
      {
        "chunk_id": "doc_35_1_chunk_1",
        "original_index": 1,
        "content": "nd function node. Provide the following prompt to generate an email body: Send invite to John Smith’s extended team for in-person documentation read for an hour at 2PM EST next Tuesday.. After processing the prompt, the flow queries a knowledge base to look up the email addresses of John Smith's extended team, and then sends the input to a function to send the invite to all the team members in the list. • Troubleshoot using the error message and the ID of the resource that is causing the error –"
      },
      {
        "chunk_id": "doc_35_1_chunk_2",
        "original_index": 2,
        "content": "he ID of the resource that is causing the error – The flow looks up the possible causes of the error from a documentation knowledge base, pulls system logs and other relevant information about the resource, and updates the faulty configurations and values for the resource. Important If your workspace was created before Amazon Bedrock Studio added support for Prompt Flows apps, you won't be able to create a Prompt Flows app until your administrator updates your workspace. Ask your administrator to"
      },
      {
        "chunk_id": "doc_35_1_chunk_3",
        "original_index": 3,
        "content": "updates your workspace. Ask your administrator to follow the instructions at Update a workspace for Prompt management and Prompt flows. In this section you create a Prompt Flows app that generates a playlist of music from a Knowledge Base of songs by fictional local bands. To create a Prompt Flows app, you use the flow builder which is a tool in Amazon Bedrock Studio to build and edit prompt flow apps through a visual interface. You use the visual interface to drag and drop nodes onto the interface"
      },
      {
        "chunk_id": "doc_35_1_chunk_4",
        "original_index": 4,
        "content": "terface to drag and drop nodes onto the interface and configure inputs and outputs for these nodes to define your prompt flow. 31"
      }
    ]
  },
  {
    "doc_id": "doc_36_1",
    "original_uuid": "16a3642e-3e53-4f5c-ae13-6701a53ecb44",
    "content": "Amazon Bedrock Studio User Guide In your prompt flow you can apply logical conditions to direct the output from a node to different destinations. You can then run the flow within Amazon Bedrock Studio and view the output. The following list introduces you to the basic elements of a flow. • Prompt Flow – A prompt flow is a construct consisting of a name, description, permissions, a collection of nodes, and connections between nodes. When you run a prompt flow, the input to the flow is sent through each node of the prompt flow until the flow emits the final output from an output node. • Node – A node is a step inside a prompt flow. For each node, you configure its name, description, input, output, and any additional configurations. The configuration of a node differs based on its type. For information about the types of nodes that Amazon Bedrock Studio supports, see Prompt Flow nodes available in Amazon Bedrock Studio. • Connection – There are two types of connections used in prompt flow apps: • A data connection is drawn between the output of one node (the source node) and the input of another node (the target node) and sends data from an upstream node to a downstream node. In the flow builder, data connections are solid lines. • A conditional connection is drawn between a condition in a condition node and a downstream node and sends data from the node that precedes the condition node to a downstream node if the condition is fulfilled. In the flow builder, conditional connections are dotted lines. • Expressions – An expression defines how to extract an input from the whole input entering a node. To learn how to write expressions, see Define inputs with expressions. Topics • Build a prompt flow • Prompt Flow nodes available in Amazon Bedrock Studio • Define inputs with expressions 32",
    "chunks": [
      {
        "chunk_id": "doc_36_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide In your prompt flow you can apply logical conditions to direct the output from a node to different destinations. You can then run the flow within Amazon Bedrock Studio and view the output. The following list introduces you to the basic elements of a flow. • Prompt Flow – A prompt flow is a construct consisting of a name, description, permissions, a collection of nodes, and connections between nodes. When you run a prompt flow, the input to the flow is sent through"
      },
      {
        "chunk_id": "doc_36_1_chunk_1",
        "original_index": 1,
        "content": "rompt flow, the input to the flow is sent through each node of the prompt flow until the flow emits the final output from an output node. • Node – A node is a step inside a prompt flow. For each node, you configure its name, description, input, output, and any additional configurations. The configuration of a node differs based on its type. For information about the types of nodes that Amazon Bedrock Studio supports, see Prompt Flow nodes available in Amazon Bedrock Studio. • Connection – There are"
      },
      {
        "chunk_id": "doc_36_1_chunk_2",
        "original_index": 2,
        "content": "n Amazon Bedrock Studio. • Connection – There are two types of connections used in prompt flow apps: • A data connection is drawn between the output of one node (the source node) and the input of another node (the target node) and sends data from an upstream node to a downstream node. In the flow builder, data connections are solid lines. • A conditional connection is drawn between a condition in a condition node and a downstream node and sends data from the node that precedes the condition node"
      },
      {
        "chunk_id": "doc_36_1_chunk_3",
        "original_index": 3,
        "content": "ta from the node that precedes the condition node to a downstream node if the condition is fulfilled. In the flow builder, conditional connections are dotted lines. • Expressions – An expression defines how to extract an input from the whole input entering a node. To learn how to write expressions, see Define inputs with expressions. Topics • Build a prompt flow • Prompt Flow nodes available in Amazon Bedrock Studio • Define inputs with expressions 32"
      }
    ]
  },
  {
    "doc_id": "doc_37_1",
    "original_uuid": "dd901477-57d3-4aa3-9424-7c34e8b83f6a",
    "content": "Amazon Bedrock Studio User Guide Build a prompt flow In this section you first build a Prompt Flow that generates a playlist of music from a Knowledge Base of songs by fictional local bands. Next, you use Prompt Management to add a prompt that lets you customize the playlist for different genres of music. Finally, you add a condition that directs the flow to create a playlist of songs by local bands, if the requested genre is Cosmic Rock. For other genres, the flow generates a playlist with songs by well known bands. Topics • Create an initial Prompt Flow app • Add a Knowledge Base to your Prompt Flows app • Add a prompt to your Prompt Flows app • Add a condition to your prompt flows app Create an initial Prompt Flow app In this procedure you create an initial Prompt Flow app which has an Flow input node and a Flow output node. Important If your workspace was created before Amazon Bedrock Studio added support for Prompt Flows apps, you won't be able to create a Prompt Flows app until your administrator updates your workspace. Ask your administrator to follow the instructions at Update a workspace for Prompt management and Prompt flows. A prompt flow contains only one flow input node which is where the flow begins. The Flow input node takes your input and passes it to the next node in a data type of your choice (String, Number, Boolean, Object and Array). In these procedures, the input to the flow is a String. To learn more about using different data types in a flow, see Define inputs with expressions. A flow output node extracts the input data from the previous node, based on the defined expression, and outputs the data. A flow can have multiple flow output nodes if there are multiple branches in the flow. Build a prompt flow 33",
    "chunks": [
      {
        "chunk_id": "doc_37_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide Build a prompt flow In this section you first build a Prompt Flow that generates a playlist of music from a Knowledge Base of songs by fictional local bands. Next, you use Prompt Management to add a prompt that lets you customize the playlist for different genres of music. Finally, you add a condition that directs the flow to create a playlist of songs by local bands, if the requested genre is Cosmic Rock. For other genres, the flow generates a playlist with songs"
      },
      {
        "chunk_id": "doc_37_1_chunk_1",
        "original_index": 1,
        "content": "genres, the flow generates a playlist with songs by well known bands. Topics • Create an initial Prompt Flow app • Add a Knowledge Base to your Prompt Flows app • Add a prompt to your Prompt Flows app • Add a condition to your prompt flows app Create an initial Prompt Flow app In this procedure you create an initial Prompt Flow app which has an Flow input node and a Flow output node. Important If your workspace was created before Amazon Bedrock Studio added support for Prompt Flows apps, you won't"
      },
      {
        "chunk_id": "doc_37_1_chunk_2",
        "original_index": 2,
        "content": "io added support for Prompt Flows apps, you won't be able to create a Prompt Flows app until your administrator updates your workspace. Ask your administrator to follow the instructions at Update a workspace for Prompt management and Prompt flows. A prompt flow contains only one flow input node which is where the flow begins. The Flow input node takes your input and passes it to the next node in a data type of your choice (String, Number, Boolean, Object and Array). In these procedures, the input"
      },
      {
        "chunk_id": "doc_37_1_chunk_3",
        "original_index": 3,
        "content": "Object and Array). In these procedures, the input to the flow is a String. To learn more about using different data types in a flow, see Define inputs with expressions. A flow output node extracts the input data from the previous node, based on the defined expression, and outputs the data. A flow can have multiple flow output nodes if there are multiple branches in the flow. Build a prompt flow 33"
      }
    ]
  },
  {
    "doc_id": "doc_38_1",
    "original_uuid": "56d7acba-4a68-4a8c-b725-792dabfcb912",
    "content": "Amazon Bedrock Studio User Guide After completing the procedure, the prompt flow app is empty, other than the Flow input and Flow output nodes. In the next step you add Knowledge Base as a data source and run the prompt flow app for the first time. To create an initial prompt flows app 1. Open your Amazon Bedrock Studio workspace. 2. Make sure that you are in Build mode, by choosing Build at the top right of the page. 3. Open the project that you want to create your Prompt Flow flow app in, or create a new project by doing the following. a. If you are not on the All projects page, choose View all projects in the Projects dropdown list box, at the top of the page. b. On the All projects page, choose Create new project. c. In the Create new project section, enter a name for your project in Project name. d. Enter a description for your project in Project description. e. Choose Create. It might take a few minutes to create the project. f. In the card for your app, choose Go to project to open your project. 4. On the project page, in the Apps section, choose Create app and then Prompt Flow app. 5. In the flow builder, choose the prompt flow name (Untitled Prompt Flow-nnnn) and enter Local bands as the name for the prompt flow. 6. In the Prompt Flow builder pane, select the Nodes tab. The center pane displays a Flow input node and a Flow output node. These are the input and output nodes for your flow. The circles on the nodes are connection points. In the next procedure, you use the connection points to connect a Knowledge Base node to the Flow input node and the Flow output node. 7. Next step: Add a Knowledge Base to your Prompt Flows app. Create an initial Prompt Flow app 34",
    "chunks": [
      {
        "chunk_id": "doc_38_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide After completing the procedure, the prompt flow app is empty, other than the Flow input and Flow output nodes. In the next step you add Knowledge Base as a data source and run the prompt flow app for the first time. To create an initial prompt flows app 1. Open your Amazon Bedrock Studio workspace. 2. Make sure that you are in Build mode, by choosing Build at the top right of the page. 3. Open the project that you want to create your Prompt Flow flow app in, or create"
      },
      {
        "chunk_id": "doc_38_1_chunk_1",
        "original_index": 1,
        "content": "to create your Prompt Flow flow app in, or create a new project by doing the following. a. If you are not on the All projects page, choose View all projects in the Projects dropdown list box, at the top of the page. b. On the All projects page, choose Create new project. c. In the Create new project section, enter a name for your project in Project name. d. Enter a description for your project in Project description. e. Choose Create. It might take a few minutes to create the project. f. In the card"
      },
      {
        "chunk_id": "doc_38_1_chunk_2",
        "original_index": 2,
        "content": "few minutes to create the project. f. In the card for your app, choose Go to project to open your project. 4. On the project page, in the Apps section, choose Create app and then Prompt Flow app. 5. In the flow builder, choose the prompt flow name (Untitled Prompt Flow-nnnn) and enter Local bands as the name for the prompt flow. 6. In the Prompt Flow builder pane, select the Nodes tab. The center pane displays a Flow input node and a Flow output node. These are the input and output nodes for your"
      },
      {
        "chunk_id": "doc_38_1_chunk_3",
        "original_index": 3,
        "content": "de. These are the input and output nodes for your flow. The circles on the nodes are connection points. In the next procedure, you use the connection points to connect a Knowledge Base node to the Flow input node and the Flow output node. 7. Next step: Add a Knowledge Base to your Prompt Flows app. Create an initial Prompt Flow app 34"
      }
    ]
  },
  {
    "doc_id": "doc_39_1",
    "original_uuid": "a9460bf3-cc64-405a-869e-c75187077425",
    "content": "Amazon Bedrock Studio User Guide Add a Knowledge Base to your Prompt Flows app In this procedure, you add a Knowlege Base node as a data source to the flow that you created in Create an initial Prompt Flow app. The Knowledge Base you add is Comma Seperated Values (CSV) file containing a list of ficticious songs and artists. The list includes the duration (seconds) and genre of each song. For more information about Knowledge Bases, see Add a data source to your app. During the procedure, you make connections from the Flow input node to the Knowledge Base node and from the Knowledge Base node to the Flow output node. At some point, you might need to delete a node or remove a node connection. To delete a node, select the node that you want to delete and press the Delete button. To remove a connection, choose the connection that you want to delete and then press the delete button. When you run the flow with the input Create a playlist, the app creates a playlist using songs only from the Knowledge Base. To create the flow with a Knowledge Base 1. Create a CSV file name songs.csv and fill with the following ficticious CSV data. This is the data source for your Knowledge Base. Save the CSV file to your local computer. song,artist,genre,length-seconds \"Celestial Odyssey\",\"Starry Renegades\",\"Cosmic Rock\",240 \"Neon Rapture\",\"Synthwave Siren\",\"Synthwave Pop\",300 \"Wordsmith Warriors\",\"Lyrical Legions\",\"Lyrical Flow\",180 \"Nebula Shredders\",\"Galactic Axemen\",\"Cosmic Rock\",270 \"Electro Euphoria\",\"Neon Nomads\",\"Synthwave Pop\",210 \"Rhythm Renegades\",\"Percussive Pioneers\",\"Lyrical Flow\",240 \"Stardust Rift\",\"Cosmic Crusaders\",\"Cosmic Rock\",180 \"Synthwave Serenade\",\"Electro Enchanters\",\"Synthwave Pop\",300 \"Lyrical Legends\",\"Rhyme Royale\",\"Lyrical Flow\",240 \"Supernova Shredders\",\"Amplified Ascension\",\"Cosmic Rock\",300 \"Celestial Chords\",\"Ethereal Echoes\",\"Cosmic Rock\",240 \"Neon Nirvana\",\"Synthwave Sirens\",\"Synthwave Pop\",270 \"Verbal Virtuoso\",\"Lyrical Maestros\",\"Lyrical Flow\",210 \"Cosmic Collision\",\"Stellar Insurgents\",\"Cosmic Rock\",180 \"Pop Paradox\",\"Melodic Mavericks\",\"Synthwave Pop\",240 \"Flow Fusion\",\"Verbal Virtuosos\",\"Lyrical Flow\",300 \"Shredding Shadows\",\"Crimson Crusaders\",\"Cosmic Rock\",270 \"Synth Serenade\",\"Electro Enchanters\",\"Synthwave Pop\",180 \"Wordsmith Warlords\",\"Lyrical Legionnaires\",\"Lyrical Flow\",240 Add a Knowledge Base 35",
    "chunks": [
      {
        "chunk_id": "doc_39_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide Add a Knowledge Base to your Prompt Flows app In this procedure, you add a Knowlege Base node as a data source to the flow that you created in Create an initial Prompt Flow app. The Knowledge Base you add is Comma Seperated Values (CSV) file containing a list of ficticious songs and artists. The list includes the duration (seconds) and genre of each song. For more information about Knowledge Bases, see Add a data source to your app. During the procedure, you make"
      },
      {
        "chunk_id": "doc_39_1_chunk_1",
        "original_index": 1,
        "content": "ource to your app. During the procedure, you make connections from the Flow input node to the Knowledge Base node and from the Knowledge Base node to the Flow output node. At some point, you might need to delete a node or remove a node connection. To delete a node, select the node that you want to delete and press the Delete button. To remove a connection, choose the connection that you want to delete and then press the delete button. When you run the flow with the input Create a playlist, the app"
      },
      {
        "chunk_id": "doc_39_1_chunk_2",
        "original_index": 2,
        "content": "he flow with the input Create a playlist, the app creates a playlist using songs only from the Knowledge Base. To create the flow with a Knowledge Base 1. Create a CSV file name songs.csv and fill with the following ficticious CSV data. This is the data source for your Knowledge Base. Save the CSV file to your local computer. song,artist,genre,length-seconds \"Celestial Odyssey\",\"Starry Renegades\",\"Cosmic Rock\",240 \"Neon Rapture\",\"Synthwave Siren\",\"Synthwave Pop\",300 \"Wordsmith Warriors\",\"Lyrical"
      },
      {
        "chunk_id": "doc_39_1_chunk_3",
        "original_index": 3,
        "content": "\"Synthwave Pop\",300 \"Wordsmith Warriors\",\"Lyrical Legions\",\"Lyrical Flow\",180 \"Nebula Shredders\",\"Galactic Axemen\",\"Cosmic Rock\",270 \"Electro Euphoria\",\"Neon Nomads\",\"Synthwave Pop\",210 \"Rhythm Renegades\",\"Percussive Pioneers\",\"Lyrical Flow\",240 \"Stardust Rift\",\"Cosmic Crusaders\",\"Cosmic Rock\",180 \"Synthwave Serenade\",\"Electro Enchanters\",\"Synthwave Pop\",300 \"Lyrical Legends\",\"Rhyme Royale\",\"Lyrical Flow\",240 \"Supernova Shredders\",\"Amplified Ascension\",\"Cosmic Rock\",300 \"Celestial Chords\",\"Ethereal"
      },
      {
        "chunk_id": "doc_39_1_chunk_4",
        "original_index": 4,
        "content": "n\",\"Cosmic Rock\",300 \"Celestial Chords\",\"Ethereal Echoes\",\"Cosmic Rock\",240 \"Neon Nirvana\",\"Synthwave Sirens\",\"Synthwave Pop\",270 \"Verbal Virtuoso\",\"Lyrical Maestros\",\"Lyrical Flow\",210 \"Cosmic Collision\",\"Stellar Insurgents\",\"Cosmic Rock\",180 \"Pop Paradox\",\"Melodic Mavericks\",\"Synthwave Pop\",240 \"Flow Fusion\",\"Verbal Virtuosos\",\"Lyrical Flow\",300 \"Shredding Shadows\",\"Crimson Crusaders\",\"Cosmic Rock\",270 \"Synth Serenade\",\"Electro Enchanters\",\"Synthwave Pop\",180 \"Wordsmith Warlords\",\"Lyrical Legionnaires\",\"Lyrical"
      },
      {
        "chunk_id": "doc_39_1_chunk_5",
        "original_index": 5,
        "content": "rdsmith Warlords\",\"Lyrical Legionnaires\",\"Lyrical Flow\",240 Add a Knowledge Base 35"
      }
    ]
  },
  {
    "doc_id": "doc_40_1",
    "original_uuid": "9d3c55aa-b90b-42af-860f-c1ad36d92a5f",
    "content": "Amazon Bedrock Studio User Guide \"Sonic Supernova\",\"Amplified Ascension\",\"Cosmic Rock\",210 \"Celestial Symphony\",\"Ethereal Ensemble\",\"Cosmic Rock\",300 \"Electro Euphoria\",\"Neon Nomads\",\"Synthwave Pop\",180 \"Lyrical Legends\",\"Rhyme Royale\",\"Lyrical Flow\",270 \"Crimson Crescendo\",\"Scarlet Serenaders\",\"Cosmic Rock\",240 \"Euphoric Tides\",\"Melodic Mystics\",\"Synthwave Pop\",210 \"Rhythm Renegades\",\"Percussive Pioneers\",\"Lyrical Flow\",180 \"Cosmic Collision\",\"Stellar Insurgents\",\"Cosmic Rock\",300 \"Stardust Serenade\",\"Celestial Crooners\",\"Synthwave Pop\",240 \"Wordsmith Warriors\",\"Lyrical Legions\",\"Lyrical Flow\",270 \"Sonic Supernova III\",\"Amplified Ascension\",\"Cosmic Rock\",180 2. Open the Prompt Flows app that you created in Create an initial Prompt Flow app. 3. Add and configure a Knowledge Base node by doing the following: a. In the Prompt Flow builder pane, select the Nodes tab. b. From the Data section, drag a Knowledge Base node onto the flow builder canvas. c. The circles on the nodes are connection points. Using your mouse, click on the circle for the Flow input node and draw a line to the circle on Input section of the Knowledge Base node that you just added. d. Connect the Output of the Knowledge Base node in your flow with the Input of the Flow output node. e. Select the Knowledge Base node that you just added. f. In the Prompt Flow builder pane, choose the Configure tab and do the following: i. In Node name enter Local_bands_knowledge_base. ii. In Knowledge Base Details, choose Create new Knowledge Base to open the Create Knowledge Base pane. iii. For Knowledge Base name, enter Local_bands. Add a Knowledge Base 36",
    "chunks": [
      {
        "chunk_id": "doc_40_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide \"Sonic Supernova\",\"Amplified Ascension\",\"Cosmic Rock\",210 \"Celestial Symphony\",\"Ethereal Ensemble\",\"Cosmic Rock\",300 \"Electro Euphoria\",\"Neon Nomads\",\"Synthwave Pop\",180 \"Lyrical Legends\",\"Rhyme Royale\",\"Lyrical Flow\",270 \"Crimson Crescendo\",\"Scarlet Serenaders\",\"Cosmic Rock\",240 \"Euphoric Tides\",\"Melodic Mystics\",\"Synthwave Pop\",210 \"Rhythm Renegades\",\"Percussive Pioneers\",\"Lyrical Flow\",180 \"Cosmic Collision\",\"Stellar Insurgents\",\"Cosmic Rock\",300 \"Stardust Serenade\",\"Celestial"
      },
      {
        "chunk_id": "doc_40_1_chunk_1",
        "original_index": 1,
        "content": ",\"Cosmic Rock\",300 \"Stardust Serenade\",\"Celestial Crooners\",\"Synthwave Pop\",240 \"Wordsmith Warriors\",\"Lyrical Legions\",\"Lyrical Flow\",270 \"Sonic Supernova III\",\"Amplified Ascension\",\"Cosmic Rock\",180 2. Open the Prompt Flows app that you created in Create an initial Prompt Flow app. 3. Add and configure a Knowledge Base node by doing the following: a. In the Prompt Flow builder pane, select the Nodes tab. b. From the Data section, drag a Knowledge Base node onto the flow builder canvas. c. The circles"
      },
      {
        "chunk_id": "doc_40_1_chunk_2",
        "original_index": 2,
        "content": "node onto the flow builder canvas. c. The circles on the nodes are connection points. Using your mouse, click on the circle for the Flow input node and draw a line to the circle on Input section of the Knowledge Base node that you just added. d. Connect the Output of the Knowledge Base node in your flow with the Input of the Flow output node. e. Select the Knowledge Base node that you just added. f. In the Prompt Flow builder pane, choose the Configure tab and do the following: i. In Node name enter"
      },
      {
        "chunk_id": "doc_40_1_chunk_3",
        "original_index": 3,
        "content": "e tab and do the following: i. In Node name enter Local_bands_knowledge_base. ii. In Knowledge Base Details, choose Create new Knowledge Base to open the Create Knowledge Base pane. iii. For Knowledge Base name, enter Local_bands. Add a Knowledge Base 36"
      }
    ]
  },
  {
    "doc_id": "doc_41_1",
    "original_uuid": "1ef72b12-c2b7-4c0e-9397-4ff0af3061ae",
    "content": "Amazon Bedrock Studio User Guide iv. For Knowledge Base description, enter Songs by local bands. Includes song, artist, genre, and song length (in seconds). v. In Add data sources, choose Click to upload and upload the CSV file (songs.csv) that you created in step 1. Alternatively, add your source documents by dragging and dropping the CSV from your computer. vi. (Optional) In Embeddings model choose a different model, if available. vii. (Optional) In Vector store choose a different vector store, if available. viii. Choose Create to create the Knowledge Base. It might take a few minutes to create the Knowledge Base. g. Back in the Prompt Flow builder pane, in Select Knowledge Base, select the Knowledge Base that you just created (Local_bands). h. In Select response generation model, select the model that you want the Knowledge Base to generate responses with. 4. Choose Save to save the app. 5. Test your prompt by doing the following: a. On right side of the app flow page, choose < to open the test pane. b. Enter Create a playlist in the Enter prompt text box. c. Press Ctrl + Enter on the keyboard or choose the run button to test the prompt. d. If necessary, make changes to your flow. If you are satisfied with the flow, choose Save. 6. Next step: Add a prompt to your Prompt Flows app. Add a prompt to your Prompt Flows app In this procedure you add a prompt to the prompt flow by adding a prompt node. The prompt allows you to easily choose which genre of songs should be included in the playlist that the prompt flow generates. For more information, see Use prompts with your app. To add a prompt to the flow 1. In the Prompt Flow builder pane, select Nodes. 2. From the Orchestration section, drag a Prompt node onto the flow builder canvas. 3. Select the node you just added. 4. In the Configurations tab of the Prompt Flow builder pane, do the following: Add a prompt 37",
    "chunks": [
      {
        "chunk_id": "doc_41_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide iv. For Knowledge Base description, enter Songs by local bands. Includes song, artist, genre, and song length (in seconds). v. In Add data sources, choose Click to upload and upload the CSV file (songs.csv) that you created in step 1. Alternatively, add your source documents by dragging and dropping the CSV from your computer. vi. (Optional) In Embeddings model choose a different model, if available. vii. (Optional) In Vector store choose a different vector store,"
      },
      {
        "chunk_id": "doc_41_1_chunk_1",
        "original_index": 1,
        "content": "In Vector store choose a different vector store, if available. viii. Choose Create to create the Knowledge Base. It might take a few minutes to create the Knowledge Base. g. Back in the Prompt Flow builder pane, in Select Knowledge Base, select the Knowledge Base that you just created (Local_bands). h. In Select response generation model, select the model that you want the Knowledge Base to generate responses with. 4. Choose Save to save the app. 5. Test your prompt by doing the following: a. On"
      },
      {
        "chunk_id": "doc_41_1_chunk_2",
        "original_index": 2,
        "content": "5. Test your prompt by doing the following: a. On right side of the app flow page, choose < to open the test pane. b. Enter Create a playlist in the Enter prompt text box. c. Press Ctrl + Enter on the keyboard or choose the run button to test the prompt. d. If necessary, make changes to your flow. If you are satisfied with the flow, choose Save. 6. Next step: Add a prompt to your Prompt Flows app. Add a prompt to your Prompt Flows app In this procedure you add a prompt to the prompt flow by adding"
      },
      {
        "chunk_id": "doc_41_1_chunk_3",
        "original_index": 3,
        "content": "ure you add a prompt to the prompt flow by adding a prompt node. The prompt allows you to easily choose which genre of songs should be included in the playlist that the prompt flow generates. For more information, see Use prompts with your app. To add a prompt to the flow 1. In the Prompt Flow builder pane, select Nodes. 2. From the Orchestration section, drag a Prompt node onto the flow builder canvas. 3. Select the node you just added. 4. In the Configurations tab of the Prompt Flow builder pane,"
      },
      {
        "chunk_id": "doc_41_1_chunk_4",
        "original_index": 4,
        "content": "nfigurations tab of the Prompt Flow builder pane, do the following: Add a prompt 37"
      }
    ]
  },
  {
    "doc_id": "doc_42_1",
    "original_uuid": "8e15a5f9-aae7-4049-8963-ba9ba54f8c9c",
    "content": "Amazon Bedrock Studio User Guide a. In Node name enter Playlist_generator_node. b. In Prompt details choose Create new prompt to open the Create prompt pane. c. For Prompt name enter Playlist_generator_prompt. d. For Model, choose the model that you want the prompt to use. e. For Prompt message enter Create a playlist of songs in the genre {{genre}}. f. (Optional) In Model configs, make changes to the inference parameters. g. Choose Save draft and create version to create the prompt. It might take a couple of minutes to finish creating the prompt. 5. In the flow builder, choose the prompt node that you just added. 6. In the Configure tab, do the following in the Prompt details section: a. In Prompt select the prompt that you just created. b. In Version select the version (1) of the prompt to use. 7. Update the flow paths by doing the following: a. Delete the output from the Knowledge Base node that goes into the Flow output. b. Connect the output from the Knowledge Base node to the input of the Prompts node. c. Connect the output from the prompt node to the input of the Flow output node. 8. Choose Save to save the flow. The flow should look similar to the following. 9. Test your prompt by doing the following: a. On right side of the app flow page, choose < to open the test pane. b. For Enter prompt, enter Cosmic Rock. c. Press Ctrl + Enter on the keyboard or choose the run button to test the prompt. The response should be a playlist of songs in the Cosmic Rock genre. d. Change the prompt to Synthwave Pop and run the prompt again. The songs should now be from the Synthwave Pop genre. Add a prompt 38",
    "chunks": [
      {
        "chunk_id": "doc_42_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide a. In Node name enter Playlist_generator_node. b. In Prompt details choose Create new prompt to open the Create prompt pane. c. For Prompt name enter Playlist_generator_prompt. d. For Model, choose the model that you want the prompt to use. e. For Prompt message enter Create a playlist of songs in the genre {{genre}}. f. (Optional) In Model configs, make changes to the inference parameters. g. Choose Save draft and create version to create the prompt. It might take"
      },
      {
        "chunk_id": "doc_42_1_chunk_1",
        "original_index": 1,
        "content": "reate version to create the prompt. It might take a couple of minutes to finish creating the prompt. 5. In the flow builder, choose the prompt node that you just added. 6. In the Configure tab, do the following in the Prompt details section: a. In Prompt select the prompt that you just created. b. In Version select the version (1) of the prompt to use. 7. Update the flow paths by doing the following: a. Delete the output from the Knowledge Base node that goes into the Flow output. b. Connect the"
      },
      {
        "chunk_id": "doc_42_1_chunk_2",
        "original_index": 2,
        "content": "de that goes into the Flow output. b. Connect the output from the Knowledge Base node to the input of the Prompts node. c. Connect the output from the prompt node to the input of the Flow output node. 8. Choose Save to save the flow. The flow should look similar to the following. 9. Test your prompt by doing the following: a. On right side of the app flow page, choose < to open the test pane. b. For Enter prompt, enter Cosmic Rock. c. Press Ctrl + Enter on the keyboard or choose the run button to"
      },
      {
        "chunk_id": "doc_42_1_chunk_3",
        "original_index": 3,
        "content": "Enter on the keyboard or choose the run button to test the prompt. The response should be a playlist of songs in the Cosmic Rock genre. d. Change the prompt to Synthwave Pop and run the prompt again. The songs should now be from the Synthwave Pop genre. Add a prompt 38"
      }
    ]
  },
  {
    "doc_id": "doc_43_1",
    "original_uuid": "d7cc3a63-229b-4efa-b79f-4fddd1605755",
    "content": "Amazon Bedrock Studio User Guide e. If necessary, make changes to your flow. If you are satisfied with the flow, choose Save. 10. Next step: Add a condition to your prompt flows app. Add a condition to your prompt flows app In this procedure, you add a condition node to the flow so that if you enter the prompt Cosmic Rock, the flow only generates a playlist from the local bands Knowledge Base. If you enter a different genre, the flows uses the playlist generator prompt to create a playlist of well known artists in that genre. To add a condition to the flow 1. In the Prompt Flow builder pane, choose Nodes. 2. From the Logic section, drag a Condition node onto the flow builder canvas. 3. Select the Condition node that you just added. 4. Add the flow that generates a playlist from local bands by doing the following: a. In the Inputs section of the Configurations tab, change the Node Name to Local_cosmic_rock_node. b. In the Inputs section, change the Name to genre. c. In the Conditions section, do the following: i. In Name, enter Local_cosmic_rock. ii. In Condition, enter the condition genre == \"Cosmic Rock\". d. In the flow builder, choose the condition node that you just added. e. Connect Go to node to the Knowledge base node. f. Connect the Output of the Flow input node to the Input of the Condition node. Leave the existing connection to the Knowledge Base node as this ensures the prompt is passed to the Knowledge Base. 5. Add the flow that generates a playlist by well known bands by doing the following: a. In the Prompt Flow builder pane, select Nodes. b. From the Orchestration section, drag a Prompt node onto the flow builder canvas. c. Select the node you just added. d. Choose the Configurations tab of the prompt Flow builder pane and do the following: Add a condition 39",
    "chunks": [
      {
        "chunk_id": "doc_43_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide e. If necessary, make changes to your flow. If you are satisfied with the flow, choose Save. 10. Next step: Add a condition to your prompt flows app. Add a condition to your prompt flows app In this procedure, you add a condition node to the flow so that if you enter the prompt Cosmic Rock, the flow only generates a playlist from the local bands Knowledge Base. If you enter a different genre, the flows uses the playlist generator prompt to create a playlist of well"
      },
      {
        "chunk_id": "doc_43_1_chunk_1",
        "original_index": 1,
        "content": "ist generator prompt to create a playlist of well known artists in that genre. To add a condition to the flow 1. In the Prompt Flow builder pane, choose Nodes. 2. From the Logic section, drag a Condition node onto the flow builder canvas. 3. Select the Condition node that you just added. 4. Add the flow that generates a playlist from local bands by doing the following: a. In the Inputs section of the Configurations tab, change the Node Name to Local_cosmic_rock_node. b. In the Inputs section, change"
      },
      {
        "chunk_id": "doc_43_1_chunk_2",
        "original_index": 2,
        "content": "osmic_rock_node. b. In the Inputs section, change the Name to genre. c. In the Conditions section, do the following: i. In Name, enter Local_cosmic_rock. ii. In Condition, enter the condition genre == \"Cosmic Rock\". d. In the flow builder, choose the condition node that you just added. e. Connect Go to node to the Knowledge base node. f. Connect the Output of the Flow input node to the Input of the Condition node. Leave the existing connection to the Knowledge Base node as this ensures the prompt"
      },
      {
        "chunk_id": "doc_43_1_chunk_3",
        "original_index": 3,
        "content": "he Knowledge Base node as this ensures the prompt is passed to the Knowledge Base. 5. Add the flow that generates a playlist by well known bands by doing the following: a. In the Prompt Flow builder pane, select Nodes. b. From the Orchestration section, drag a Prompt node onto the flow builder canvas. c. Select the node you just added. d. Choose the Configurations tab of the prompt Flow builder pane and do the following: Add a condition 39"
      }
    ]
  },
  {
    "doc_id": "doc_44_1",
    "original_uuid": "11b15502-09e6-4332-ae21-0cbf9d2f65b8",
    "content": "Amazon Bedrock Studio User Guide i. For Node name, enter Well_known_artist_playlist_generator_node. ii. In Prompt details section, choose the Playlist_generator_prompt prompt that you previously created. iii. For Version, select the version (1) of the prompt to use. iv. Connect the Output from the Flow input node to the Input of the prompt that you just created. v. In the Condition node, connect the If all conditions are false go to node to the new prompt. vi. In the Flow builder pane, select Nodes. vii. From the Other section, drag a Flow output node onto the flow builder canvas. viii. Connect the Output of the new Prompt to the input of the new Flow output node. 6. Choose Save to save the flow. The flow should look similar to the following. 7. Test your prompt by doing the following: a. On right side of the app flow page, choose < to open the test pane. b. In Enter prompt, enter Cosmic Rock. c. Press Ctrl + Enter on the keyboard or choose the run button to test the prompt. The response should be a playlist of songs in the Cosmic Rock genre with bands that are only from the Knoweledge Base. Add a condition 40",
    "chunks": [
      {
        "chunk_id": "doc_44_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide i. For Node name, enter Well_known_artist_playlist_generator_node. ii. In Prompt details section, choose the Playlist_generator_prompt prompt that you previously created. iii. For Version, select the version (1) of the prompt to use. iv. Connect the Output from the Flow input node to the Input of the prompt that you just created. v. In the Condition node, connect the If all conditions are false go to node to the new prompt. vi. In the Flow builder pane, select Nodes."
      },
      {
        "chunk_id": "doc_44_1_chunk_1",
        "original_index": 1,
        "content": "ompt. vi. In the Flow builder pane, select Nodes. vii. From the Other section, drag a Flow output node onto the flow builder canvas. viii. Connect the Output of the new Prompt to the input of the new Flow output node. 6. Choose Save to save the flow. The flow should look similar to the following. 7. Test your prompt by doing the following: a. On right side of the app flow page, choose < to open the test pane. b. In Enter prompt, enter Cosmic Rock. c. Press Ctrl + Enter on the keyboard or choose the"
      },
      {
        "chunk_id": "doc_44_1_chunk_2",
        "original_index": 2,
        "content": "Press Ctrl + Enter on the keyboard or choose the run button to test the prompt. The response should be a playlist of songs in the Cosmic Rock genre with bands that are only from the Knoweledge Base. Add a condition 40"
      }
    ]
  },
  {
    "doc_id": "doc_45_1",
    "original_uuid": "7f8e12f4-7d27-4703-ab33-31d88e177d91",
    "content": "Amazon Bedrock Studio User Guide d. Change the prompt to Classic Rock and run the prompt again. The songs should now be well known bands from the classic rock genre. Prompt Flow nodes available in Amazon Bedrock Studio Amazon Bedrock Studio provides the following node types to build your Prompt Flow app. A node comprises of the following: • Name – The name for the node. • Type – the type of the node. For more information, see Prompt Flow nodes available in Amazon Bedrock Studio. • Inputs – Provide a name and data type for each input. Some nodes have pre-defined names or types that you must use. In the expression field, define the part of the whole input to use as the individual input. For more information, see Define inputs with expressions. In the flow builder, an input appears as a circle on the left edge of a node. Connect each input to an output of an upstream node. • Outputs – Provide a name and data type for each output. Some nodes have pre-defined names or types that you must use. In the flow builder, an output appears as a circle on the right edge of a node. Connect each output to at least one input in a downstream node. If an output from a node is sent to more than one node, or if a condition node is included, the path of a flow will split into multiple branches. Each branch can potentially yield another output in the flow response. • Configuration – You define node-specific fields at the top of the node. Note Amazon Bedrock Studio supports a subset of the nodes that are available in Amazon Bedrock. For more information, see Node types in prompt flow. Nodes • Flow input • Flow output • Condition Prompt Flow nodes 41",
    "chunks": [
      {
        "chunk_id": "doc_45_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide d. Change the prompt to Classic Rock and run the prompt again. The songs should now be well known bands from the classic rock genre. Prompt Flow nodes available in Amazon Bedrock Studio Amazon Bedrock Studio provides the following node types to build your Prompt Flow app. A node comprises of the following: • Name – The name for the node. • Type – the type of the node. For more information, see Prompt Flow nodes available in Amazon Bedrock Studio. • Inputs – Provide"
      },
      {
        "chunk_id": "doc_45_1_chunk_1",
        "original_index": 1,
        "content": "able in Amazon Bedrock Studio. • Inputs – Provide a name and data type for each input. Some nodes have pre-defined names or types that you must use. In the expression field, define the part of the whole input to use as the individual input. For more information, see Define inputs with expressions. In the flow builder, an input appears as a circle on the left edge of a node. Connect each input to an output of an upstream node. • Outputs – Provide a name and data type for each output. Some nodes have"
      },
      {
        "chunk_id": "doc_45_1_chunk_2",
        "original_index": 2,
        "content": "me and data type for each output. Some nodes have pre-defined names or types that you must use. In the flow builder, an output appears as a circle on the right edge of a node. Connect each output to at least one input in a downstream node. If an output from a node is sent to more than one node, or if a condition node is included, the path of a flow will split into multiple branches. Each branch can potentially yield another output in the flow response. • Configuration – You define node-specific fields"
      },
      {
        "chunk_id": "doc_45_1_chunk_3",
        "original_index": 3,
        "content": "• Configuration – You define node-specific fields at the top of the node. Note Amazon Bedrock Studio supports a subset of the nodes that are available in Amazon Bedrock. For more information, see Node types in prompt flow. Nodes • Flow input • Flow output • Condition Prompt Flow nodes 41"
      }
    ]
  },
  {
    "doc_id": "doc_46_1",
    "original_uuid": "b27b3ba4-b6ff-409f-863e-379a92503ec2",
    "content": "Amazon Bedrock Studio User Guide • Prompt node • Knowledge Base node Flow input Every prompt flow contains only one flow input node and must begin with it. When you run the flow, the input is fed into this node and the configured output is passed to the next step. Configuration • Node name – N/A • Input field name – N/A • Input field types – N/A • Input expression – N/A • Output field name – document • Output field types – String, Number, Boolean, Object and Array. • Output expression – No Flow output A flow output node extracts the input data from the previous node, based on the defined expression, and returns it. A flow can have multiple flow output nodes if there are multiple branches in the flow. • Node name – Any • Input field name – document • Input field types – String, Number, Boolean, Object and Array. • Input expression – Yes • Output field name – N/A • Output field types – N/A • Output expression – N/A Flow input 42",
    "chunks": [
      {
        "chunk_id": "doc_46_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide • Prompt node • Knowledge Base node Flow input Every prompt flow contains only one flow input node and must begin with it. When you run the flow, the input is fed into this node and the configured output is passed to the next step. Configuration • Node name – N/A • Input field name – N/A • Input field types – N/A • Input expression – N/A • Output field name – document • Output field types – String, Number, Boolean, Object and Array. • Output expression – No Flow output"
      },
      {
        "chunk_id": "doc_46_1_chunk_1",
        "original_index": 1,
        "content": "t and Array. • Output expression – No Flow output A flow output node extracts the input data from the previous node, based on the defined expression, and returns it. A flow can have multiple flow output nodes if there are multiple branches in the flow. • Node name – Any • Input field name – document • Input field types – String, Number, Boolean, Object and Array. • Input expression – Yes • Output field name – N/A • Output field types – N/A • Output expression – N/A Flow input 42"
      }
    ]
  },
  {
    "doc_id": "doc_47_1",
    "original_uuid": "0a4f1634-5cf9-4463-a51f-b263603e5b09",
    "content": "Amazon Bedrock Studio User Guide Condition A condition node sends data from the previous node to different nodes, depending on the conditions that are defined. A condition node can take multiple inputs. • Node name – Any • Input field name – Any • Input field types – String, Number, Boolean, Object and Array. • Input expression – Yes • Condition field name – Any • Output field types – String, Number, Boolean, Object and Array. • Output expression – Yes Condition expressions To define a condition, you refer to an input by its name and compare it to a value using any of the following relational operators: Operator Meaning Supported data Example usage Example types meaning == Equal to (the String, Number, A == B If A is equal to B data type must Boolean also be equal) != Not equal to String, Number, A != B If A isn't equal to Boolean B > Greater than Number A > B If A is greater than B >= Greater than or Number A >= B If A is greater equal to than or equal to B < Less than Number A < B If A is less than B Condition 43",
    "chunks": [
      {
        "chunk_id": "doc_47_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide Condition A condition node sends data from the previous node to different nodes, depending on the conditions that are defined. A condition node can take multiple inputs. • Node name – Any • Input field name – Any • Input field types – String, Number, Boolean, Object and Array. • Input expression – Yes • Condition field name – Any • Output field types – String, Number, Boolean, Object and Array. • Output expression – Yes Condition expressions To define a condition,"
      },
      {
        "chunk_id": "doc_47_1_chunk_1",
        "original_index": 1,
        "content": "Yes Condition expressions To define a condition, you refer to an input by its name and compare it to a value using any of the following relational operators: Operator Meaning Supported data Example usage Example types meaning == Equal to (the String, Number, A == B If A is equal to B data type must Boolean also be equal) != Not equal to String, Number, A != B If A isn't equal to Boolean B > Greater than Number A > B If A is greater than B >= Greater than or Number A >= B If A is greater equal to"
      },
      {
        "chunk_id": "doc_47_1_chunk_2",
        "original_index": 2,
        "content": "er than or Number A >= B If A is greater equal to than or equal to B < Less than Number A < B If A is less than B Condition 43"
      }
    ]
  },
  {
    "doc_id": "doc_48_1",
    "original_uuid": "056d14a3-c3f3-434c-bb18-87e33bea1627",
    "content": "Amazon Bedrock Studio User Guide Operator Meaning Supported data Example usage Example types meaning <= Less than or Number A <= B If A is less than equal to or equal to B You can compare inputs to other inputs or to a constant in a conditional expression. For example, if you have a numerical input called profit and another one called expenses, both profit > expenses or profit <= 1000 are valid expressions. You can use the following logical operators to combine expressions for more complex conditions. We recommend that you use parentheses to resolve ambiguities in grouping of expressions: Operator Meaning Example usage Example meaning and Both expressions are (A < B) and (C == 1) If both expressions true are true: • A is less than B • C is equal to 1 or At least one expressio (A != 2) or (B > C) If either expressions n is true is true: • A isn't equal to B • B is greater than C not The expression isn't not (A > B) If A isn't greater than true B (equivalent to A <= B) Prompt node A prompt node defines a prompt to use in the flow. The inputs to the prompt node are values to fill in the variables that you define for the prompt. The output is the generated response from the model. For more information, see Use prompts with your app. Prompt node 44",
    "chunks": [
      {
        "chunk_id": "doc_48_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide Operator Meaning Supported data Example usage Example types meaning <= Less than or Number A <= B If A is less than equal to or equal to B You can compare inputs to other inputs or to a constant in a conditional expression. For example, if you have a numerical input called profit and another one called expenses, both profit > expenses or profit <= 1000 are valid expressions. You can use the following logical operators to combine expressions for more complex conditions."
      },
      {
        "chunk_id": "doc_48_1_chunk_1",
        "original_index": 1,
        "content": "combine expressions for more complex conditions. We recommend that you use parentheses to resolve ambiguities in grouping of expressions: Operator Meaning Example usage Example meaning and Both expressions are (A < B) and (C == 1) If both expressions true are true: • A is less than B • C is equal to 1 or At least one expressio (A != 2) or (B > C) If either expressions n is true is true: • A isn't equal to B • B is greater than C not The expression isn't not (A > B) If A isn't greater than true B"
      },
      {
        "chunk_id": "doc_48_1_chunk_2",
        "original_index": 2,
        "content": "isn't not (A > B) If A isn't greater than true B (equivalent to A <= B) Prompt node A prompt node defines a prompt to use in the flow. The inputs to the prompt node are values to fill in the variables that you define for the prompt. The output is the generated response from the model. For more information, see Use prompts with your app. Prompt node 44"
      }
    ]
  },
  {
    "doc_id": "doc_49_1",
    "original_uuid": "46aa52c3-2e4e-4841-9685-469a06bb3a52",
    "content": "Amazon Bedrock Studio User Guide • Node name – Any • Prompt – The prompt that the prompt node uses. • Version – The prompt the version of the prompt. • Input field name – The name of the prompt variable. • Input field types – String, Number, Boolean, Object and Array. • Input expression – Yes • Condition field name – modelCompletion • Output field types – String • Output expression – No Knowledge Base node A Knowledge Base node lets you send a query to a knowledge base. For more information, see Knowledge Base data source. • Node name – Any • Knowledge base – The Knowledge Base that the node uses. • Response type – The model that the node uses to generate a response. • Input field name – retrievalQuery • Input field types – String • Input expression – Yes • Condition field name – outputText • Output field types – String • Output expression – No Define inputs with expressions When you configure the inputs for a node, you must define it in relation to the whole input that will enter the node. The whole input can be a string, number, boolean, array, or object. To define an input in relation to the whole input, you use a subset of supported expressions based off JsonPath. Every expression must begin with $.data, which refers to the whole input. Note the following for using expressions: Knowledge Base node 45",
    "chunks": [
      {
        "chunk_id": "doc_49_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide • Node name – Any • Prompt – The prompt that the prompt node uses. • Version – The prompt the version of the prompt. • Input field name – The name of the prompt variable. • Input field types – String, Number, Boolean, Object and Array. • Input expression – Yes • Condition field name – modelCompletion • Output field types – String • Output expression – No Knowledge Base node A Knowledge Base node lets you send a query to a knowledge base. For more information, see"
      },
      {
        "chunk_id": "doc_49_1_chunk_1",
        "original_index": 1,
        "content": "ry to a knowledge base. For more information, see Knowledge Base data source. • Node name – Any • Knowledge base – The Knowledge Base that the node uses. • Response type – The model that the node uses to generate a response. • Input field name – retrievalQuery • Input field types – String • Input expression – Yes • Condition field name – outputText • Output field types – String • Output expression – No Define inputs with expressions When you configure the inputs for a node, you must define it in"
      },
      {
        "chunk_id": "doc_49_1_chunk_2",
        "original_index": 2,
        "content": "gure the inputs for a node, you must define it in relation to the whole input that will enter the node. The whole input can be a string, number, boolean, array, or object. To define an input in relation to the whole input, you use a subset of supported expressions based off JsonPath. Every expression must begin with $.data, which refers to the whole input. Note the following for using expressions: Knowledge Base node 45"
      }
    ]
  },
  {
    "doc_id": "doc_50_1",
    "original_uuid": "d847fef7-cf3b-4d69-8daf-16c758ec24b8",
    "content": "Amazon Bedrock Studio User Guide • If the whole input is a string, number, or boolean, the only expression that you can use to define an individual input is $.data • If the whole input is an array or object, you can extract a part of it to define an individual input. As an example to understand how to use expressions, let's say that the whole input is the following JSON object: { \"animals\": { \"mammals\": [\"cat\", \"dog\"], \"reptiles\": [\"snake\", \"turtle\", \"iguana\"] }, \"organisms\": { \"mammals\": [\"rabbit\", \"horse\", \"mouse\"], \"flowers\": [\"lily\", \"daisy\"] }, \"numbers\": [1, 2, 3, 5, 8] } You can use the following expressions to extract a part of the input (the examples refer to what would be returned from the preceding JSON object): Expression Meaning Example Example result $.data The entire input. $.data The entire object .name The value for a field $.data.numbers [1, 2, 3, 5, 8] called name in a JSON object. [int] The member at the $.data.animals.rep turtle index specified by tiles[2] int in an array. [int1, int2, ...] The members at the $.data.numbers[0, 3] [1, 5] indices specified by each int in an array. Define inputs with expressions 46",
    "chunks": [
      {
        "chunk_id": "doc_50_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide • If the whole input is a string, number, or boolean, the only expression that you can use to define an individual input is $.data • If the whole input is an array or object, you can extract a part of it to define an individual input. As an example to understand how to use expressions, let's say that the whole input is the following JSON object: { \"animals\": { \"mammals\": [\"cat\", \"dog\"], \"reptiles\": [\"snake\", \"turtle\", \"iguana\"] }, \"organisms\": { \"mammals\": [\"rabbit\","
      },
      {
        "chunk_id": "doc_50_1_chunk_1",
        "original_index": 1,
        "content": "\"iguana\"] }, \"organisms\": { \"mammals\": [\"rabbit\", \"horse\", \"mouse\"], \"flowers\": [\"lily\", \"daisy\"] }, \"numbers\": [1, 2, 3, 5, 8] } You can use the following expressions to extract a part of the input (the examples refer to what would be returned from the preceding JSON object): Expression Meaning Example Example result $.data The entire input. $.data The entire object .name The value for a field $.data.numbers [1, 2, 3, 5, 8] called name in a JSON object. [int] The member at the $.data.animals.rep"
      },
      {
        "chunk_id": "doc_50_1_chunk_2",
        "original_index": 2,
        "content": "bject. [int] The member at the $.data.animals.rep turtle index specified by tiles[2] int in an array. [int1, int2, ...] The members at the $.data.numbers[0, 3] [1, 5] indices specified by each int in an array. Define inputs with expressions 46"
      }
    ]
  },
  {
    "doc_id": "doc_51_1",
    "original_uuid": "882bc522-e6f0-48ae-8009-5433c628ff96",
    "content": "Amazon Bedrock Studio User Guide Expression Meaning Example Example result [int1:int2] An array consisting $.data.organisms.m [\"horse\", \"mouse\"] of the items at the ammals[1:] indices between int1 (inclusive) and int2 (exclusive) in an array. Omitting int1 or int2 is equivalent to the marking the beginning or end of the array. * A wildcard that can $.data.*.mammals [[\"cat\", \"dog\"], be used in place of [\"rabbit\", \"horse\", a name or int. If \"mouse\"]] there are multiple results, the results are returned in an array. The following procedure shows how to use expressions to identify fields in a JSON object that you send to a prompt node. The prompt generates a playlist of songs. The JSON object you pass to the prompt flow identifies the number of songs that you want in the playlist and the genre of music that you want the songs to represent. For example, enter the following JSON object to request a playlist of 3 songs in the pop genre. { \"genre\": \"Pop\", \"number\": 3 } To use an expression 1. Create an empty Prompt Flows app by doing Create an initial Prompt Flow app. 2. In the flow builder, choose the Flow input node. 3. In the Prompt Flow builder pane choose the Configure tab. 4. In Outputs section, choose Type and then select Object. 5. In the Prompt Flow builder pane, select Nodes. 6. From the Orchestration section, drag a Prompt node onto the flow builder canvas. Define inputs with expressions 47",
    "chunks": [
      {
        "chunk_id": "doc_51_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide Expression Meaning Example Example result [int1:int2] An array consisting $.data.organisms.m [\"horse\", \"mouse\"] of the items at the ammals[1:] indices between int1 (inclusive) and int2 (exclusive) in an array. Omitting int1 or int2 is equivalent to the marking the beginning or end of the array. * A wildcard that can $.data.*.mammals [[\"cat\", \"dog\"], be used in place of [\"rabbit\", \"horse\", a name or int. If \"mouse\"]] there are multiple results, the results are returned"
      },
      {
        "chunk_id": "doc_51_1_chunk_1",
        "original_index": 1,
        "content": "re are multiple results, the results are returned in an array. The following procedure shows how to use expressions to identify fields in a JSON object that you send to a prompt node. The prompt generates a playlist of songs. The JSON object you pass to the prompt flow identifies the number of songs that you want in the playlist and the genre of music that you want the songs to represent. For example, enter the following JSON object to request a playlist of 3 songs in the pop genre. { \"genre\": \"Pop\","
      },
      {
        "chunk_id": "doc_51_1_chunk_2",
        "original_index": 2,
        "content": "st of 3 songs in the pop genre. { \"genre\": \"Pop\", \"number\": 3 } To use an expression 1. Create an empty Prompt Flows app by doing Create an initial Prompt Flow app. 2. In the flow builder, choose the Flow input node. 3. In the Prompt Flow builder pane choose the Configure tab. 4. In Outputs section, choose Type and then select Object. 5. In the Prompt Flow builder pane, select Nodes. 6. From the Orchestration section, drag a Prompt node onto the flow builder canvas. Define inputs with expressions"
      },
      {
        "chunk_id": "doc_51_1_chunk_3",
        "original_index": 3,
        "content": "ow builder canvas. Define inputs with expressions 47"
      }
    ]
  },
  {
    "doc_id": "doc_52_1",
    "original_uuid": "edab4a16-056d-4730-8d1f-bef3b819579c",
    "content": "Amazon Bedrock Studio User Guide 7. Select the node you just added. 8. In the Configurations tab of the Prompt Flow builder pane, do the following: a. For Node name, enter playlist_songs_genre_node. b. In Prompt details choose Create new prompt to open the Create prompt pane. c. For Prompt name, enter playlist_songs_genre_prompt. d. For Model, choose the model that you want the prompt to use. e. For Prompt message enter Create a playlist of {{number}} songs that are in the {{genre}} genre of music.. f. (Optional) In Model configs, make changes to the inference parameters. g. Choose Save draft and create version to create the prompt. It might take a couple of minutes to finish creating the prompt. 9. In the flow builder, choose the prompt node that you just added. 10. Choose the Configure tab and do the following in the Prompt details section: a. For Prompt, select the prompt that you just created (playlist_songs_genre_prompt). b. For Version, select the version (1) of the prompt to use. c. For the number input in the Inputs section, do the following: i. Change the value of Type to Number. ii. Change the value of Expression to $.data.number. d. For the genre input in the Inputs section, do the following: i. Make sure the value of Type is String. ii. Change the expression for the input to $.data.genre. Define inputs with expressions 48",
    "chunks": [
      {
        "chunk_id": "doc_52_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide 7. Select the node you just added. 8. In the Configurations tab of the Prompt Flow builder pane, do the following: a. For Node name, enter playlist_songs_genre_node. b. In Prompt details choose Create new prompt to open the Create prompt pane. c. For Prompt name, enter playlist_songs_genre_prompt. d. For Model, choose the model that you want the prompt to use. e. For Prompt message enter Create a playlist of {{number}} songs that are in the {{genre}} genre of music.."
      },
      {
        "chunk_id": "doc_52_1_chunk_1",
        "original_index": 1,
        "content": "songs that are in the {{genre}} genre of music.. f. (Optional) In Model configs, make changes to the inference parameters. g. Choose Save draft and create version to create the prompt. It might take a couple of minutes to finish creating the prompt. 9. In the flow builder, choose the prompt node that you just added. 10. Choose the Configure tab and do the following in the Prompt details section: a. For Prompt, select the prompt that you just created (playlist_songs_genre_prompt). b. For Version,"
      },
      {
        "chunk_id": "doc_52_1_chunk_2",
        "original_index": 2,
        "content": "ed (playlist_songs_genre_prompt). b. For Version, select the version (1) of the prompt to use. c. For the number input in the Inputs section, do the following: i. Change the value of Type to Number. ii. Change the value of Expression to $.data.number. d. For the genre input in the Inputs section, do the following: i. Make sure the value of Type is String. ii. Change the expression for the input to $.data.genre. Define inputs with expressions 48"
      }
    ]
  },
  {
    "doc_id": "doc_53_1",
    "original_uuid": "defb09f2-1e05-4fb8-8ab5-e5cbd498661b",
    "content": "Amazon Bedrock Studio User Guide 11. Connect the output from Flow input node to the input number of the Prompt node. 12. Connect the output from Flow input node to the input genre of the Prompt node. 13. Connect the output from the prompt node to the input of the Flow output node. Define inputs with expressions 49",
    "chunks": [
      {
        "chunk_id": "doc_53_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide 11. Connect the output from Flow input node to the input number of the Prompt node. 12. Connect the output from Flow input node to the input genre of the Prompt node. 13. Connect the output from the prompt node to the input of the Flow output node. Define inputs with expressions 49"
      }
    ]
  },
  {
    "doc_id": "doc_54_1",
    "original_uuid": "241dca45-6075-4fe7-910c-c8d549cbbc20",
    "content": "Amazon Bedrock Studio User Guide 14. Choose Save to save the flow. The flow should look similar to the following. 15. Test your prompt by doing the following: a. On the right side of the page, choose < to open the Test pane. b. Enter the following JSON in the Enter prompt text box. { \"genre\": \"Pop\", \"number\": 3 } c. Press Ctrl + Enter on your keyboard or choose the run button to test the prompt. The response should be a playlist of 3 songs in the pop music genre. Define inputs with expressions 50",
    "chunks": [
      {
        "chunk_id": "doc_54_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide 14. Choose Save to save the flow. The flow should look similar to the following. 15. Test your prompt by doing the following: a. On the right side of the page, choose < to open the Test pane. b. Enter the following JSON in the Enter prompt text box. { \"genre\": \"Pop\", \"number\": 3 } c. Press Ctrl + Enter on your keyboard or choose the run button to test the prompt. The response should be a playlist of 3 songs in the pop music genre. Define inputs with expressions 5"
      },
      {
        "chunk_id": "doc_54_1_chunk_1",
        "original_index": 1,
        "content": "pop music genre. Define inputs with expressions 50"
      }
    ]
  },
  {
    "doc_id": "doc_55_1",
    "original_uuid": "67ad6be5-e4e7-4041-bdf7-085d4862c051",
    "content": "Amazon Bedrock Studio User Guide Use prompts with your app A prompt is input you send to a model in order for it to generate a response, in a process known as inference. For example, you could send the following prompt to a model. What is Avebury stone circle? When you send the prompt to a model, the model generates a response that is similar to the following. Avebury stone circle is a Neolithic monument located in Wiltshire, England. It consists of a massive circular bank and ditch, with a large outer circle of standing stones that originally numbered around 100. Some Amazon Bedrock Studio models support multimodal prompts, which are prompts that include images and text. This allows you to pass an image to a model and ask questions such as What's in this image?. The actual response that you get for a prompt depends on the model you use. In apps you create, you can influence the response in various ways, such as by using inference parameters, which allow to filter out lower probability responses or limit the response in other ways. You can experiment with prompts by using Explore mode. When you are ready, use prompts in a chat apps or a Prompt Flows app. Further, Prompt Management let you create and manage prompts for use in a Prompt Flows app. This allows you to pre-configure a prompt for a flow, by choosing the model and inference parameters that the model uses. You can also customize the prompt for different use cases by using variables. For more information, see Create a prompt with Prompt Management. Topics • Prompt engineering guides • Inference parameters • Create a prompt with Prompt Management • Add a prompt to a Prompt Flows app • Modify a prompt with Prompt Management 51",
    "chunks": [
      {
        "chunk_id": "doc_55_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide Use prompts with your app A prompt is input you send to a model in order for it to generate a response, in a process known as inference. For example, you could send the following prompt to a model. What is Avebury stone circle? When you send the prompt to a model, the model generates a response that is similar to the following. Avebury stone circle is a Neolithic monument located in Wiltshire, England. It consists of a massive circular bank and ditch, with a large"
      },
      {
        "chunk_id": "doc_55_1_chunk_1",
        "original_index": 1,
        "content": "f a massive circular bank and ditch, with a large outer circle of standing stones that originally numbered around 100. Some Amazon Bedrock Studio models support multimodal prompts, which are prompts that include images and text. This allows you to pass an image to a model and ask questions such as What's in this image?. The actual response that you get for a prompt depends on the model you use. In apps you create, you can influence the response in various ways, such as by using inference parameters,"
      },
      {
        "chunk_id": "doc_55_1_chunk_2",
        "original_index": 2,
        "content": "ious ways, such as by using inference parameters, which allow to filter out lower probability responses or limit the response in other ways. You can experiment with prompts by using Explore mode. When you are ready, use prompts in a chat apps or a Prompt Flows app. Further, Prompt Management let you create and manage prompts for use in a Prompt Flows app. This allows you to pre-configure a prompt for a flow, by choosing the model and inference parameters that the model uses. You can also customize"
      },
      {
        "chunk_id": "doc_55_1_chunk_3",
        "original_index": 3,
        "content": "eters that the model uses. You can also customize the prompt for different use cases by using variables. For more information, see Create a prompt with Prompt Management. Topics • Prompt engineering guides • Inference parameters • Create a prompt with Prompt Management • Add a prompt to a Prompt Flows app • Modify a prompt with Prompt Management 51"
      }
    ]
  },
  {
    "doc_id": "doc_56_1",
    "original_uuid": "ee3859c9-eefd-4d29-b2c7-0e05b1d7bb8f",
    "content": "Amazon Bedrock Studio User Guide • Delete a prompt with Prompt Management Prompt engineering guides Amazon Bedrock Studio provides models from a variety of model providers. Each provider provides guidance on how to best create prompt for their models. • Anthropic Claude model prompt guide: https://docs.anthropic.com/claude/docs • Anthropic Claude prompt engineering resources: https://docs.anthropic.com/claude/docs/ guide-to-anthropics-prompt-engineering-resources • Cohere prompt guide: https://txt.cohere.com/how-to-train-your-pet-llm-prompt-engineering • AI21 Labs Jurassic model prompt guide: https://docs.ai21.com/docs/prompt-engineering • Meta Llama 2 prompt guide: https://ai.meta.com/llama/get-started/#prompting • Stability documentation: https://platform.stability.ai/docs/getting-started • Mistral AI prompt guide: https://docs.mistral.ai/guides/prompting_capabilities/ For general guidelines about creating prompts with Amazon Bedrock, see General guidelines for Amazon Bedrock LLM users. Inference parameters Inference parameters are values that you can adjust to limit or influence the model response. For example, in the chat app you create in Build a chat app with Amazon Bedrock Studio, you can use inference parameters to adjust the randomness and diversity of the songs that the model generates for a playlist. Randomness and diversity For any given sequence, a model determines a probability distribution of options for the next token in the sequence. To generate each token in an output, the model samples from this distribution. Randomness and diversity refer to the amount of variation in a model's response. You can control these factors by limiting or adjusting the distribution. Foundation models typically support the following parameters to control randomness and diversity in the response. • Temperature– Affects the shape of the probability distribution for the predicted output and influences the likelihood of the model selecting lower-probability outputs. Prompt engineering guides 52",
    "chunks": [
      {
        "chunk_id": "doc_56_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide • Delete a prompt with Prompt Management Prompt engineering guides Amazon Bedrock Studio provides models from a variety of model providers. Each provider provides guidance on how to best create prompt for their models. • Anthropic Claude model prompt guide: https://docs.anthropic.com/claude/docs • Anthropic Claude prompt engineering resources: https://docs.anthropic.com/claude/docs/ guide-to-anthropics-prompt-engineering-resources • Cohere prompt guide: https://txt.cohere.com/how-to-train-your-pet-llm-prompt-engineering"
      },
      {
        "chunk_id": "doc_56_1_chunk_1",
        "original_index": 1,
        "content": ".com/how-to-train-your-pet-llm-prompt-engineering • AI21 Labs Jurassic model prompt guide: https://docs.ai21.com/docs/prompt-engineering • Meta Llama 2 prompt guide: https://ai.meta.com/llama/get-started/#prompting • Stability documentation: https://platform.stability.ai/docs/getting-started • Mistral AI prompt guide: https://docs.mistral.ai/guides/prompting_capabilities/ For general guidelines about creating prompts with Amazon Bedrock, see General guidelines for Amazon Bedrock LLM users. Inference"
      },
      {
        "chunk_id": "doc_56_1_chunk_2",
        "original_index": 2,
        "content": "uidelines for Amazon Bedrock LLM users. Inference parameters Inference parameters are values that you can adjust to limit or influence the model response. For example, in the chat app you create in Build a chat app with Amazon Bedrock Studio, you can use inference parameters to adjust the randomness and diversity of the songs that the model generates for a playlist. Randomness and diversity For any given sequence, a model determines a probability distribution of options for the next token in the"
      },
      {
        "chunk_id": "doc_56_1_chunk_3",
        "original_index": 3,
        "content": "distribution of options for the next token in the sequence. To generate each token in an output, the model samples from this distribution. Randomness and diversity refer to the amount of variation in a model's response. You can control these factors by limiting or adjusting the distribution. Foundation models typically support the following parameters to control randomness and diversity in the response. • Temperature– Affects the shape of the probability distribution for the predicted output and"
      },
      {
        "chunk_id": "doc_56_1_chunk_4",
        "original_index": 4,
        "content": "ability distribution for the predicted output and influences the likelihood of the model selecting lower-probability outputs. Prompt engineering guides 52"
      }
    ]
  },
  {
    "doc_id": "doc_57_1",
    "original_uuid": "d0fb22c4-b629-47f1-b2fe-e9e088f21cc1",
    "content": "Amazon Bedrock Studio User Guide • Choose a lower value to influence the model to select higher-probability outputs. • Choose a higher value to influence the model to select lower-probability outputs. In technical terms, the temperature modulates the probability mass function for the next token. A lower temperature steepens the function and leads to more deterministic responses, and a higher temperature flattens the function and leads to more random responses. • Top K – The number of most-likely candidates that the model considers for the next token. • Choose a lower value to decrease the size of the pool and limit the options to more likely outputs. • Choose a higher value to increase the size of the pool and allow the model to consider less likely outputs. For example, if you choose a value of 50 for Top K, the model selects from 50 of the most probable tokens that could be next in the sequence. • Top P – The percentage of most-likely candidates that the model considers for the next token. • Choose a lower value to decrease the size of the pool and limit the options to more likely outputs. • Choose a higher value to increase the size of the pool and allow the model to consider less likely outputs. In technical terms, the model computes the cumulative probability distribution for the set of responses and considers only the top P% of the distribution. For example, if you choose a value of 0.8 for Top P, the model selects from the top 80% of the probability distribution of tokens that could be next in the sequence. The following table summarizes the effects of these parameters. Parameter Effect of lower value Effect of higher value Temperature Increase likelihood of higher- Increase likelihood of lower- probability tokens probability tokens Decrease likelihood of lower- Decrease likelihood of higher- probability tokens probability tokens Randomness and diversity 53",
    "chunks": [
      {
        "chunk_id": "doc_57_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide • Choose a lower value to influence the model to select higher-probability outputs. • Choose a higher value to influence the model to select lower-probability outputs. In technical terms, the temperature modulates the probability mass function for the next token. A lower temperature steepens the function and leads to more deterministic responses, and a higher temperature flattens the function and leads to more random responses. • Top K – The number of most-likely"
      },
      {
        "chunk_id": "doc_57_1_chunk_1",
        "original_index": 1,
        "content": "om responses. • Top K – The number of most-likely candidates that the model considers for the next token. • Choose a lower value to decrease the size of the pool and limit the options to more likely outputs. • Choose a higher value to increase the size of the pool and allow the model to consider less likely outputs. For example, if you choose a value of 50 for Top K, the model selects from 50 of the most probable tokens that could be next in the sequence. • Top P – The percentage of most-likely candidates"
      },
      {
        "chunk_id": "doc_57_1_chunk_2",
        "original_index": 2,
        "content": "Top P – The percentage of most-likely candidates that the model considers for the next token. • Choose a lower value to decrease the size of the pool and limit the options to more likely outputs. • Choose a higher value to increase the size of the pool and allow the model to consider less likely outputs. In technical terms, the model computes the cumulative probability distribution for the set of responses and considers only the top P% of the distribution. For example, if you choose a value of 0.8"
      },
      {
        "chunk_id": "doc_57_1_chunk_3",
        "original_index": 3,
        "content": "bution. For example, if you choose a value of 0.8 for Top P, the model selects from the top 80% of the probability distribution of tokens that could be next in the sequence. The following table summarizes the effects of these parameters. Parameter Effect of lower value Effect of higher value Temperature Increase likelihood of higher- Increase likelihood of lower- probability tokens probability tokens Decrease likelihood of lower- Decrease likelihood of higher- probability tokens probability tokens"
      },
      {
        "chunk_id": "doc_57_1_chunk_4",
        "original_index": 4,
        "content": "of higher- probability tokens probability tokens Randomness and diversity 53"
      }
    ]
  },
  {
    "doc_id": "doc_58_1",
    "original_uuid": "a17e5172-9801-42f1-aa1e-f649a7cccc82",
    "content": "Amazon Bedrock Studio User Guide Parameter Effect of lower value Effect of higher value Top K Remove lower-probability Allow lower-probability tokens tokens Top P Remove lower-probability Allow lower-probability tokens tokens As an example to understand these parameters, consider the example prompt I hear the hoof beats of \". Let's say that the model determines the following three words to be candidates for the next token. The model also assigns a probability for each word. { \"horses\": 0.7, \"zebras\": 0.2, \"unicorns\": 0.1 } • If you set a high temperature, the probability distribution is flattened and the probabilities become less different, which would increase the probability of choosing \"unicorns\" and decrease the probability of choosing \"horses\". • If you set Top K as 2, the model only considers the top 2 most likely candidates: \"horses\" and \"zebras.\" • If you set Top P as 0.7, the model only considers \"horses\" because it is the only candidate that lies in the top 70% of the probability distribution. If you set Top P as 0.9, the model considers \"horses\" and \"zebras\" as they lie in the top 90% of probability distribution. Create a prompt with Prompt Management Prompt management let you create prompt that you can customize for different uses cases. For example, you could have a prompt that creates a playlist of songs about topics that a user chooses. You can then use the prompt in a Prompt Flows app. Important If your workspace was created before Amazon Bedrock Studio added support for Prompt Management, you won't be able to create a prompt until your administrator updates your Create a prompt 54",
    "chunks": [
      {
        "chunk_id": "doc_58_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide Parameter Effect of lower value Effect of higher value Top K Remove lower-probability Allow lower-probability tokens tokens Top P Remove lower-probability Allow lower-probability tokens tokens As an example to understand these parameters, consider the example prompt I hear the hoof beats of \". Let's say that the model determines the following three words to be candidates for the next token. The model also assigns a probability for each word. { \"horses\": 0.7, \"zebras\":"
      },
      {
        "chunk_id": "doc_58_1_chunk_1",
        "original_index": 1,
        "content": "ability for each word. { \"horses\": 0.7, \"zebras\": 0.2, \"unicorns\": 0.1 } • If you set a high temperature, the probability distribution is flattened and the probabilities become less different, which would increase the probability of choosing \"unicorns\" and decrease the probability of choosing \"horses\". • If you set Top K as 2, the model only considers the top 2 most likely candidates: \"horses\" and \"zebras.\" • If you set Top P as 0.7, the model only considers \"horses\" because it is the only candidate"
      },
      {
        "chunk_id": "doc_58_1_chunk_2",
        "original_index": 2,
        "content": "nsiders \"horses\" because it is the only candidate that lies in the top 70% of the probability distribution. If you set Top P as 0.9, the model considers \"horses\" and \"zebras\" as they lie in the top 90% of probability distribution. Create a prompt with Prompt Management Prompt management let you create prompt that you can customize for different uses cases. For example, you could have a prompt that creates a playlist of songs about topics that a user chooses. You can then use the prompt in a Prompt"
      },
      {
        "chunk_id": "doc_58_1_chunk_3",
        "original_index": 3,
        "content": "chooses. You can then use the prompt in a Prompt Flows app. Important If your workspace was created before Amazon Bedrock Studio added support for Prompt Management, you won't be able to create a prompt until your administrator updates your Create a prompt 54"
      }
    ]
  },
  {
    "doc_id": "doc_59_1",
    "original_uuid": "80e83836-eba6-431c-9836-1c5d348ed5b3",
    "content": "Amazon Bedrock Studio User Guide workspace. Ask your administrator to follow the instructions at Update a workspace for Prompt management and Prompt flows. When you create a prompt, you select a model for it and can modify inference parameters. To adjust the prompt for different use cases, you can include up to 5 variables. You define variables in a prompt by surrounding them in double curly braces {{variable}}. For example, the following prompt defines two variables, topic and location. Generate a playlist of songs about {{topic}}. Make sure each song is by artists from {{location}}. When you run the prompt, you supply values for the variables. Bedrock Studio fills the prompt with the variable values and then passes the prompt to the model. For example, if you supply a topic value of castle and a location value of Wales, the model generates a playlist of songs about castles by Welsh artists. You initially create a draft of your prompt. You can then test your prompt by inputing test values for the variables and running the prompt. These values are only for temporary testing and aren't saved to your prompt. When you are ready, you can create a version of your prompt for use in a Prompt Flows app. You can create multiple versions of a prompt, but you can only edit the latest version. When you delete a prompt, it deletes all versions of the prompt. Note If you don't have access to Prompt Management, ask your administrator to update your workspace. For more information, see Add IAM permissions for Prompt Management and Prompt Flows. To create a prompt 1. Open your Amazon Bedrock Studio workspace. 2. Make sure that you are in Build mode, by choosing Build at the top right of the page. 3. In the Project dropdown list, choose the project that you want to use or create a new project. 4. Open the navigation pane by choosing the menu at the top left of the page. 5. In Project details choose Prompts. Create a prompt 55",
    "chunks": [
      {
        "chunk_id": "doc_59_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide workspace. Ask your administrator to follow the instructions at Update a workspace for Prompt management and Prompt flows. When you create a prompt, you select a model for it and can modify inference parameters. To adjust the prompt for different use cases, you can include up to 5 variables. You define variables in a prompt by surrounding them in double curly braces {{variable}}. For example, the following prompt defines two variables, topic and location. Generate"
      },
      {
        "chunk_id": "doc_59_1_chunk_1",
        "original_index": 1,
        "content": "fines two variables, topic and location. Generate a playlist of songs about {{topic}}. Make sure each song is by artists from {{location}}. When you run the prompt, you supply values for the variables. Bedrock Studio fills the prompt with the variable values and then passes the prompt to the model. For example, if you supply a topic value of castle and a location value of Wales, the model generates a playlist of songs about castles by Welsh artists. You initially create a draft of your prompt. You"
      },
      {
        "chunk_id": "doc_59_1_chunk_2",
        "original_index": 2,
        "content": "You initially create a draft of your prompt. You can then test your prompt by inputing test values for the variables and running the prompt. These values are only for temporary testing and aren't saved to your prompt. When you are ready, you can create a version of your prompt for use in a Prompt Flows app. You can create multiple versions of a prompt, but you can only edit the latest version. When you delete a prompt, it deletes all versions of the prompt. Note If you don't have access to Prompt"
      },
      {
        "chunk_id": "doc_59_1_chunk_3",
        "original_index": 3,
        "content": "e prompt. Note If you don't have access to Prompt Management, ask your administrator to update your workspace. For more information, see Add IAM permissions for Prompt Management and Prompt Flows. To create a prompt 1. Open your Amazon Bedrock Studio workspace. 2. Make sure that you are in Build mode, by choosing Build at the top right of the page. 3. In the Project dropdown list, choose the project that you want to use or create a new project. 4. Open the navigation pane by choosing the menu at"
      },
      {
        "chunk_id": "doc_59_1_chunk_4",
        "original_index": 4,
        "content": "Open the navigation pane by choosing the menu at the top left of the page. 5. In Project details choose Prompts. Create a prompt 55"
      }
    ]
  },
  {
    "doc_id": "doc_60_1",
    "original_uuid": "811e113e-ba6c-4c7f-9ec3-d0f180b49fe4",
    "content": "Amazon Bedrock Studio User Guide 6. Choose Create prompt to start creating a prompt. 7. Choose the prompt name (Untitled Prompt-nnnn) and enter a name for the prompt. 8. In the Configs section, do the following: a. For Model, select the model that you want to use. b. (Optional) In Parameters, set the inference parameters values that you want to use. If you don't make changes, the prompt uses the default values for the model. For more information, see Inference parameters. c. (Optional) In Prompt details enter a description for your prompt. 9. In the center pane, enter Generate a playlist of songs about {{topic}}. Make sure each song is by artists from {{location}}. in the Prompt message text box. 10. (Optional) Choose Save draft to save a draft of your prompt. 11. Test your prompt in the right pane by doing the following: a. For Test variable values, enter the following values for your prompt variables. • topic– Enter castles. • location– Enter Wales. b. Choose Run to test your prompt. You should see your prompt, with populated variables, in the Test section. Bedrock Studio displays the response from the model underneath your prompt. c. (Optional) Choose Reset to clear previously shown test results. d. Continue to make changes to the prompt and variables until you are satisfied with the results. You can choose Reset to clear previously shown test results. 12. When you are ready, choose Create version to create a version of your prompt. If the button is disabled, wait until Bedrock Studio completes saving the prompt, which should take up to a minute. 13. Add your prompt to a Prompt Flows app. Add a prompt to a Prompt Flows app In this procedure, you add a prompt to an existing Prompt Flow app. 1. Open the Prompt Flows app in Amazon Bedrock Studio. Add a prompt to a Prompt Flows app 56",
    "chunks": [
      {
        "chunk_id": "doc_60_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide 6. Choose Create prompt to start creating a prompt. 7. Choose the prompt name (Untitled Prompt-nnnn) and enter a name for the prompt. 8. In the Configs section, do the following: a. For Model, select the model that you want to use. b. (Optional) In Parameters, set the inference parameters values that you want to use. If you don't make changes, the prompt uses the default values for the model. For more information, see Inference parameters. c. (Optional) In Prompt"
      },
      {
        "chunk_id": "doc_60_1_chunk_1",
        "original_index": 1,
        "content": "see Inference parameters. c. (Optional) In Prompt details enter a description for your prompt. 9. In the center pane, enter Generate a playlist of songs about {{topic}}. Make sure each song is by artists from {{location}}. in the Prompt message text box. 10. (Optional) Choose Save draft to save a draft of your prompt. 11. Test your prompt in the right pane by doing the following: a. For Test variable values, enter the following values for your prompt variables. • topic– Enter castles. • location–"
      },
      {
        "chunk_id": "doc_60_1_chunk_2",
        "original_index": 2,
        "content": "pt variables. • topic– Enter castles. • location– Enter Wales. b. Choose Run to test your prompt. You should see your prompt, with populated variables, in the Test section. Bedrock Studio displays the response from the model underneath your prompt. c. (Optional) Choose Reset to clear previously shown test results. d. Continue to make changes to the prompt and variables until you are satisfied with the results. You can choose Reset to clear previously shown test results. 12. When you are ready, choose"
      },
      {
        "chunk_id": "doc_60_1_chunk_3",
        "original_index": 3,
        "content": "hown test results. 12. When you are ready, choose Create version to create a version of your prompt. If the button is disabled, wait until Bedrock Studio completes saving the prompt, which should take up to a minute. 13. Add your prompt to a Prompt Flows app. Add a prompt to a Prompt Flows app In this procedure, you add a prompt to an existing Prompt Flow app. 1. Open the Prompt Flows app in Amazon Bedrock Studio. Add a prompt to a Prompt Flows app 56"
      }
    ]
  },
  {
    "doc_id": "doc_61_1",
    "original_uuid": "b9dd7c8d-9d3b-46a9-bdf2-165a7238aee5",
    "content": "Amazon Bedrock Studio User Guide 2. In the Prompt Flow builder pane, select the Nodes tab. 3. From the Orchestration section, drag a Prompt node onto the flow builder canvas. 4. In the the flow builder, select the Prompt node that you just added. 5. In the Prompt Flow builder pane, choose the Configure tab and do the following: a. For Node name, enter a name for the Prompt node. b. For Prompt in the Prompt details section, select the prompt that you just created. c. For Version, select the version of the prompt that you just created. d. If you want to identify specific data from the upstream node that the prompt should use, change the value in Expression. For more information, see Define inputs with expressions. 6. The circles on the nodes are connection points. For each variable, draw a line from the circle on the upstream node (such as the Flow input node) to the circle for the variable in the Input section of the prompt node. 7. Connect the Output of the prompt node to the downstream node that you want the prompt to send its output to. The Prompt Flow should look similar to the following image: 8. Choose Save to save your changes. Modify a prompt with Prompt Management You can modify the current draft prompt or modify previous versions of a prompt. To modify a prompt, you select the version of the prompt (or current working draft prompt) that you want to modify. You then work on a draft update of the prompt. You can change the configuration for different versions of a prompt. For example, different versions of a prompt can use different Amazon Bedrock Studio models or use different inference parameters. Modify a prompt 57",
    "chunks": [
      {
        "chunk_id": "doc_61_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide 2. In the Prompt Flow builder pane, select the Nodes tab. 3. From the Orchestration section, drag a Prompt node onto the flow builder canvas. 4. In the the flow builder, select the Prompt node that you just added. 5. In the Prompt Flow builder pane, choose the Configure tab and do the following: a. For Node name, enter a name for the Prompt node. b. For Prompt in the Prompt details section, select the prompt that you just created. c. For Version, select the version"
      },
      {
        "chunk_id": "doc_61_1_chunk_1",
        "original_index": 1,
        "content": "just created. c. For Version, select the version of the prompt that you just created. d. If you want to identify specific data from the upstream node that the prompt should use, change the value in Expression. For more information, see Define inputs with expressions. 6. The circles on the nodes are connection points. For each variable, draw a line from the circle on the upstream node (such as the Flow input node) to the circle for the variable in the Input section of the prompt node. 7. Connect"
      },
      {
        "chunk_id": "doc_61_1_chunk_2",
        "original_index": 2,
        "content": "the Input section of the prompt node. 7. Connect the Output of the prompt node to the downstream node that you want the prompt to send its output to. The Prompt Flow should look similar to the following image: 8. Choose Save to save your changes. Modify a prompt with Prompt Management You can modify the current draft prompt or modify previous versions of a prompt. To modify a prompt, you select the version of the prompt (or current working draft prompt) that you want to modify. You then work on"
      },
      {
        "chunk_id": "doc_61_1_chunk_3",
        "original_index": 3,
        "content": "prompt) that you want to modify. You then work on a draft update of the prompt. You can change the configuration for different versions of a prompt. For example, different versions of a prompt can use different Amazon Bedrock Studio models or use different inference parameters. Modify a prompt 57"
      }
    ]
  },
  {
    "doc_id": "doc_62_1",
    "original_uuid": "70ddb245-4ddf-4cfb-a301-0dc252a77509",
    "content": "Amazon Bedrock Studio User Guide After testing the draft prompt, you can then save the draft as a new version of the prompt. If you want to use a new version of a prompt in a Prompt Flows app, update the version of the prompt in the app configuration. For more information, see Add a prompt to your Prompt Flows app. For more information about the changes you can make, see Create a prompt with Prompt Management. To modify a prompt 1. Open your Amazon Bedrock Studio workspace. 2. Make sure that you are in Build mode, by choosing Build at the top right of the page. 3. In the Project dropdown list, choose the project that contains the prompt that you want to modify. 4. Open the navigation pane by choosing the menu at the top left of the page. 5. In Project details choose Prompts. 6. In Prompts, select the prompt that you want to modify. 7. In the Drafts and versions pane, do one of the following: • If you want to modify the current draft prompt, choose View and edit in the working draft tile. • If you want to edit a previous version of the prompt, choose Restore in the tile for the prompt version. If the current draft prompt isn't already saved, Amazon Bedrock Studio offers to save the draft as new version of the prompt. To save the the draft, select Save the current working draft as a version. If you don't save the draft, the current draft prompt becomes the version of the prompt that you chose to edit. Amazon Bedrock Studio deletes the previous draft prompt. • If you want to try the prompt without making changes, choose View to open the prompt. You can't modify the prompt, but you can test and delete the prompt. 8. In Configs make changes to the model and inference parameters. 9. For Prompt message, use the text box to make changes to the prompt message. 10. (Optional) Choose Save draft to save a draft of your prompt. 11. In Test enter values for the prompt variables and choose run to test your changes. 12. When you are satisfied with your changes, choose Create version to create a new version of your prompt. Modify a prompt 58",
    "chunks": [
      {
        "chunk_id": "doc_62_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide After testing the draft prompt, you can then save the draft as a new version of the prompt. If you want to use a new version of a prompt in a Prompt Flows app, update the version of the prompt in the app configuration. For more information, see Add a prompt to your Prompt Flows app. For more information about the changes you can make, see Create a prompt with Prompt Management. To modify a prompt 1. Open your Amazon Bedrock Studio workspace. 2. Make sure that you"
      },
      {
        "chunk_id": "doc_62_1_chunk_1",
        "original_index": 1,
        "content": "n Bedrock Studio workspace. 2. Make sure that you are in Build mode, by choosing Build at the top right of the page. 3. In the Project dropdown list, choose the project that contains the prompt that you want to modify. 4. Open the navigation pane by choosing the menu at the top left of the page. 5. In Project details choose Prompts. 6. In Prompts, select the prompt that you want to modify. 7. In the Drafts and versions pane, do one of the following: • If you want to modify the current draft prompt,"
      },
      {
        "chunk_id": "doc_62_1_chunk_2",
        "original_index": 2,
        "content": "• If you want to modify the current draft prompt, choose View and edit in the working draft tile. • If you want to edit a previous version of the prompt, choose Restore in the tile for the prompt version. If the current draft prompt isn't already saved, Amazon Bedrock Studio offers to save the draft as new version of the prompt. To save the the draft, select Save the current working draft as a version. If you don't save the draft, the current draft prompt becomes the version of the prompt that you"
      },
      {
        "chunk_id": "doc_62_1_chunk_3",
        "original_index": 3,
        "content": "prompt becomes the version of the prompt that you chose to edit. Amazon Bedrock Studio deletes the previous draft prompt. • If you want to try the prompt without making changes, choose View to open the prompt. You can't modify the prompt, but you can test and delete the prompt. 8. In Configs make changes to the model and inference parameters. 9. For Prompt message, use the text box to make changes to the prompt message. 10. (Optional) Choose Save draft to save a draft of your prompt. 11. In Test"
      },
      {
        "chunk_id": "doc_62_1_chunk_4",
        "original_index": 4,
        "content": "draft to save a draft of your prompt. 11. In Test enter values for the prompt variables and choose run to test your changes. 12. When you are satisfied with your changes, choose Create version to create a new version of your prompt. Modify a prompt 58"
      }
    ]
  },
  {
    "doc_id": "doc_63_1",
    "original_uuid": "87da53e9-6d22-46fc-931b-14ac048bea9e",
    "content": "Amazon Bedrock Studio User Guide Delete a prompt with Prompt Management You can delete prompts that you have previously created. When you delete a prompt, Bedrock Studio checks if deleting the prompt affects any apps that use the prompt. After you confirm deletion, Bedrock Studio deletes the prompt draft and all versions of the prompt that you have created. To delete a prompt 1. Open your Amazon Bedrock Studio workspace. 2. Make sure that you are in Build mode, by choosing Build at the top right of the page. 3. In the Project dropdown list, choose the project that contains the prompt that you want to delete. 4. Open the navigation pane by choosing the menu at the top left of the page. 5. In Project details, choose Prompts. 6. In the Prompts section, select the prompt that you want to delete. 7. Choose Delete. 8. In the Delete dialog box, check if deleting the prompt affects any of your apps. You can still delete the prompt, but you will need to make changes to the apps that use the prompt. 9. Choose Delete if you are ready to delete prompt. Delete a prompt 59",
    "chunks": [
      {
        "chunk_id": "doc_63_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide Delete a prompt with Prompt Management You can delete prompts that you have previously created. When you delete a prompt, Bedrock Studio checks if deleting the prompt affects any apps that use the prompt. After you confirm deletion, Bedrock Studio deletes the prompt draft and all versions of the prompt that you have created. To delete a prompt 1. Open your Amazon Bedrock Studio workspace. 2. Make sure that you are in Build mode, by choosing Build at the top right"
      },
      {
        "chunk_id": "doc_63_1_chunk_1",
        "original_index": 1,
        "content": "in Build mode, by choosing Build at the top right of the page. 3. In the Project dropdown list, choose the project that contains the prompt that you want to delete. 4. Open the navigation pane by choosing the menu at the top left of the page. 5. In Project details, choose Prompts. 6. In the Prompts section, select the prompt that you want to delete. 7. Choose Delete. 8. In the Delete dialog box, check if deleting the prompt affects any of your apps. You can still delete the prompt, but you will need"
      },
      {
        "chunk_id": "doc_63_1_chunk_2",
        "original_index": 2,
        "content": "ou can still delete the prompt, but you will need to make changes to the apps that use the prompt. 9. Choose Delete if you are ready to delete prompt. Delete a prompt 59"
      }
    ]
  },
  {
    "doc_id": "doc_64_1",
    "original_uuid": "34d8bd87-1180-4a31-870e-124a82146769",
    "content": "Amazon Bedrock Studio User Guide Add a data source to your app You can use your own data in your apps by adding a data source. This allows your app access to information that is only available to you. In Bedrock Studio a data source can be a document or an Amazon Bedrock Knowledge Base. Topics • Document data source • Knowledge Base data source • Create a Knowledge Base component • Add a Knowledge Base component to a chat app • Add a Knowledge Base component to a Prompt Flow app Document data source A document is a file that contains information that you want the model to use when generating a response. By using a document as a data source, your app users can chat with a document. For example, they can use a document to answers questions, make an analysis, create a summary, itemize fields in a numbered list, or rewrite content. Amazon Bedrock Studio doesn't store your document or its data after use. You can use a document as a data source in a chat app. For more information, see Add a document data source to your chat app. Note You can't use a document data source in a Prompt Flows app. Knowledge Base data source You can also use a Knowledge Base to store your data. A Knowledge Base provides you the capability of amassing data sources into a repository of information. With Knowledge Bases, you can easily build an app that takes advantage of retrieval augmented generation (RAG), a Document data source 60",
    "chunks": [
      {
        "chunk_id": "doc_64_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide Add a data source to your app You can use your own data in your apps by adding a data source. This allows your app access to information that is only available to you. In Bedrock Studio a data source can be a document or an Amazon Bedrock Knowledge Base. Topics • Document data source • Knowledge Base data source • Create a Knowledge Base component • Add a Knowledge Base component to a chat app • Add a Knowledge Base component to a Prompt Flow app Document data source"
      },
      {
        "chunk_id": "doc_64_1_chunk_1",
        "original_index": 1,
        "content": "mponent to a Prompt Flow app Document data source A document is a file that contains information that you want the model to use when generating a response. By using a document as a data source, your app users can chat with a document. For example, they can use a document to answers questions, make an analysis, create a summary, itemize fields in a numbered list, or rewrite content. Amazon Bedrock Studio doesn't store your document or its data after use. You can use a document as a data source in"
      },
      {
        "chunk_id": "doc_64_1_chunk_2",
        "original_index": 2,
        "content": "r use. You can use a document as a data source in a chat app. For more information, see Add a document data source to your chat app. Note You can't use a document data source in a Prompt Flows app. Knowledge Base data source You can also use a Knowledge Base to store your data. A Knowledge Base provides you the capability of amassing data sources into a repository of information. With Knowledge Bases, you can easily build an app that takes advantage of retrieval augmented generation (RAG), a Document"
      },
      {
        "chunk_id": "doc_64_1_chunk_3",
        "original_index": 3,
        "content": "retrieval augmented generation (RAG), a Document data source 60"
      }
    ]
  },
  {
    "doc_id": "doc_65_1",
    "original_uuid": "46711e77-3177-4ace-8df7-09d3316f35b6",
    "content": "Amazon Bedrock Studio User Guide technique in which the retrieval of information from data sources augments the generation of model responses. You can only access Knowledge Bases that you create within Amazon Bedrock Studio. You can't access Knowledge Bases that you create in Amazon Bedrock. You can use a Knowledge Base in a chat app and a Prompt Flows app. The document file or the Knowledge Base source file must be in PDF, MD, TXT, DOC, DOCX, HTML, CSV, XLS or XLSX format. The maximum file size is 10 MB. Create a Knowledge Base component You can create a Knowledge base as a component in a Amazon Bedrock Studio project. If you are creating an app, you can also create a Knowledge Base when you configure the app. For an example, see Build a prompt flow. To create a Knowledge Base 1. Open your Amazon Bedrock Studio workspace. 2. Make sure that you are in Build mode, by choosing Build at the top right of the page. 3. In the Project dropdown list, choose the project that you want to add a Knowledge Base to. 4. In the Components section, choose Create component and then Knowledge Base. The Create Knowledge Base pane is shown. 5. For Knowledge Base name, enter a name for the Knowledge Base. 6. For Knowledge Base description, enter a description for the Knowledge Base. 7. In Add data sources, choose Click to upload and upload the document that you want the Knowledge Base to use. Alternatively, add your source documents by dragging and dropping the document from your computer. 8. (Optional) For Embeddings model, choose a different model, if available. 9. (Optional) For Vector store, choose a different vector store, if available. 10. Choose Create to create the Knowledge Base. 11. Use the Knowledge Base in an app, by doing one of the following: • If your app is a chat app, do Add a Knowledge Base component to a chat app. • If your app is a Prompt Flows app, do Add a Knowledge Base component to a Prompt Flow app. Create a Knowledge Base component 61",
    "chunks": [
      {
        "chunk_id": "doc_65_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide technique in which the retrieval of information from data sources augments the generation of model responses. You can only access Knowledge Bases that you create within Amazon Bedrock Studio. You can't access Knowledge Bases that you create in Amazon Bedrock. You can use a Knowledge Base in a chat app and a Prompt Flows app. The document file or the Knowledge Base source file must be in PDF, MD, TXT, DOC, DOCX, HTML, CSV, XLS or XLSX format. The maximum file size"
      },
      {
        "chunk_id": "doc_65_1_chunk_1",
        "original_index": 1,
        "content": "L, CSV, XLS or XLSX format. The maximum file size is 10 MB. Create a Knowledge Base component You can create a Knowledge base as a component in a Amazon Bedrock Studio project. If you are creating an app, you can also create a Knowledge Base when you configure the app. For an example, see Build a prompt flow. To create a Knowledge Base 1. Open your Amazon Bedrock Studio workspace. 2. Make sure that you are in Build mode, by choosing Build at the top right of the page. 3. In the Project dropdown list,"
      },
      {
        "chunk_id": "doc_65_1_chunk_2",
        "original_index": 2,
        "content": "ght of the page. 3. In the Project dropdown list, choose the project that you want to add a Knowledge Base to. 4. In the Components section, choose Create component and then Knowledge Base. The Create Knowledge Base pane is shown. 5. For Knowledge Base name, enter a name for the Knowledge Base. 6. For Knowledge Base description, enter a description for the Knowledge Base. 7. In Add data sources, choose Click to upload and upload the document that you want the Knowledge Base to use. Alternatively,"
      },
      {
        "chunk_id": "doc_65_1_chunk_3",
        "original_index": 3,
        "content": "ou want the Knowledge Base to use. Alternatively, add your source documents by dragging and dropping the document from your computer. 8. (Optional) For Embeddings model, choose a different model, if available. 9. (Optional) For Vector store, choose a different vector store, if available. 10. Choose Create to create the Knowledge Base. 11. Use the Knowledge Base in an app, by doing one of the following: • If your app is a chat app, do Add a Knowledge Base component to a chat app. • If your app is"
      },
      {
        "chunk_id": "doc_65_1_chunk_4",
        "original_index": 4,
        "content": "ge Base component to a chat app. • If your app is a Prompt Flows app, do Add a Knowledge Base component to a Prompt Flow app. Create a Knowledge Base component 61"
      }
    ]
  },
  {
    "doc_id": "doc_66_1",
    "original_uuid": "b61ebc00-2711-4f5e-8ce9-9500cb8f3c29",
    "content": "Amazon Bedrock Studio User Guide Add a Knowledge Base component to a chat app In this procedure, you add a Knowledge Base component to an existing chat app. 1. Open the chat app in Amazon Bedrock Studio. 2. In the Configs pane, choose Data. 3. Select Use Knowledge Base. 4. For Select Knowledge Base, select the Knowledge Base component that you created in Create a Knowledge Base component. 5. Choose Save to save your changes. Add a Knowledge Base component to a Prompt Flow app In this procedure, you add a Knowledge Base component to an existing Prompt Flow app. 1. Open the Propmt Flows app in Amazon Bedrock Studio. 2. In the Prompt Flow builder pane, select the Nodes tab. 3. From the Data section, drag a Knowledge Base node onto the flow builder canvas. 4. The circles on the nodes are connection points. Draw a line from the circle on the upstream node (such as the Flow input node) to the circle on the Input section of the Knowledge Base node that you just added. 5. Connect the Output of the Knowledge Base node to the downstream node that you want the Knowledge Base to send its output to. The Prompt Flow should look similar to the following image: 6. In the the flow builder, select the Knowledge Base node that you just added. 7. In the Prompt Flow builder pane, choose the Configure tab and do the following: Add a Knowledge Base component to a chat app 62",
    "chunks": [
      {
        "chunk_id": "doc_66_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide Add a Knowledge Base component to a chat app In this procedure, you add a Knowledge Base component to an existing chat app. 1. Open the chat app in Amazon Bedrock Studio. 2. In the Configs pane, choose Data. 3. Select Use Knowledge Base. 4. For Select Knowledge Base, select the Knowledge Base component that you created in Create a Knowledge Base component. 5. Choose Save to save your changes. Add a Knowledge Base component to a Prompt Flow app In this procedure, you"
      },
      {
        "chunk_id": "doc_66_1_chunk_1",
        "original_index": 1,
        "content": "onent to a Prompt Flow app In this procedure, you add a Knowledge Base component to an existing Prompt Flow app. 1. Open the Propmt Flows app in Amazon Bedrock Studio. 2. In the Prompt Flow builder pane, select the Nodes tab. 3. From the Data section, drag a Knowledge Base node onto the flow builder canvas. 4. The circles on the nodes are connection points. Draw a line from the circle on the upstream node (such as the Flow input node) to the circle on the Input section of the Knowledge Base node"
      },
      {
        "chunk_id": "doc_66_1_chunk_2",
        "original_index": 2,
        "content": "e on the Input section of the Knowledge Base node that you just added. 5. Connect the Output of the Knowledge Base node to the downstream node that you want the Knowledge Base to send its output to. The Prompt Flow should look similar to the following image: 6. In the the flow builder, select the Knowledge Base node that you just added. 7. In the Prompt Flow builder pane, choose the Configure tab and do the following: Add a Knowledge Base component to a chat app 62"
      }
    ]
  },
  {
    "doc_id": "doc_67_1",
    "original_uuid": "c714c03f-0707-4bd6-a686-c6809c1ed20d",
    "content": "Amazon Bedrock Studio User Guide a. For Node name, enter a name for the Knowledge Base node. b. For Select Knowledge Base in the Knowledge Base Details section, select the Knowledge Base that you just created. c. For Select response generation model, select the model that you want the Knowledge Base to generate responses with. 8. Choose Save to save your changes. Add a Knowledge Base component to a Prompt Flow app 63",
    "chunks": [
      {
        "chunk_id": "doc_67_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide a. For Node name, enter a name for the Knowledge Base node. b. For Select Knowledge Base in the Knowledge Base Details section, select the Knowledge Base that you just created. c. For Select response generation model, select the model that you want the Knowledge Base to generate responses with. 8. Choose Save to save your changes. Add a Knowledge Base component to a Prompt Flow app 63"
      }
    ]
  },
  {
    "doc_id": "doc_68_1",
    "original_uuid": "a51206d1-bf32-48cc-9ab0-e24e415129e2",
    "content": "Amazon Bedrock Studio User Guide Safeguard your app with a guardrail Guardrails for Amazon Bedrock lets you implement safeguards for your Amazon Bedrock Studio app based on your use cases and responsible AI policies. You can create multiple guardrails tailored to different use cases and apply them across multiple foundation models, providing a consistent user experience and standardizing safety controls across generative AI apps. You can configure denied topics to disallow undesirable topics and content filters to block harmful content in the prompts you send to a model and to the responses you get from a model. You can use guardrails with text-only foundation models. For more information, see Safeguard your app with a guardrail. You can use guardrails with Amazon Bedrock Studio chat apps. You can add a guardrail component when you create a chat app or you can create a guardrail component within a project. Later. you can use the guardrail component in a chat app. For more information, see Create a guardrail component. Topics • Guardrail policies • Create a guardrail component • Add a guardrail component to a chat app Guardrail policies A guardrail consists of the following policies to avoid content that falls into undesirable or harmful categories. • Content filters – Adjust filter strengths to filter input prompts or model responses containing harmful content. • Denied topics – You can define a set of topics that are undesirable in the context of your app. These topics will be blocked if detected in user queries or model responses. Content filters Guardrails in Bedrock Studio support the following content filters to detect and filter harmful user inputs and FM-generated outputs. Guardrail policies 64",
    "chunks": [
      {
        "chunk_id": "doc_68_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide Safeguard your app with a guardrail Guardrails for Amazon Bedrock lets you implement safeguards for your Amazon Bedrock Studio app based on your use cases and responsible AI policies. You can create multiple guardrails tailored to different use cases and apply them across multiple foundation models, providing a consistent user experience and standardizing safety controls across generative AI apps. You can configure denied topics to disallow undesirable topics and"
      },
      {
        "chunk_id": "doc_68_1_chunk_1",
        "original_index": 1,
        "content": "denied topics to disallow undesirable topics and content filters to block harmful content in the prompts you send to a model and to the responses you get from a model. You can use guardrails with text-only foundation models. For more information, see Safeguard your app with a guardrail. You can use guardrails with Amazon Bedrock Studio chat apps. You can add a guardrail component when you create a chat app or you can create a guardrail component within a project. Later. you can use the guardrail"
      },
      {
        "chunk_id": "doc_68_1_chunk_2",
        "original_index": 2,
        "content": "ithin a project. Later. you can use the guardrail component in a chat app. For more information, see Create a guardrail component. Topics • Guardrail policies • Create a guardrail component • Add a guardrail component to a chat app Guardrail policies A guardrail consists of the following policies to avoid content that falls into undesirable or harmful categories. • Content filters – Adjust filter strengths to filter input prompts or model responses containing harmful content. • Denied topics – You"
      },
      {
        "chunk_id": "doc_68_1_chunk_3",
        "original_index": 3,
        "content": "containing harmful content. • Denied topics – You can define a set of topics that are undesirable in the context of your app. These topics will be blocked if detected in user queries or model responses. Content filters Guardrails in Bedrock Studio support the following content filters to detect and filter harmful user inputs and FM-generated outputs. Guardrail policies 64"
      }
    ]
  },
  {
    "doc_id": "doc_69_1",
    "original_uuid": "f33a0ffd-8c4c-42c4-9cdb-571ecf3321b1",
    "content": "Amazon Bedrock Studio User Guide • Hate – Describes language or a statement that discriminates, criticizes, insults, denounces, or dehumanizes a person or group on the basis of an identity (such as race, ethnicity, gender, religion, sexual orientation, ability, and national origin). • Insults – Describes language or a statement that includes demeaning, humiliating, mocking, insulting, or belittling language. This type of language is also labeled as bullying. • Sexual – Describes language or a statement that indicates sexual interest, activity, or arousal using direct or indirect references to body parts, physical traits, or sex. • Violence – Describes language or a statement that includes glorification of or threats to inflict physical pain, hurt, or injury toward a person, group or thing. Content filtering depends on the confidence classification of user inputs and FM responses across each of the four harmful categories. All input and output statements are classified into one of four confidence levels (NONE, LOW, MEDIUM, HIGH) for each harmful category. For example, if a statement is classified as Hate with HIGH confidence, the likelihood of the statement representing hateful content is high. A single statement can be classified across multiple categories with varying confidence levels. For example, a single statement can be classified as Hate with HIGH confidence, Insults with LOW confidence, Sexual with NONE confidence, and Violence with MEDIUM confidence. For each of the harmful categories, you can configure the strength of the filters. The filter strength determines the degree of filtering harmful content. As you increase the filter strength, the likelihood of filtering harmful content increases and the probability of seeing harmful content in your app reduces. The following table shows the degree of content that each filter strength blocks and allows. Filter strength Blocked content confidence Allowed content confidence None No filtering None, Low, Medium, High Low High None, Low, Medium Medium High, Medium None, Low High High, Medium, Low None Content filters 65",
    "chunks": [
      {
        "chunk_id": "doc_69_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide • Hate – Describes language or a statement that discriminates, criticizes, insults, denounces, or dehumanizes a person or group on the basis of an identity (such as race, ethnicity, gender, religion, sexual orientation, ability, and national origin). • Insults – Describes language or a statement that includes demeaning, humiliating, mocking, insulting, or belittling language. This type of language is also labeled as bullying. • Sexual – Describes language or a statement"
      },
      {
        "chunk_id": "doc_69_1_chunk_1",
        "original_index": 1,
        "content": "ing. • Sexual – Describes language or a statement that indicates sexual interest, activity, or arousal using direct or indirect references to body parts, physical traits, or sex. • Violence – Describes language or a statement that includes glorification of or threats to inflict physical pain, hurt, or injury toward a person, group or thing. Content filtering depends on the confidence classification of user inputs and FM responses across each of the four harmful categories. All input and output statements"
      },
      {
        "chunk_id": "doc_69_1_chunk_2",
        "original_index": 2,
        "content": "rmful categories. All input and output statements are classified into one of four confidence levels (NONE, LOW, MEDIUM, HIGH) for each harmful category. For example, if a statement is classified as Hate with HIGH confidence, the likelihood of the statement representing hateful content is high. A single statement can be classified across multiple categories with varying confidence levels. For example, a single statement can be classified as Hate with HIGH confidence, Insults with LOW confidence, Sexual"
      },
      {
        "chunk_id": "doc_69_1_chunk_3",
        "original_index": 3,
        "content": "H confidence, Insults with LOW confidence, Sexual with NONE confidence, and Violence with MEDIUM confidence. For each of the harmful categories, you can configure the strength of the filters. The filter strength determines the degree of filtering harmful content. As you increase the filter strength, the likelihood of filtering harmful content increases and the probability of seeing harmful content in your app reduces. The following table shows the degree of content that each filter strength blocks"
      },
      {
        "chunk_id": "doc_69_1_chunk_4",
        "original_index": 4,
        "content": "egree of content that each filter strength blocks and allows. Filter strength Blocked content confidence Allowed content confidence None No filtering None, Low, Medium, High Low High None, Low, Medium Medium High, Medium None, Low High High, Medium, Low None Content filters 65"
      }
    ]
  },
  {
    "doc_id": "doc_70_1",
    "original_uuid": "aee800dd-7eb2-4881-9976-4208641af463",
    "content": "Amazon Bedrock Studio User Guide Denied topics Guardrails can be configured with a set of denied topics that are undesirable in the context of your generative AI app. For example, a bank may want their online assistant to avoid any conversation related to investment advice or engage in conversations related to fraudulent activities such as money laundering. You can define up to five denied topics. Input prompts and model completions will be evaluated against each of these topics. If one of the topics is detected, the blocked message configured as part of the guardrail will be returned to the user. Denied topics can be defined by providing a natural language definition of the topic along with a few optional example phrases of the topic. The definition and example phrases are used to detect if an input prompt or a model completion belongs to the topic. Denied topics are defined with the following parameters. • Name – The name of the topic. The name should be a noun phrase. Don't describe the topic in the name. For example: • Investment Advice • Definition – Up to 200 characters summarizing the topic content. The description should describe the content of the topic and its subtopics. Note For best results, adhere to the following principles: • Don't include examples or instructions in the description. • Don't use negative language (such as \"don't talk about investment\" or \"no content about investment\"). The following is an example topic description that you can provide: • Investment advice refers to inquires, guidance or recommendations regarding the management or allocation of funds or assets with the goal of generating returns or achieving specific financial objectives. Denied topics 66",
    "chunks": [
      {
        "chunk_id": "doc_70_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide Denied topics Guardrails can be configured with a set of denied topics that are undesirable in the context of your generative AI app. For example, a bank may want their online assistant to avoid any conversation related to investment advice or engage in conversations related to fraudulent activities such as money laundering. You can define up to five denied topics. Input prompts and model completions will be evaluated against each of these topics. If one of the topics"
      },
      {
        "chunk_id": "doc_70_1_chunk_1",
        "original_index": 1,
        "content": "gainst each of these topics. If one of the topics is detected, the blocked message configured as part of the guardrail will be returned to the user. Denied topics can be defined by providing a natural language definition of the topic along with a few optional example phrases of the topic. The definition and example phrases are used to detect if an input prompt or a model completion belongs to the topic. Denied topics are defined with the following parameters. • Name – The name of the topic. The name"
      },
      {
        "chunk_id": "doc_70_1_chunk_2",
        "original_index": 2,
        "content": "ameters. • Name – The name of the topic. The name should be a noun phrase. Don't describe the topic in the name. For example: • Investment Advice • Definition – Up to 200 characters summarizing the topic content. The description should describe the content of the topic and its subtopics. Note For best results, adhere to the following principles: • Don't include examples or instructions in the description. • Don't use negative language (such as \"don't talk about investment\" or \"no content about investment\")."
      },
      {
        "chunk_id": "doc_70_1_chunk_3",
        "original_index": 3,
        "content": "ut investment\" or \"no content about investment\"). The following is an example topic description that you can provide: • Investment advice refers to inquires, guidance or recommendations regarding the management or allocation of funds or assets with the goal of generating returns or achieving specific financial objectives. Denied topics 66"
      }
    ]
  },
  {
    "doc_id": "doc_71_1",
    "original_uuid": "a3509d78-7f12-4a93-8902-21772b42a5a2",
    "content": "Amazon Bedrock Studio User Guide • Sample phrases – A list of up to five sample phrases that refer to the topic. Each phrase can be up to 1,000 characters. An sample is a prompt or continuation that shows what kind of content should be filtered out. For example: • Is investing in the stocks better than bonds? • Should I invest in gold? Create a guardrail component You can create a guardrail as a component in a Amazon Bedrock Studio project. You can then add the guardrail component to a chat app. You can also create a guardrail component while you are creating a chat app. For an example, see Add a guardrail to your chat app. To create a guardrail component 1. Open your Amazon Bedrock Studio workspace. 2. Make sure that you are in Build mode, by choosing Build at the top right of the page. 3. In the Project dropdown list, choose the project that you want to add a guardrail to. 4. In the Components section, choose Create component and then Guardrail. The Create guardrail pane is shown. 5. For Guardrail name. enter a name for the guardrail. 6. For Guardrail description enter a description for the guardrail. 7. In Content filters do the following. a. Select Enable content filters to turn on content filtering. b. For Filter for prompts, choose the filters that you want to apply to prompts. For more information, see Content filters. c. If you want the filter to apply to responses that the model generates, select Apply the same filters for responses. 8. In Blocked messsaging do the following: a. For Blocked messaging for prompts enter a message to display when the guardrail blocks content in the prompt. b. If you want to show a different message when the guardrail blocks content from a model's response, do the following: Create a guardrail component 67",
    "chunks": [
      {
        "chunk_id": "doc_71_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide • Sample phrases – A list of up to five sample phrases that refer to the topic. Each phrase can be up to 1,000 characters. An sample is a prompt or continuation that shows what kind of content should be filtered out. For example: • Is investing in the stocks better than bonds? • Should I invest in gold? Create a guardrail component You can create a guardrail as a component in a Amazon Bedrock Studio project. You can then add the guardrail component to a chat app."
      },
      {
        "chunk_id": "doc_71_1_chunk_1",
        "original_index": 1,
        "content": "n then add the guardrail component to a chat app. You can also create a guardrail component while you are creating a chat app. For an example, see Add a guardrail to your chat app. To create a guardrail component 1. Open your Amazon Bedrock Studio workspace. 2. Make sure that you are in Build mode, by choosing Build at the top right of the page. 3. In the Project dropdown list, choose the project that you want to add a guardrail to. 4. In the Components section, choose Create component and then Guardrail."
      },
      {
        "chunk_id": "doc_71_1_chunk_2",
        "original_index": 2,
        "content": "tion, choose Create component and then Guardrail. The Create guardrail pane is shown. 5. For Guardrail name. enter a name for the guardrail. 6. For Guardrail description enter a description for the guardrail. 7. In Content filters do the following. a. Select Enable content filters to turn on content filtering. b. For Filter for prompts, choose the filters that you want to apply to prompts. For more information, see Content filters. c. If you want the filter to apply to responses that the model generates,"
      },
      {
        "chunk_id": "doc_71_1_chunk_3",
        "original_index": 3,
        "content": "r to apply to responses that the model generates, select Apply the same filters for responses. 8. In Blocked messsaging do the following: a. For Blocked messaging for prompts enter a message to display when the guardrail blocks content in the prompt. b. If you want to show a different message when the guardrail blocks content from a model's response, do the following: Create a guardrail component 67"
      }
    ]
  },
  {
    "doc_id": "doc_72_1",
    "original_uuid": "7ab9a274-f358-49bd-b8d1-c58c64cf13eb",
    "content": "Amazon Bedrock Studio User Guide i. Clear Apply the same message for blocked responses. ii. For Blocked messaging for responses, enter a message to display when the guardrail blocks content in the response from the model. 9. Add a denied topic filter by doing the following: a. Choose Use advanced features. b. Choose Denied topics. c. Choose Add topic. d. For Name, enter a name for the filter. e. For Definition for topic, enter a definition for the content that you want to deny. f. (Optional) To help guide the guardrail, do the folllowing: i. Choose Sample phrases - optional. ii. For Sample phrases, enter a phrase. iii. Choose Add phrase. iv. Add up to four more phrases by repeating the previous two steps. v. Choose Save. For information about denied topics, see Denied topics. 10. Choose Create to create the guardrail. 11. Add the guardrail component to a chat app by doing Add a guardrail component to a chat app. Add a guardrail component to a chat app In this procedure, you add a guardrail component to an existing chat app. 1. Open the chat app in Amazon Bedrock Studio. 2. In the Configs pane, choose Guardrails. 3. For Guardrails, select the guardrail component that you created in Create a guardrail component. 4. (optional) Preview the guardail by choosing Preview. From the preview you can edit the guardrail, if desired. 5. Choose Save to save your changes. Add a guardrail component to a chat app 68",
    "chunks": [
      {
        "chunk_id": "doc_72_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide i. Clear Apply the same message for blocked responses. ii. For Blocked messaging for responses, enter a message to display when the guardrail blocks content in the response from the model. 9. Add a denied topic filter by doing the following: a. Choose Use advanced features. b. Choose Denied topics. c. Choose Add topic. d. For Name, enter a name for the filter. e. For Definition for topic, enter a definition for the content that you want to deny. f. (Optional) To help"
      },
      {
        "chunk_id": "doc_72_1_chunk_1",
        "original_index": 1,
        "content": "tent that you want to deny. f. (Optional) To help guide the guardrail, do the folllowing: i. Choose Sample phrases - optional. ii. For Sample phrases, enter a phrase. iii. Choose Add phrase. iv. Add up to four more phrases by repeating the previous two steps. v. Choose Save. For information about denied topics, see Denied topics. 10. Choose Create to create the guardrail. 11. Add the guardrail component to a chat app by doing Add a guardrail component to a chat app. Add a guardrail component to a"
      },
      {
        "chunk_id": "doc_72_1_chunk_2",
        "original_index": 2,
        "content": "ent to a chat app. Add a guardrail component to a chat app In this procedure, you add a guardrail component to an existing chat app. 1. Open the chat app in Amazon Bedrock Studio. 2. In the Configs pane, choose Guardrails. 3. For Guardrails, select the guardrail component that you created in Create a guardrail component. 4. (optional) Preview the guardail by choosing Preview. From the preview you can edit the guardrail, if desired. 5. Choose Save to save your changes. Add a guardrail component to"
      },
      {
        "chunk_id": "doc_72_1_chunk_3",
        "original_index": 3,
        "content": "o save your changes. Add a guardrail component to a chat app 68"
      }
    ]
  },
  {
    "doc_id": "doc_73_1",
    "original_uuid": "a5149807-9f6c-47a0-8baa-95bd8601dd95",
    "content": "Amazon Bedrock Studio User Guide Call functions from your app Amazon Bedrock Studio functions let a model include information that it has no previous knowledge of in its response. For example, you can use a function to include dynamic information in a model's response such as a weather forecast, sports results, or traffic conditions. In Amazon Bedrock Studio, a function calls an API hosted outside of Amazon Bedrock Studio. You either create the API yourself, or use an existing API. To create an API, you can use Amazon API Gateway. To use a function in Amazon Bedrock Studio you add a function component to your app. As part of the function, you define an OpenAPI schema for the API that you want the model to call. You also specify how to authenticate the call to the API. When a model receives a prompt, it uses the schema and the prompt to determine if an API should be called and the parameters that the API should receive. If the API is called, the response from the model includes the output from the API. APIs that you call in a function must have a response size that is less than 20K. When add a function to an app, you need to specify the app's system prompt. The system prompt needs to be at least 40 characters long and should mention the new skills that the new function introduces. You can use functions in a Chat app. Topics • Function schema • Authentication methods • Create an Amazon Bedrock Studio function component • Add a function component to a chat app Function schema Amazon Bedrock Studio has the following requirements for the schema that you use to create a function. • The function schema must be OpenAPI version 3.0.0. Function schema 69",
    "chunks": [
      {
        "chunk_id": "doc_73_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide Call functions from your app Amazon Bedrock Studio functions let a model include information that it has no previous knowledge of in its response. For example, you can use a function to include dynamic information in a model's response such as a weather forecast, sports results, or traffic conditions. In Amazon Bedrock Studio, a function calls an API hosted outside of Amazon Bedrock Studio. You either create the API yourself, or use an existing API. To create an API,"
      },
      {
        "chunk_id": "doc_73_1_chunk_1",
        "original_index": 1,
        "content": "urself, or use an existing API. To create an API, you can use Amazon API Gateway. To use a function in Amazon Bedrock Studio you add a function component to your app. As part of the function, you define an OpenAPI schema for the API that you want the model to call. You also specify how to authenticate the call to the API. When a model receives a prompt, it uses the schema and the prompt to determine if an API should be called and the parameters that the API should receive. If the API is called, the"
      },
      {
        "chunk_id": "doc_73_1_chunk_2",
        "original_index": 2,
        "content": "the API should receive. If the API is called, the response from the model includes the output from the API. APIs that you call in a function must have a response size that is less than 20K. When add a function to an app, you need to specify the app's system prompt. The system prompt needs to be at least 40 characters long and should mention the new skills that the new function introduces. You can use functions in a Chat app. Topics • Function schema • Authentication methods • Create an Amazon Bedrock"
      },
      {
        "chunk_id": "doc_73_1_chunk_3",
        "original_index": 3,
        "content": "Authentication methods • Create an Amazon Bedrock Studio function component • Add a function component to a chat app Function schema Amazon Bedrock Studio has the following requirements for the schema that you use to create a function. • The function schema must be OpenAPI version 3.0.0. Function schema 69"
      }
    ]
  },
  {
    "doc_id": "doc_74_1",
    "original_uuid": "1c5f8d2c-d67e-4cd7-87f7-e6bb60a72f25",
    "content": "Amazon Bedrock Studio User Guide • The function schema must be in JSON or YAML format. • The function can have no authentication, API key authentication, Bearer token authentication, or basic authentication. For more information, see Authentication methods. • You can have 0 or 1 server URL. • All Operation Objects must have a description. • All Parameter Objects must have a description. • Security scheme object must have a type that is either apiKey or http. When the type is http, the scheme field must either be basic or bearer. When the type is apiKey, the in property must be query or header. Also, the name property must be defined. • Bedrock Studio only honors globally-scoped security requirement. For more information, see Valid components for globally-scoped security requirements. • Parameters (parameter.in) must be pass passed through query or path. You can't use cookies or headers to pass parameters. • Parameters (parameter schema type) must be primitive types, arrays, or objects (one-level JSON). You can't pass complext nested objects. • Parameter content (parameter.content) is mutually exclusive with the schema. Schema is more commonly used. Use content only for more complex types, or for complex serialization scenarios that are not covered by style and explode. • Parameter style and explode values. form and true for query, simple and false for paths). For more information, see Parameter Serialization. • Request body content must be passed as application/json. • The schema can have up to 5 APIs and an app can use up to 5 APIs across all functions. For the model to correctly choose function, it is important to provide detailed descriptions of the API, including parameters, properties, and responses. Valid components for globally-scoped security requirements Bedrock Studio only honors globally-scoped security requirements. That is, Bedrock Studio ignores security requirements indicated in operation objects. When the requirement array contains a security scheme object with type http and scheme of bearer or basic, the array must contain a single entry. Bedrock Studio ignores further entries. Valid components for globally-scoped security requirements 70",
    "chunks": [
      {
        "chunk_id": "doc_74_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide • The function schema must be in JSON or YAML format. • The function can have no authentication, API key authentication, Bearer token authentication, or basic authentication. For more information, see Authentication methods. • You can have 0 or 1 server URL. • All Operation Objects must have a description. • All Parameter Objects must have a description. • Security scheme object must have a type that is either apiKey or http. When the type is http, the scheme field"
      },
      {
        "chunk_id": "doc_74_1_chunk_1",
        "original_index": 1,
        "content": "or http. When the type is http, the scheme field must either be basic or bearer. When the type is apiKey, the in property must be query or header. Also, the name property must be defined. • Bedrock Studio only honors globally-scoped security requirement. For more information, see Valid components for globally-scoped security requirements. • Parameters (parameter.in) must be pass passed through query or path. You can't use cookies or headers to pass parameters. • Parameters (parameter schema type)"
      },
      {
        "chunk_id": "doc_74_1_chunk_2",
        "original_index": 2,
        "content": "parameters. • Parameters (parameter schema type) must be primitive types, arrays, or objects (one-level JSON). You can't pass complext nested objects. • Parameter content (parameter.content) is mutually exclusive with the schema. Schema is more commonly used. Use content only for more complex types, or for complex serialization scenarios that are not covered by style and explode. • Parameter style and explode values. form and true for query, simple and false for paths). For more information, see"
      },
      {
        "chunk_id": "doc_74_1_chunk_3",
        "original_index": 3,
        "content": "e and false for paths). For more information, see Parameter Serialization. • Request body content must be passed as application/json. • The schema can have up to 5 APIs and an app can use up to 5 APIs across all functions. For the model to correctly choose function, it is important to provide detailed descriptions of the API, including parameters, properties, and responses. Valid components for globally-scoped security requirements Bedrock Studio only honors globally-scoped security requirements."
      },
      {
        "chunk_id": "doc_74_1_chunk_4",
        "original_index": 4,
        "content": "nly honors globally-scoped security requirements. That is, Bedrock Studio ignores security requirements indicated in operation objects. When the requirement array contains a security scheme object with type http and scheme of bearer or basic, the array must contain a single entry. Bedrock Studio ignores further entries. Valid components for globally-scoped security requirements 70"
      }
    ]
  },
  {
    "doc_id": "doc_75_1",
    "original_uuid": "0c90f998-8802-4132-8e16-4a68be96a0ca",
    "content": "Amazon Bedrock Studio User Guide When the requirement array contains a security scheme object with type apiKey, you can have a maximum of 2 entries. For example, if you have the following components: \"components\": { \"securitySchemes\": { \"api_key_1\": { \"type\": \"apiKey\", \"name\": \"appid1\", \"in\": \"query\" }, \"api_key_2\": { \"type\": \"apiKey\", \"name\": \"appid2\", \"in\": \"header\" }, \"api_key_3\": { \"type\": \"apiKey\", \"name\": \"appid3\", \"in\": \"cookie\" }, \"bearer_1\": { \"type\": \"http\", \"scheme\": \"bearer\", }, \"bearer_2\": { \"type\": \"http\", \"scheme\": \"bearer\", }, \"basic_1\": { \"type\": \"http\", \"scheme\": \"basic\", }, \"basic_2\": { \"type\": \"http\", \"scheme\": \"basic\", }, \"http_digest\": { \"type\": \"http\", \"scheme\": \"digest\" }, \"oauth2_1\": { \"type\": \"oauth2\" Valid components for globally-scoped security requirements 71",
    "chunks": [
      {
        "chunk_id": "doc_75_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide When the requirement array contains a security scheme object with type apiKey, you can have a maximum of 2 entries. For example, if you have the following components: \"components\": { \"securitySchemes\": { \"api_key_1\": { \"type\": \"apiKey\", \"name\": \"appid1\", \"in\": \"query\" }, \"api_key_2\": { \"type\": \"apiKey\", \"name\": \"appid2\", \"in\": \"header\" }, \"api_key_3\": { \"type\": \"apiKey\", \"name\": \"appid3\", \"in\": \"cookie\" }, \"bearer_1\": { \"type\": \"http\", \"scheme\": \"bearer\", }, \"bearer_2\":"
      },
      {
        "chunk_id": "doc_75_1_chunk_1",
        "original_index": 1,
        "content": "type\": \"http\", \"scheme\": \"bearer\", }, \"bearer_2\": { \"type\": \"http\", \"scheme\": \"bearer\", }, \"basic_1\": { \"type\": \"http\", \"scheme\": \"basic\", }, \"basic_2\": { \"type\": \"http\", \"scheme\": \"basic\", }, \"http_digest\": { \"type\": \"http\", \"scheme\": \"digest\" }, \"oauth2_1\": { \"type\": \"oauth2\" Valid components for globally-scoped security requirements 71"
      }
    ]
  },
  {
    "doc_id": "doc_76_1",
    "original_uuid": "4afc31dc-e2e0-484f-9c63-1095a93a4a04",
    "content": "Amazon Bedrock Studio User Guide } } } The following are valid: # 1 API key \"security\": [ { \"api_key_1\": [] } ], # 2 API keys \"security\": { { \"api_key_1\": [], \"api_key_2\": [] } } # Bearer \"security\": { \"bearer_1\": [] } # Basic \"security\": { \"basic_1\": [] } The following are invalid: # Invalid: `type` must only be `apiKey` or `http` \"security\": { \"oauth2_1\": [] } # Invalid: `scheme` must only be `basic` or `bearer` if `type` is `http` \"security\": { \"http_digest\": [] } Valid components for globally-scoped security requirements 72",
    "chunks": [
      {
        "chunk_id": "doc_76_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide } } } The following are valid: # 1 API key \"security\": [ { \"api_key_1\": [] } ], # 2 API keys \"security\": { { \"api_key_1\": [], \"api_key_2\": [] } } # Bearer \"security\": { \"bearer_1\": [] } # Basic \"security\": { \"basic_1\": [] } The following are invalid: # Invalid: `type` must only be `apiKey` or `http` \"security\": { \"oauth2_1\": [] } # Invalid: `scheme` must only be `basic` or `bearer` if `type` is `http` \"security\": { \"http_digest\": [] } Valid components for globally-scoped"
      },
      {
        "chunk_id": "doc_76_1_chunk_1",
        "original_index": 1,
        "content": "igest\": [] } Valid components for globally-scoped security requirements 72"
      }
    ]
  },
  {
    "doc_id": "doc_77_1",
    "original_uuid": "2d1fbd60-7ea8-4dd2-83df-268929ee8db8",
    "content": "Amazon Bedrock Studio User Guide # Invalid: `security` must only contain 1 entry if `type` is `basic` or `bearer` \"security\": { \"basic_1\": [], \"basic_2\": [] } # Invalid: `security` must not contain varying security types \"security\": { \"api_key_1\": [], \"basic_1\": [] } # Invalid: API key must only have `in` property set to `header` or `query` \"security\": { \"api_key_1\": [], \"api_key_3\": [] } # Invalid: `security` must not have more than 2 API keys \"security\": { { \"api_key_1\": [], \"api_key_2\": [], \"api_key_3\": [] } } Authentication methods Amazon Bedrock Studio supports the following methods for authenticating function calls to an API server. If you authenticate a function call, make sure the credentials you provide are correct as Bedrock Studio doesn't verify the credentials before you use them in a function call. • No authentication – No authentication means that the client doesn't need to provide any credentials to access a resource or service. This method is typically used for publicly available resources that don't require any form of authentication. • API keys – An API key is a unique identifier used to authenticate a client application and allow it to access an API or service. You can add a maximum of two keys. • Bearer token – A bearer token is an opaque string that represents an authentication credential. It is typically obtained after a successful authentication process, such as OAuth 2.0. This method Authentication methods 73",
    "chunks": [
      {
        "chunk_id": "doc_77_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide # Invalid: `security` must only contain 1 entry if `type` is `basic` or `bearer` \"security\": { \"basic_1\": [], \"basic_2\": [] } # Invalid: `security` must not contain varying security types \"security\": { \"api_key_1\": [], \"basic_1\": [] } # Invalid: API key must only have `in` property set to `header` or `query` \"security\": { \"api_key_1\": [], \"api_key_3\": [] } # Invalid: `security` must not have more than 2 API keys \"security\": { { \"api_key_1\": [], \"api_key_2\": [], \"api_key_3\":"
      },
      {
        "chunk_id": "doc_77_1_chunk_1",
        "original_index": 1,
        "content": "{ \"api_key_1\": [], \"api_key_2\": [], \"api_key_3\": [] } } Authentication methods Amazon Bedrock Studio supports the following methods for authenticating function calls to an API server. If you authenticate a function call, make sure the credentials you provide are correct as Bedrock Studio doesn't verify the credentials before you use them in a function call. • No authentication – No authentication means that the client doesn't need to provide any credentials to access a resource or service. This"
      },
      {
        "chunk_id": "doc_77_1_chunk_2",
        "original_index": 2,
        "content": "credentials to access a resource or service. This method is typically used for publicly available resources that don't require any form of authentication. • API keys – An API key is a unique identifier used to authenticate a client application and allow it to access an API or service. You can add a maximum of two keys. • Bearer token – A bearer token is an opaque string that represents an authentication credential. It is typically obtained after a successful authentication process, such as OAuth"
      },
      {
        "chunk_id": "doc_77_1_chunk_3",
        "original_index": 3,
        "content": "successful authentication process, such as OAuth 2.0. This method Authentication methods 73"
      }
    ]
  },
  {
    "doc_id": "doc_78_1",
    "original_uuid": "11aecaa6-2162-47b3-9787-f827683e84d2",
    "content": "Amazon Bedrock Studio User Guide allows the client to access protected resources without having to send the actual credentials (username and password) with each request. Note Amazon Bedrock Studio is unable to assure whether the token is valid or has already expired. It is your responsibility to make sure that you provide a valid token, and to update the token to a new one before it expires. If the token expires, Amazon Bedrock won't be able to successfully call APIs with the token. • Basic authentication – Basic authentication is a simple authentication scheme built into the HTTP protocol. The credentials are sent with every request, which can be a security concern if the connection is not secured using HTTPS. Basic authentication is generally considered less secure than other modern authentication methods and should be used with caution, especially in production environments. Create an Amazon Bedrock Studio function component You can create a function as a component in a Amazon Bedrock Studio project. If you are creating an app, you can can also create a function when you configure the app. For an example, see Add a function call to your chat app. To create a function component 1. Open your Amazon Bedrock Studio workspace. 2. Make sure that you are in Build mode, by choosing Build at the top right of the page. 3. In the Project dropdown list, choose the project that you want to add a function to. 4. In the Components section, choose Create component and then Function. The Create function pane is shown. 5. For Function name, enter a name for the function in in Function name. 6. For Function description, enter a description for the function. 7. For Function schema, enter the JSON or YAML format OpenAPI schema for the API. Alternatively, upload the JSON or YAML for the file by choosing Import JSON/YAML. You can clear the text box by choosing Reset. 8. Choose Validate schema to validate the schema. Create a function component 74",
    "chunks": [
      {
        "chunk_id": "doc_78_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide allows the client to access protected resources without having to send the actual credentials (username and password) with each request. Note Amazon Bedrock Studio is unable to assure whether the token is valid or has already expired. It is your responsibility to make sure that you provide a valid token, and to update the token to a new one before it expires. If the token expires, Amazon Bedrock won't be able to successfully call APIs with the token. • Basic authentication"
      },
      {
        "chunk_id": "doc_78_1_chunk_1",
        "original_index": 1,
        "content": "call APIs with the token. • Basic authentication – Basic authentication is a simple authentication scheme built into the HTTP protocol. The credentials are sent with every request, which can be a security concern if the connection is not secured using HTTPS. Basic authentication is generally considered less secure than other modern authentication methods and should be used with caution, especially in production environments. Create an Amazon Bedrock Studio function component You can create a function"
      },
      {
        "chunk_id": "doc_78_1_chunk_2",
        "original_index": 2,
        "content": "udio function component You can create a function as a component in a Amazon Bedrock Studio project. If you are creating an app, you can can also create a function when you configure the app. For an example, see Add a function call to your chat app. To create a function component 1. Open your Amazon Bedrock Studio workspace. 2. Make sure that you are in Build mode, by choosing Build at the top right of the page. 3. In the Project dropdown list, choose the project that you want to add a function to."
      },
      {
        "chunk_id": "doc_78_1_chunk_3",
        "original_index": 3,
        "content": "e the project that you want to add a function to. 4. In the Components section, choose Create component and then Function. The Create function pane is shown. 5. For Function name, enter a name for the function in in Function name. 6. For Function description, enter a description for the function. 7. For Function schema, enter the JSON or YAML format OpenAPI schema for the API. Alternatively, upload the JSON or YAML for the file by choosing Import JSON/YAML. You can clear the text box by choosing"
      },
      {
        "chunk_id": "doc_78_1_chunk_4",
        "original_index": 4,
        "content": "JSON/YAML. You can clear the text box by choosing Reset. 8. Choose Validate schema to validate the schema. Create a function component 74"
      }
    ]
  },
  {
    "doc_id": "doc_79_1",
    "original_uuid": "b30bc140-4207-4a2e-8761-f8625e045cde",
    "content": "Amazon Bedrock Studio User Guide 9. For Authentication method select the authentication method for your API server. By default, Amazon Bedrock Studio preselects the authentication based on information it finds in your OpenAPI schema. For information about authentication methods, see Authentication methods. 10. Enter the information for the authention method that you selected in the previous step. 11. For API servers, enter the URL for your server in Server URL. This value is autopopulated if the server URL is in the schema. 12. Choose Create to create your function. 13. Add your function to a chat app by doing Add a function component to a chat app. Add a function component to a chat app In this procedure, you add a function component to an existing chat app. You can add up to 5 functions to an app. For each function you add, be sure to update the system prompt with information about the function. 1. Open the chat app in Amazon Bedrock Studio. 2. In the Configs pane, do the following: a. For System prompt and examples, enter or update the system prompt so that it describes the function. b. Choose Functions. c. For Functions, select the function component that you created in Create an Amazon Bedrock Studio function component. 3. Choose Save to save your changes. Add a function component to a chat app 75",
    "chunks": [
      {
        "chunk_id": "doc_79_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide 9. For Authentication method select the authentication method for your API server. By default, Amazon Bedrock Studio preselects the authentication based on information it finds in your OpenAPI schema. For information about authentication methods, see Authentication methods. 10. Enter the information for the authention method that you selected in the previous step. 11. For API servers, enter the URL for your server in Server URL. This value is autopopulated if the"
      },
      {
        "chunk_id": "doc_79_1_chunk_1",
        "original_index": 1,
        "content": "in Server URL. This value is autopopulated if the server URL is in the schema. 12. Choose Create to create your function. 13. Add your function to a chat app by doing Add a function component to a chat app. Add a function component to a chat app In this procedure, you add a function component to an existing chat app. You can add up to 5 functions to an app. For each function you add, be sure to update the system prompt with information about the function. 1. Open the chat app in Amazon Bedrock Studio."
      },
      {
        "chunk_id": "doc_79_1_chunk_2",
        "original_index": 2,
        "content": "n. 1. Open the chat app in Amazon Bedrock Studio. 2. In the Configs pane, do the following: a. For System prompt and examples, enter or update the system prompt so that it describes the function. b. Choose Functions. c. For Functions, select the function component that you created in Create an Amazon Bedrock Studio function component. 3. Choose Save to save your changes. Add a function component to a chat app 75"
      }
    ]
  },
  {
    "doc_id": "doc_80_1",
    "original_uuid": "cc402f9b-1e11-4bf7-9e92-4cce2f4a7daa",
    "content": "Amazon Bedrock Studio User Guide Organize your work with projects in Amazon Bedrock Studio Here you learn how to manage the resources (apps, components, and prompts) in your projects. You can manage a project by using the App builder and Project details. The App builder is one way you can access the chat app or Prompt Flows app that you are currently working on. Project details is where you create and manage the apps, components, and prompts that are in the project. Topics • Create an Amazon Bedrock Studio project • Share an Amazon Bedrock Studio project • Stop sharing an Amazon Bedrock Studio project • Delete resources from an Amazon Bedrock Studio project • Delete an Amazon Bedrock Studio project Create an Amazon Bedrock Studio project Within Build mode, an Amazon Bedrock Studio project is where you organize the apps, components, and prompts that you create. After you create a project you can do the following: • Create a chat app. • Create a Prompt Flows app. • Create prompts for your prompt flows apps. • Create data sources for your apps. • Create functions for your chat apps. • Create guardrails for your chat apps. To create a project 1. Open your Amazon Bedrock Studio workspace. 2. Make sure that you are in Build mode, by choosing Build at the top right of the page. Create a project 76",
    "chunks": [
      {
        "chunk_id": "doc_80_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide Organize your work with projects in Amazon Bedrock Studio Here you learn how to manage the resources (apps, components, and prompts) in your projects. You can manage a project by using the App builder and Project details. The App builder is one way you can access the chat app or Prompt Flows app that you are currently working on. Project details is where you create and manage the apps, components, and prompts that are in the project. Topics • Create an Amazon Bedrock"
      },
      {
        "chunk_id": "doc_80_1_chunk_1",
        "original_index": 1,
        "content": "in the project. Topics • Create an Amazon Bedrock Studio project • Share an Amazon Bedrock Studio project • Stop sharing an Amazon Bedrock Studio project • Delete resources from an Amazon Bedrock Studio project • Delete an Amazon Bedrock Studio project Create an Amazon Bedrock Studio project Within Build mode, an Amazon Bedrock Studio project is where you organize the apps, components, and prompts that you create. After you create a project you can do the following: • Create a chat app. • Create"
      },
      {
        "chunk_id": "doc_80_1_chunk_2",
        "original_index": 2,
        "content": "n do the following: • Create a chat app. • Create a Prompt Flows app. • Create prompts for your prompt flows apps. • Create data sources for your apps. • Create functions for your chat apps. • Create guardrails for your chat apps. To create a project 1. Open your Amazon Bedrock Studio workspace. 2. Make sure that you are in Build mode, by choosing Build at the top right of the page. Create a project 76"
      }
    ]
  },
  {
    "doc_id": "doc_81_1",
    "original_uuid": "8aae4808-1f70-42bd-94ad-cdef8184a71f",
    "content": "Amazon Bedrock Studio User Guide 3. Choose the Project dropdown list box at the top of the page and then select View all projects 4. Choose Create new project. 5. For Project name, enter a name for your project. 6. For Project description, enter a name for your project. 7. Choose Create to create the project. It might take up to a minute to create the project. 8. In the Projects section, a new card for your appears. In the card, choose Go to project. 9. On the project page, note the following: • You can access the App builder and Project details navigation pane by choosing the menu at the top left of the page. • App builder is where you can access the apps that you are currently working on. Amazon Bedrock Studio creates an empty chat app and an empty Prompt Flows app for you. • Project details is where you can access the resources (apps, components, and prompts) that your app uses. Choose Overview to get to an overview of your project. In the overview, you can also create resources for your project. Create a project 77",
    "chunks": [
      {
        "chunk_id": "doc_81_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide 3. Choose the Project dropdown list box at the top of the page and then select View all projects 4. Choose Create new project. 5. For Project name, enter a name for your project. 6. For Project description, enter a name for your project. 7. Choose Create to create the project. It might take up to a minute to create the project. 8. In the Projects section, a new card for your appears. In the card, choose Go to project. 9. On the project page, note the following: •"
      },
      {
        "chunk_id": "doc_81_1_chunk_1",
        "original_index": 1,
        "content": "ct. 9. On the project page, note the following: • You can access the App builder and Project details navigation pane by choosing the menu at the top left of the page. • App builder is where you can access the apps that you are currently working on. Amazon Bedrock Studio creates an empty chat app and an empty Prompt Flows app for you. • Project details is where you can access the resources (apps, components, and prompts) that your app uses. Choose Overview to get to an overview of your project. In"
      },
      {
        "chunk_id": "doc_81_1_chunk_2",
        "original_index": 2,
        "content": "verview to get to an overview of your project. In the overview, you can also create resources for your project. Create a project 77"
      }
    ]
  },
  {
    "doc_id": "doc_82_1",
    "original_uuid": "bc23b983-0f0d-446b-91a5-21d7cc7ff7aa",
    "content": "Amazon Bedrock Studio User Guide Share an Amazon Bedrock Studio project You can share a project with up to 20 workspace members. A workspace member can be a user or a group of users. A project can have up to 100000 users across up to 20 groups. To manage the members in your workspace, contact your administrator. For more information, see Add or remove workspace members. Note that members that you share a project with have permissions to delete the project. To share a project 1. Open your Amazon Bedrock Studio workspace. 2. Choose Build. 3. At the top of the page, choose the Project dropdown list box and choose View all projects. 4. On the card for the project that you want to share, choose the menu button and the choose Share project. 5. For Member type choose Individual user or Group, depending on the type of member that you want share the project with. Share a project 78",
    "chunks": [
      {
        "chunk_id": "doc_82_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide Share an Amazon Bedrock Studio project You can share a project with up to 20 workspace members. A workspace member can be a user or a group of users. A project can have up to 100000 users across up to 20 groups. To manage the members in your workspace, contact your administrator. For more information, see Add or remove workspace members. Note that members that you share a project with have permissions to delete the project. To share a project 1. Open your Amazon Bedrock"
      },
      {
        "chunk_id": "doc_82_1_chunk_1",
        "original_index": 1,
        "content": "t. To share a project 1. Open your Amazon Bedrock Studio workspace. 2. Choose Build. 3. At the top of the page, choose the Project dropdown list box and choose View all projects. 4. On the card for the project that you want to share, choose the menu button and the choose Share project. 5. For Member type choose Individual user or Group, depending on the type of member that you want share the project with. Share a project 78"
      }
    ]
  },
  {
    "doc_id": "doc_83_1",
    "original_uuid": "d8a3a697-55f9-463e-ad3e-40f3963cfa47",
    "content": "Amazon Bedrock Studio User Guide 6. Search for the users or groups that you want to share the project by entering the user name or group in the Search by alias to invite members text box. 7. In the drop down list box, the select the matching user name or group that want to share with. Bedrock Studio automatically adds the workspace member to the project. 8. Choose Copy link to copy the URL link that project members need to access the project. 9. Use email, or another secure communication method, to send the URL link to the members that you added to the project. Stop sharing an Amazon Bedrock Studio project You can stop sharing a project with members of your workspace. To stop sharing a project 1. Open your Amazon Bedrock Studio workspace. 2. Choose Build. 3. At the top of the page, choose the Project dropdown list box and choose View all projects. 4. On the card for the project that you want to share, choose the menu button and the choose Share project. 5. In All members with access, choose the trash icon next to the user or group that you want to stop sharing with. Bedrock Studio studio automatically stops sharing the project to the member. Delete resources from an Amazon Bedrock Studio project A project can contain one or more apps, components, or prompts. You can delete these resources, if you no longer need them. Note If want to delete a project, you must first delete all resources in the project (Delete an Amazon Bedrock Studio project). Stop sharing a project 79",
    "chunks": [
      {
        "chunk_id": "doc_83_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide 6. Search for the users or groups that you want to share the project by entering the user name or group in the Search by alias to invite members text box. 7. In the drop down list box, the select the matching user name or group that want to share with. Bedrock Studio automatically adds the workspace member to the project. 8. Choose Copy link to copy the URL link that project members need to access the project. 9. Use email, or another secure communication method,"
      },
      {
        "chunk_id": "doc_83_1_chunk_1",
        "original_index": 1,
        "content": "se email, or another secure communication method, to send the URL link to the members that you added to the project. Stop sharing an Amazon Bedrock Studio project You can stop sharing a project with members of your workspace. To stop sharing a project 1. Open your Amazon Bedrock Studio workspace. 2. Choose Build. 3. At the top of the page, choose the Project dropdown list box and choose View all projects. 4. On the card for the project that you want to share, choose the menu button and the choose"
      },
      {
        "chunk_id": "doc_83_1_chunk_2",
        "original_index": 2,
        "content": "t to share, choose the menu button and the choose Share project. 5. In All members with access, choose the trash icon next to the user or group that you want to stop sharing with. Bedrock Studio studio automatically stops sharing the project to the member. Delete resources from an Amazon Bedrock Studio project A project can contain one or more apps, components, or prompts. You can delete these resources, if you no longer need them. Note If want to delete a project, you must first delete all resources"
      },
      {
        "chunk_id": "doc_83_1_chunk_3",
        "original_index": 3,
        "content": "te a project, you must first delete all resources in the project (Delete an Amazon Bedrock Studio project). Stop sharing a project 79"
      }
    ]
  },
  {
    "doc_id": "doc_84_1",
    "original_uuid": "078df2f2-1fec-4294-9d14-e2d9a64f9f0d",
    "content": "Amazon Bedrock Studio User Guide To delete a resource from a project 1. Open your Amazon Bedrock Studio workspace. 2. Choose Build. 3. At the top of the page, choose the Project dropdown list box and choose the project from which you want to delete an app or component. 4. Delete an app by doing the following: a. In the left navigation pane, open Project details and then choose Apps. b. For the app you want to delete, choose the trash button. c. In the delete app dialog box, choose Delete to delete the app. 5. Delete a component by doing the following: a. In the left navigation pane, open Project details and then choose Components. b. For the component that you want to delete, choose the menu button then choose Delete. c. In the delete component dialog box, choose Delete to delete the component. After deleting the component Bedrock Studio returns you to the project page. 6. Delete a prompt by doing the following: a. In the left navigation pane, open Project details and then choose Prompts. b. For a prompt that you want to delete, choose the trash button. c. In the delete prompt dialog box, choose Delete to delete the prompt. Delete an Amazon Bedrock Studio project You can delete projects that you have created and projects that others have shared to you. Before you can delete a project, you must first delete any associated apps, components and prompts. To delete a Amazon Bedrock Studio project 1. Open your Amazon Bedrock Studio workspace. 2. Choose Build. 3. At the top of the page, choose the Project dropdown list box and choose the project that you want to delete. 4. Delete the apps by doing the following: Delete a project 80",
    "chunks": [
      {
        "chunk_id": "doc_84_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide To delete a resource from a project 1. Open your Amazon Bedrock Studio workspace. 2. Choose Build. 3. At the top of the page, choose the Project dropdown list box and choose the project from which you want to delete an app or component. 4. Delete an app by doing the following: a. In the left navigation pane, open Project details and then choose Apps. b. For the app you want to delete, choose the trash button. c. In the delete app dialog box, choose Delete to delete"
      },
      {
        "chunk_id": "doc_84_1_chunk_1",
        "original_index": 1,
        "content": "he delete app dialog box, choose Delete to delete the app. 5. Delete a component by doing the following: a. In the left navigation pane, open Project details and then choose Components. b. For the component that you want to delete, choose the menu button then choose Delete. c. In the delete component dialog box, choose Delete to delete the component. After deleting the component Bedrock Studio returns you to the project page. 6. Delete a prompt by doing the following: a. In the left navigation pane,"
      },
      {
        "chunk_id": "doc_84_1_chunk_2",
        "original_index": 2,
        "content": "ng the following: a. In the left navigation pane, open Project details and then choose Prompts. b. For a prompt that you want to delete, choose the trash button. c. In the delete prompt dialog box, choose Delete to delete the prompt. Delete an Amazon Bedrock Studio project You can delete projects that you have created and projects that others have shared to you. Before you can delete a project, you must first delete any associated apps, components and prompts. To delete a Amazon Bedrock Studio project"
      },
      {
        "chunk_id": "doc_84_1_chunk_3",
        "original_index": 3,
        "content": "rompts. To delete a Amazon Bedrock Studio project 1. Open your Amazon Bedrock Studio workspace. 2. Choose Build. 3. At the top of the page, choose the Project dropdown list box and choose the project that you want to delete. 4. Delete the apps by doing the following: Delete a project 80"
      }
    ]
  },
  {
    "doc_id": "doc_85_1",
    "original_uuid": "64ebabec-3374-4f7d-b2ee-e727c1e6acc7",
    "content": "Amazon Bedrock Studio User Guide a. In the left navigation pane, open Project details and then choose Apps. b. For an app you want to delete, choose the trash button. c. In the delete app dialog box, choose Delete to delete the app. d. Repeat the previous two steps until you delete all apps in the project. 5. Delete the components by doing the following: a. In the left navigation pane, open Project details and then choose Components. b. For a component that you want to delete, choose the menu button then choose Delete. c. In the delete component dialog box, choose Delete to delete the component. After deleting the component Bedrock Studio returns you to the project page. d. Repeat the previous three steps for each component in the project. 6. Delete the prompts by doing the following: a. In the left navigation pane, open Project details and then choose Prompts. b. For a prompt that you want to delete, choose the trash button. c. In the delete prompt dialog box, choose Delete to delete the prompt. d. Repeat the previous two steps for each prompt in the project. 7. In the left navigation pane, open Project details and then choose Overview. 8. Choose Delete to delete the project. If the project still has associated apps or components, Bedrock Studio shows a dialog box. Chose Got it to go back to the project page and delete the remaining apps and components. 9. Contact the project teams member to let them know the project has been deleted. Bedrock Studio doesn't automatically notify team members that the project has been deleted. Delete a project 81",
    "chunks": [
      {
        "chunk_id": "doc_85_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide a. In the left navigation pane, open Project details and then choose Apps. b. For an app you want to delete, choose the trash button. c. In the delete app dialog box, choose Delete to delete the app. d. Repeat the previous two steps until you delete all apps in the project. 5. Delete the components by doing the following: a. In the left navigation pane, open Project details and then choose Components. b. For a component that you want to delete, choose the menu button"
      },
      {
        "chunk_id": "doc_85_1_chunk_1",
        "original_index": 1,
        "content": "t that you want to delete, choose the menu button then choose Delete. c. In the delete component dialog box, choose Delete to delete the component. After deleting the component Bedrock Studio returns you to the project page. d. Repeat the previous three steps for each component in the project. 6. Delete the prompts by doing the following: a. In the left navigation pane, open Project details and then choose Prompts. b. For a prompt that you want to delete, choose the trash button. c. In the delete"
      },
      {
        "chunk_id": "doc_85_1_chunk_2",
        "original_index": 2,
        "content": "delete, choose the trash button. c. In the delete prompt dialog box, choose Delete to delete the prompt. d. Repeat the previous two steps for each prompt in the project. 7. In the left navigation pane, open Project details and then choose Overview. 8. Choose Delete to delete the project. If the project still has associated apps or components, Bedrock Studio shows a dialog box. Chose Got it to go back to the project page and delete the remaining apps and components. 9. Contact the project teams member"
      },
      {
        "chunk_id": "doc_85_1_chunk_3",
        "original_index": 3,
        "content": "d components. 9. Contact the project teams member to let them know the project has been deleted. Bedrock Studio doesn't automatically notify team members that the project has been deleted. Delete a project 81"
      }
    ]
  },
  {
    "doc_id": "doc_86_1",
    "original_uuid": "d50aa40e-098e-42d8-94b1-cab407ea7b04",
    "content": "Amazon Bedrock Studio User Guide Document history for the Amazon Bedrock Studio User Guide • Latest documentation update: August 20th 2024 The following table describes important changes in each release of Amazon Bedrock Studio. For notification about updates to this documentation, you can subscribe to an RSS feed. Change Description Date New features (Preview) You can now export a chat August 20, 2024 app from Amazon Bedrock Studio. New features (Preview) You can now use Prompt July 22, 2024 Flows and Prompt Management with Amazon Bedrock Studio. Preview release Preview release of Amazon May 7, 2024 Bedrock Studio. 82",
    "chunks": [
      {
        "chunk_id": "doc_86_1_chunk_0",
        "original_index": 0,
        "content": "Amazon Bedrock Studio User Guide Document history for the Amazon Bedrock Studio User Guide • Latest documentation update: August 20th 2024 The following table describes important changes in each release of Amazon Bedrock Studio. For notification about updates to this documentation, you can subscribe to an RSS feed. Change Description Date New features (Preview) You can now export a chat August 20, 2024 app from Amazon Bedrock Studio. New features (Preview) You can now use Prompt July 22, 2024 Flows"
      },
      {
        "chunk_id": "doc_86_1_chunk_1",
        "original_index": 1,
        "content": "eview) You can now use Prompt July 22, 2024 Flows and Prompt Management with Amazon Bedrock Studio. Preview release Preview release of Amazon May 7, 2024 Bedrock Studio. 82"
      }
    ]
  }
]